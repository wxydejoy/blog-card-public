{"title":"leetcode 刷题记录（倒序）","slug":"post/code/others/leetcode","date":"2023-06-08T00:06:00.000Z","updated":"2023-06-08T00:06:00.000Z","comments":true,"path":"api/articles/post/code/others/leetcode.json","excerpt":null,"covers":["https://img.undf.top/ob/65a55d76840ace1e05854d2e63fcec5a.png","https://img.undf.top/ob/12066b68d442b8cec9ec2fd2bb92d2b4.gif"],"content":"<blockquote>\n<p>大部分为抄答案，看解析，且跳过困难的题目，希望能学到点东西</p>\n</blockquote>\n<ol start=\"21\">\n<li>合并两个有序链表</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大佬递归确实强</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     struct ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根节点写的不太顺利，但做出来了</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">mergeTwoLists</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* list1, <span class=\"keyword\">struct</span> ListNode* list2)</span> &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">use</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">// struct ListNode root;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">root</span> =</span> (<span class=\"keyword\">struct</span> ListNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    <span class=\"comment\">// root = list2;</span></span><br><span class=\"line\">    <span class=\"comment\">// use = root-&gt;next;</span></span><br><span class=\"line\">    root-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    use = root;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (list1 || list2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!list1) &#123; <span class=\"comment\">// list1 null</span></span><br><span class=\"line\">            use-&gt;next = list2;</span><br><span class=\"line\">            list2 = list2-&gt;next;</span><br><span class=\"line\">            use = use-&gt;next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!list2) &#123; <span class=\"comment\">// list2 null</span></span><br><span class=\"line\">            use-&gt;next = list1;</span><br><span class=\"line\">            list1 = list1-&gt;next;</span><br><span class=\"line\">            use = use-&gt;next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// compare</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list1-&gt;val &lt; list2-&gt;val) &#123;</span><br><span class=\"line\">                use-&gt;next = list1;</span><br><span class=\"line\">                list1 = list1-&gt;next;</span><br><span class=\"line\">                use = use-&gt;next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                use-&gt;next = list2;</span><br><span class=\"line\">                list2 = list2-&gt;next;</span><br><span class=\"line\">                use = use-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root-&gt;next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">mergeTwoLists</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* list1, <span class=\"keyword\">struct</span> ListNode* list2)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1 == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list2 == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">mergedList</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class=\"line\">        mergedList = list1;</span><br><span class=\"line\">        mergedList-&gt;next = mergeTwoLists(list1-&gt;next, list2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mergedList = list2;</span><br><span class=\"line\">        mergedList-&gt;next = mergeTwoLists(list1, list2-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergedList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">作者：tt<span class=\"number\">-1103</span></span><br><span class=\"line\">链接：https:<span class=\"comment\">//leetcode.cn/problems/merge-two-sorted-lists/solutions/2512813/he-bing-you-xu-lian-biao-by-tt-1103-74r9/</span></span><br><span class=\"line\">来源：力扣（LeetCode）</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>两数相加</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链表递归 https://leetcode.cn/problems/add-two-numbers/description/</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode *<span class=\"title function_\">helper</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *l1, <span class=\"keyword\">struct</span> ListNode *l2, <span class=\"type\">int</span> carry)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"literal\">NULL</span> &amp;&amp; l2 == <span class=\"literal\">NULL</span> &amp;&amp; carry == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> sum = carry;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += l1-&gt;val;</span><br><span class=\"line\">        l1 = l1-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += l2-&gt;val;</span><br><span class=\"line\">        l2 = l2-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">l</span> =</span> <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    l-&gt;val = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">    l-&gt;next = helper(l1, l2, sum / <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode *<span class=\"title function_\">addTwoNumbers</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *l1, <span class=\"keyword\">struct</span> ListNode *l2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(l1, l2, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://leetcode.cn/problems/valid-parentheses/\">20. 有效的括号</a><br>大佬的答案</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">char</span>* s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> mp[<span class=\"number\">128</span>] = &#123;&#125;;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;)&#x27;</span>] = <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;]&#x27;</span>] = <span class=\"string\">&#x27;[&#x27;</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;&#125;&#x27;</span>] = <span class=\"string\">&#x27;&#123;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> top = <span class=\"number\">0</span>; <span class=\"comment\">// 直接把 s 当作栈</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; s[i]; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[c] == <span class=\"number\">0</span>) &#123;                           <span class=\"comment\">// c 是左括号</span></span><br><span class=\"line\">            s[top++] = c;                           <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (top == <span class=\"number\">0</span> || s[--top] != mp[c]) &#123; <span class=\"comment\">// c 是右括号</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 没有左括号，或者左括号类型不对</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top == <span class=\"number\">0</span>; <span class=\"comment\">// 所有左括号必须匹配完毕</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/3sum/\">15. 三数之和</a></p>\n<p>能猜到双指针我就很知足了，<br><img src=\"https://img.undf.top/ob/65a55d76840ace1e05854d2e63fcec5a.png\" alt=\"image\"></p>\n<p><a href=\"https://leetcode.cn/problems/rotate-image/\">48. 旋转图像</a></p>\n<p>难点在原地</p>\n<p>看答案，找规律，转置+翻转，完成</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>** matrix, <span class=\"type\">int</span> matrixSize, <span class=\"type\">int</span>* matrixColSize)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixSize; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; matrixSize; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            temp = matrix[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[i][j] = matrix[j][i];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[j][i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 翻转</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixSize; i++) &#123; <span class=\"comment\">// 行</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; matrixSize/<span class=\"number\">2</span>; j++) &#123; <span class=\"comment\">//列</span></span><br><span class=\"line\"></span><br><span class=\"line\">            temp = matrix[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[i][j] = matrix[i][matrixSize-j<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[i][matrixSize-j<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://leetcode.cn/problems/product-of-array-except-self/\">238. 除自身以外数组的乘积</a>（做出了，但耗时，再做）</p>\n<p><a href=\"https://leetcode.cn/problems/insert-delete-getrandom-o1/\">380. O(1) 时间插入、删除和获取随机元素</a>（再看看吧）<br><a href=\"https://leetcode.cn/problems/jump-game-ii/\">45. 跳跃游戏 II</a>（再做）</p>\n<p><a href=\"https://leetcode.cn/problems/jump-game/\">55. 跳跃游戏</a>（想耍小聪明降低运算时间，但是各种漏洞）</p>\n<h2 id=\"121-买卖股票的最佳时机（做了，耗时，脑子不够灵活再做）\"><a href=\"#121-买卖股票的最佳时机（做了，耗时，脑子不够灵活再做）\" class=\"headerlink\" title=\"121. 买卖股票的最佳时机（做了，耗时，脑子不够灵活再做）\"></a><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/\">121. 买卖股票的最佳时机</a>（做了，耗时，脑子不够灵活再做）</h2><p><a href=\"https://leetcode.cn/problems/rotate-array/\">189. 轮转数组</a> (做出来了，比我预期的好得多)</p>\n<h2 id=\"169-多数元素-做了，但耗时再做\"><a href=\"#169-多数元素-做了，但耗时再做\" class=\"headerlink\" title=\"169. 多数元素 (做了，但耗时再做)\"></a><a href=\"https://leetcode.cn/problems/majority-element/\">169. 多数元素</a> (做了，但耗时再做)</h2><h2 id=\"80-删除有序数组中的重复项-II\"><a href=\"#80-删除有序数组中的重复项-II\" class=\"headerlink\" title=\"80. 删除有序数组中的重复项 II\"></a><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/\">80. 删除有序数组中的重复项 II</a></h2><p>给你一个有序数组 <code>nums</code> ，请你 <strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong> 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a> 修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (numsSize &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> numsSize;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> slow = <span class=\"number\">2</span>, fast = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (fast &lt; numsSize) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums[slow - <span class=\"number\">2</span>] != nums[fast]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">nums[slow] = nums[fast];</span><br><span class=\"line\"></span><br><span class=\"line\">++slow;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">++fast;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> slow;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-删除有序数组中的重复项\"><a href=\"#26-删除有序数组中的重复项\" class=\"headerlink\" title=\"26. 删除有序数组中的重复项\"></a><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/\">26. 删除有序数组中的重复项</a></h2><p>　双指针问题做的越来越舒服了<br>　还不错，很快做完了；</p>\n<h2 id=\"27-移除元素-work-1-5\"><a href=\"#27-移除元素-work-1-5\" class=\"headerlink\" title=\"27. 移除元素 (work 1.5)\"></a><a href=\"https://leetcode.cn/problems/remove-element/\">27. 移除元素</a> (work 1.5)</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a> 修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 <code>2</code>, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,3,0,4]<br>解释：函数应该返回新的长度 <code>5</code>, 并且 nums 中的前五个元素为 <code>0</code>, <code>1</code>, <code>3</code>, <code>0</code>, <code>4</code>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n<h2 id=\"88-合并两个有序数组-work-1\"><a href=\"#88-合并两个有序数组-work-1\" class=\"headerlink\" title=\"88. 合并两个有序数组 (work 1)\"></a><a href=\"https://leetcode.cn/problems/merge-sorted-array/\">88. 合并两个有序数组</a> (work 1)</h2><p>给你两个按 非递减顺序 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>\n<p>请你 合并 <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 非递减顺序 排列。</p>\n<p>注意：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p>\n<p>示例 1：</p>\n<p>输入：nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3, nums2 &#x3D; [2,5,6], n &#x3D; 3<br>输出：[1,2,2,3,5,6]<br>解释：需要合并 [1,2,3] 和 [2,5,6] 。<br>合并结果是 [<em>1</em>,<em>2</em>,2,<em>3</em>,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</p>\n<p>示例 2：</p>\n<p>输入：nums1 &#x3D; [1], m &#x3D; 1, nums2 &#x3D; [], n &#x3D; 0<br>输出：[1]<br>解释：需要合并 [1] 和 [] 。<br>合并结果是 [1] 。</p>\n<p>示例 3：</p>\n<p>输入：nums1 &#x3D; [0], m &#x3D; 0, nums2 &#x3D; [1], n &#x3D; 1<br>输出：[1]<br>解释：需要合并的数组是 [] 和 [1] 。<br>合并结果是 [1] 。<br>注意，因为 m &#x3D; 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</p>\n<p><img src=\"https://img.undf.top/ob/12066b68d442b8cec9ec2fd2bb92d2b4.gif\" alt=\"image\"></p>\n<h2 id=\"53-最大子数组和\"><a href=\"#53-最大子数组和\" class=\"headerlink\" title=\"53. 最大子数组和\"></a><a href=\"https://leetcode.cn/problems/maximum-subarray/\">53. 最大子数组和</a></h2><blockquote>\n<p><a href=\"https://leetcode.cn/u/acol-5/\">coolBoy</a> 我觉得这道题目的思想是： 走完这一生如果我和你在一起会变得更好，那我们就在一起，否则我就丢下你。我回顾我最光辉的时刻就是和不同人在一起，变得更好的最长连续时刻</p>\n</blockquote>\n<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]</p>\n<p>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [1]<br>输出：1</p>\n<p>示例 3：</p>\n<p>输入：nums &#x3D; [5,4,-1,7,8]<br>输出：23</p>\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n</ul>\n<p>进阶：如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<h2 id=\"15-三数之和\"><a href=\"#15-三数之和\" class=\"headerlink\" title=\"15. 三数之和\"></a>15. 三数之和</h2><p>复制粘贴</p>\n<h2 id=\"25-K-个一组翻转链表\"><a href=\"#25-K-个一组翻转链表\" class=\"headerlink\" title=\"25. K 个一组翻转链表\"></a>25. K 个一组翻转链表</h2><p>复制粘贴</p>\n<h2 id=\"215-数组中的第K个最大元素\"><a href=\"#215-数组中的第K个最大元素\" class=\"headerlink\" title=\"215. 数组中的第K个最大元素\"></a>215. 数组中的第K个最大元素</h2><p>复制粘贴</p>\n<h2 id=\"LRU-缓存机制\"><a href=\"#LRU-缓存机制\" class=\"headerlink\" title=\"LRU 缓存机制\"></a>LRU 缓存机制</h2><h3 id=\"提交记录\"><a href=\"#提交记录\" class=\"headerlink\" title=\"提交记录\"></a>提交记录</h3><p>是先去b站看了解析视频然后自己写的，很多cpp的内容还是不熟悉，要继续。</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>日期</th>\n<th>语言</th>\n<th>时间</th>\n<th>空间</th>\n<th>优化</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.7 MB</td>\n<td>官方题解</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.4 MB</td>\n<td>ai 优化</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>476 ms</td>\n<td>170.7 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>488 ms</td>\n<td>170.8 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"自己的最终代码\"><a href=\"#自己的最终代码\" class=\"headerlink\" title=\"自己的最终代码\"></a>自己的最终代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) &#123;</span><br><span class=\"line\">        __cap = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//key = 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = hashmap [key]-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> (kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> kv.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"comment\">// 满了吗？</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__cap == hashmap.<span class=\"built_in\">size</span> ())&#123;</span><br><span class=\"line\">                hashmap.<span class=\"built_in\">erase</span> ( value_list.<span class=\"built_in\">back</span> ().key);</span><br><span class=\"line\">                value_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 找到了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除并添加到头</span></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> __cap;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">key_value</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\">        <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> key_value&amp; kv)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key == kv.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, list&lt;key_value&gt;::iterator&gt; hashmap;</span><br><span class=\"line\">    list&lt;key_value&gt; value_list;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ai优化\"><a href=\"#ai优化\" class=\"headerlink\" title=\"ai优化\"></a>ai优化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) : <span class=\"built_in\">capacity</span> (capacity) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将键值对移到链表头部表示最近使用</span></span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache_map [key]-&gt;second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">size</span> () &gt;= capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 缓存已满，删除最久未使用的项目</span></span><br><span class=\"line\">                <span class=\"type\">int</span> lru_key = lru_list.<span class=\"built_in\">back</span> ().first;</span><br><span class=\"line\">                cache_map.<span class=\"built_in\">erase</span> (lru_key);</span><br><span class=\"line\">                lru_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加新项目到链表头部</span></span><br><span class=\"line\">            lru_list.<span class=\"built_in\">push_front</span> (std::<span class=\"built_in\">make_pair</span> (key, value));</span><br><span class=\"line\">            cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 更新已存在的键值对的值，然后移到链表头部表示最近使用</span></span><br><span class=\"line\">            cache_map [key]-&gt;second = value;</span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">    std::unordered_map&lt;<span class=\"type\">int</span>, std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;::iterator&gt; cache_map;</span><br><span class=\"line\">    std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; lru_list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将键值对移到链表头部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveToFront</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = cache_map [key];</span><br><span class=\"line\">        lru_list.<span class=\"built_in\">splice</span> (lru_list.<span class=\"built_in\">begin</span> (), lru_list, it);</span><br><span class=\"line\">        cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><p>看了下提交记录，应该是复制粘贴，主要是cpp不熟，改天重写一遍</p>\n<p>这里就记录一下官方答案吧</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/</span><br><span class=\"line\"> * Definition <span class=\"keyword\">for</span> singly-linked list.</span><br><span class=\"line\"> * <span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\"> *     <span class=\"type\">int</span> val;</span><br><span class=\"line\"> *     ListNode *next;</span><br><span class=\"line\"> *     <span class=\"built_in\">ListNode</span>() : <span class=\"built_in\">val</span>(<span class=\"number\">0</span>), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"> *     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"> *     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> x, ListNode *next) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">next</span>(next) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* ret = <span class=\"built_in\">reverseList</span>(head-&gt;next);</span><br><span class=\"line\">        head-&gt;next-&gt;next = head;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"3-无重复字符的最长子串\"><a href=\"#3-无重复字符的最长子串\" class=\"headerlink\" title=\"3 无重复字符的最长子串\"></a>3 无重复字符的最长子串</h2><p>独立编写</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string temp;</span><br><span class=\"line\">    <span class=\"type\">int</span> ftemp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = s.<span class=\"built_in\">length</span>(); i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) &gt; temp.<span class=\"built_in\">length</span>()) <span class=\"comment\">// 无重复  temp.find(s[s.length() - i]) == -1 但会很大 所以</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无重复</span></span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有重复</span></span><br><span class=\"line\">            i += (temp.<span class=\"built_in\">length</span>() - temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ftemp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用到的函数\"><a href=\"#使用到的函数\" class=\"headerlink\" title=\"使用到的函数\"></a>使用到的函数</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string::<span class=\"built_in\">find</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 返回c在string中的位置 无则返回string::npos</span></span><br><span class=\"line\">string::<span class=\"built_in\">length</span>() <span class=\"comment\">// 返回string的长度</span></span><br><span class=\"line\">string::<span class=\"built_in\">push_back</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 在string的末尾添加c</span></span><br><span class=\"line\">string::<span class=\"built_in\">clear</span>() <span class=\"comment\">// 清空string</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>刚开始看错了题</p>\n<p>做完去看评论 发现这个题的思路是滑动窗口 然鹅我不知道那是什么东东 只是大概理解字面意思</p>\n<blockquote>\n<p>这道题主要用到思路是：滑动窗口</p>\n</blockquote>\n<blockquote>\n<p>什么是滑动窗口？</p>\n</blockquote>\n<blockquote>\n<p>其实就是一个队列,比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p>\n</blockquote>\n<blockquote>\n<p>如何移动？</p>\n</blockquote>\n<blockquote>\n<p>我们只要把队列的左边的元素移出就行了，直到满足题目要求！</p>\n</blockquote>\n<blockquote>\n<p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p>\n</blockquote>\n<blockquote>\n<p>时间复杂度：O(n)O(n)O(n)</p>\n</blockquote>\n<blockquote>\n<p>作者：powcai<br>链接：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/\">https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/</a></p>\n</blockquote>\n<blockquote>\n<p>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>c++ 很多特性还不会用 要继续学习</p>\n","more":"<blockquote>\n<p>大部分为抄答案，看解析，且跳过困难的题目，希望能学到点东西</p>\n</blockquote>\n<ol start=\"21\">\n<li>合并两个有序链表</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大佬递归确实强</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     struct ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根节点写的不太顺利，但做出来了</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">mergeTwoLists</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* list1, <span class=\"keyword\">struct</span> ListNode* list2)</span> &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">use</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">// struct ListNode root;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">root</span> =</span> (<span class=\"keyword\">struct</span> ListNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    <span class=\"comment\">// root = list2;</span></span><br><span class=\"line\">    <span class=\"comment\">// use = root-&gt;next;</span></span><br><span class=\"line\">    root-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    use = root;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (list1 || list2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!list1) &#123; <span class=\"comment\">// list1 null</span></span><br><span class=\"line\">            use-&gt;next = list2;</span><br><span class=\"line\">            list2 = list2-&gt;next;</span><br><span class=\"line\">            use = use-&gt;next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!list2) &#123; <span class=\"comment\">// list2 null</span></span><br><span class=\"line\">            use-&gt;next = list1;</span><br><span class=\"line\">            list1 = list1-&gt;next;</span><br><span class=\"line\">            use = use-&gt;next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// compare</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list1-&gt;val &lt; list2-&gt;val) &#123;</span><br><span class=\"line\">                use-&gt;next = list1;</span><br><span class=\"line\">                list1 = list1-&gt;next;</span><br><span class=\"line\">                use = use-&gt;next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                use-&gt;next = list2;</span><br><span class=\"line\">                list2 = list2-&gt;next;</span><br><span class=\"line\">                use = use-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root-&gt;next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title function_\">mergeTwoLists</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* list1, <span class=\"keyword\">struct</span> ListNode* list2)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1 == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list2 == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span>* <span class=\"title\">mergedList</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list1-&gt;val &lt;= list2-&gt;val) &#123;</span><br><span class=\"line\">        mergedList = list1;</span><br><span class=\"line\">        mergedList-&gt;next = mergeTwoLists(list1-&gt;next, list2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mergedList = list2;</span><br><span class=\"line\">        mergedList-&gt;next = mergeTwoLists(list1, list2-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergedList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">作者：tt<span class=\"number\">-1103</span></span><br><span class=\"line\">链接：https:<span class=\"comment\">//leetcode.cn/problems/merge-two-sorted-lists/solutions/2512813/he-bing-you-xu-lian-biao-by-tt-1103-74r9/</span></span><br><span class=\"line\">来源：力扣（LeetCode）</span><br><span class=\"line\">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>两数相加</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链表递归 https://leetcode.cn/problems/add-two-numbers/description/</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode *<span class=\"title function_\">helper</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *l1, <span class=\"keyword\">struct</span> ListNode *l2, <span class=\"type\">int</span> carry)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 == <span class=\"literal\">NULL</span> &amp;&amp; l2 == <span class=\"literal\">NULL</span> &amp;&amp; carry == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> sum = carry;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += l1-&gt;val;</span><br><span class=\"line\">        l1 = l1-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l2 != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += l2-&gt;val;</span><br><span class=\"line\">        l2 = l2-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListNode</span> *<span class=\"title\">l</span> =</span> <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</span><br><span class=\"line\">    l-&gt;val = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">    l-&gt;next = helper(l1, l2, sum / <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> ListNode *<span class=\"title function_\">addTwoNumbers</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *l1, <span class=\"keyword\">struct</span> ListNode *l2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(l1, l2, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://leetcode.cn/problems/valid-parentheses/\">20. 有效的括号</a><br>大佬的答案</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">char</span>* s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> mp[<span class=\"number\">128</span>] = &#123;&#125;;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;)&#x27;</span>] = <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;]&#x27;</span>] = <span class=\"string\">&#x27;[&#x27;</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;&#125;&#x27;</span>] = <span class=\"string\">&#x27;&#123;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> top = <span class=\"number\">0</span>; <span class=\"comment\">// 直接把 s 当作栈</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; s[i]; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c = s[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[c] == <span class=\"number\">0</span>) &#123;                           <span class=\"comment\">// c 是左括号</span></span><br><span class=\"line\">            s[top++] = c;                           <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (top == <span class=\"number\">0</span> || s[--top] != mp[c]) &#123; <span class=\"comment\">// c 是右括号</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 没有左括号，或者左括号类型不对</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top == <span class=\"number\">0</span>; <span class=\"comment\">// 所有左括号必须匹配完毕</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.cn/problems/3sum/\">15. 三数之和</a></p>\n<p>能猜到双指针我就很知足了，<br><img src=\"https://img.undf.top/ob/65a55d76840ace1e05854d2e63fcec5a.png\" alt=\"image\"></p>\n<p><a href=\"https://leetcode.cn/problems/rotate-image/\">48. 旋转图像</a></p>\n<p>难点在原地</p>\n<p>看答案，找规律，转置+翻转，完成</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>** matrix, <span class=\"type\">int</span> matrixSize, <span class=\"type\">int</span>* matrixColSize)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixSize; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; matrixSize; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            temp = matrix[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[i][j] = matrix[j][i];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[j][i] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 翻转</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; matrixSize; i++) &#123; <span class=\"comment\">// 行</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; matrixSize/<span class=\"number\">2</span>; j++) &#123; <span class=\"comment\">//列</span></span><br><span class=\"line\"></span><br><span class=\"line\">            temp = matrix[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[i][j] = matrix[i][matrixSize-j<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            matrix[i][matrixSize-j<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a href=\"https://leetcode.cn/problems/product-of-array-except-self/\">238. 除自身以外数组的乘积</a>（做出了，但耗时，再做）</p>\n<p><a href=\"https://leetcode.cn/problems/insert-delete-getrandom-o1/\">380. O(1) 时间插入、删除和获取随机元素</a>（再看看吧）<br><a href=\"https://leetcode.cn/problems/jump-game-ii/\">45. 跳跃游戏 II</a>（再做）</p>\n<p><a href=\"https://leetcode.cn/problems/jump-game/\">55. 跳跃游戏</a>（想耍小聪明降低运算时间，但是各种漏洞）</p>\n<h2 id=\"121-买卖股票的最佳时机（做了，耗时，脑子不够灵活再做）\"><a href=\"#121-买卖股票的最佳时机（做了，耗时，脑子不够灵活再做）\" class=\"headerlink\" title=\"121. 买卖股票的最佳时机（做了，耗时，脑子不够灵活再做）\"></a><a href=\"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/\">121. 买卖股票的最佳时机</a>（做了，耗时，脑子不够灵活再做）</h2><p><a href=\"https://leetcode.cn/problems/rotate-array/\">189. 轮转数组</a> (做出来了，比我预期的好得多)</p>\n<h2 id=\"169-多数元素-做了，但耗时再做\"><a href=\"#169-多数元素-做了，但耗时再做\" class=\"headerlink\" title=\"169. 多数元素 (做了，但耗时再做)\"></a><a href=\"https://leetcode.cn/problems/majority-element/\">169. 多数元素</a> (做了，但耗时再做)</h2><h2 id=\"80-删除有序数组中的重复项-II\"><a href=\"#80-删除有序数组中的重复项-II\" class=\"headerlink\" title=\"80. 删除有序数组中的重复项 II\"></a><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/\">80. 删除有序数组中的重复项 II</a></h2><p>给你一个有序数组 <code>nums</code> ，请你 <strong><a href=\"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a></strong> 删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong> ，返回删除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在 <strong><a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a> 修改输入数组</strong> 并在使用 O(1) 额外空间的条件下完成。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"type\">int</span>* nums, <span class=\"type\">int</span> numsSize)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (numsSize &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> numsSize;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> slow = <span class=\"number\">2</span>, fast = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (fast &lt; numsSize) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums[slow - <span class=\"number\">2</span>] != nums[fast]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">nums[slow] = nums[fast];</span><br><span class=\"line\"></span><br><span class=\"line\">++slow;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">++fast;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> slow;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-删除有序数组中的重复项\"><a href=\"#26-删除有序数组中的重复项\" class=\"headerlink\" title=\"26. 删除有序数组中的重复项\"></a><a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/\">26. 删除有序数组中的重复项</a></h2><p>　双指针问题做的越来越舒服了<br>　还不错，很快做完了；</p>\n<h2 id=\"27-移除元素-work-1-5\"><a href=\"#27-移除元素-work-1-5\" class=\"headerlink\" title=\"27. 移除元素 (work 1.5)\"></a><a href=\"https://leetcode.cn/problems/remove-element/\">27. 移除元素</a> (work 1.5)</h2><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <a href=\"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95\">原地</a> 修改输入数组。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,2,2,3], val &#x3D; 3<br>输出：2, nums &#x3D; [2,2]<br>解释：函数应该返回新的长度 <code>2</code>, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums &#x3D; [2,2,3,3] 或 nums &#x3D; [2,2,0,0]，也会被视作正确答案。</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2<br>输出：5, nums &#x3D; [0,1,3,0,4]<br>解释：函数应该返回新的长度 <code>5</code>, 并且 nums 中的前五个元素为 <code>0</code>, <code>1</code>, <code>3</code>, <code>0</code>, <code>4</code>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p>\n<h2 id=\"88-合并两个有序数组-work-1\"><a href=\"#88-合并两个有序数组-work-1\" class=\"headerlink\" title=\"88. 合并两个有序数组 (work 1)\"></a><a href=\"https://leetcode.cn/problems/merge-sorted-array/\">88. 合并两个有序数组</a> (work 1)</h2><p>给你两个按 非递减顺序 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>\n<p>请你 合并 <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 非递减顺序 排列。</p>\n<p>注意：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p>\n<p>示例 1：</p>\n<p>输入：nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3, nums2 &#x3D; [2,5,6], n &#x3D; 3<br>输出：[1,2,2,3,5,6]<br>解释：需要合并 [1,2,3] 和 [2,5,6] 。<br>合并结果是 [<em>1</em>,<em>2</em>,2,<em>3</em>,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</p>\n<p>示例 2：</p>\n<p>输入：nums1 &#x3D; [1], m &#x3D; 1, nums2 &#x3D; [], n &#x3D; 0<br>输出：[1]<br>解释：需要合并 [1] 和 [] 。<br>合并结果是 [1] 。</p>\n<p>示例 3：</p>\n<p>输入：nums1 &#x3D; [0], m &#x3D; 0, nums2 &#x3D; [1], n &#x3D; 1<br>输出：[1]<br>解释：需要合并的数组是 [] 和 [1] 。<br>合并结果是 [1] 。<br>注意，因为 m &#x3D; 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</p>\n<p><img src=\"https://img.undf.top/ob/12066b68d442b8cec9ec2fd2bb92d2b4.gif\" alt=\"image\"></p>\n<h2 id=\"53-最大子数组和\"><a href=\"#53-最大子数组和\" class=\"headerlink\" title=\"53. 最大子数组和\"></a><a href=\"https://leetcode.cn/problems/maximum-subarray/\">53. 最大子数组和</a></h2><blockquote>\n<p><a href=\"https://leetcode.cn/u/acol-5/\">coolBoy</a> 我觉得这道题目的思想是： 走完这一生如果我和你在一起会变得更好，那我们就在一起，否则我就丢下你。我回顾我最光辉的时刻就是和不同人在一起，变得更好的最长连续时刻</p>\n</blockquote>\n<p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<p>子数组 是数组中的一个连续部分。</p>\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]</p>\n<p>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</p>\n<p>示例 2：</p>\n<p>输入：nums &#x3D; [1]<br>输出：1</p>\n<p>示例 3：</p>\n<p>输入：nums &#x3D; [5,4,-1,7,8]<br>输出：23</p>\n<p>提示：</p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 105</code></li>\n<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>\n</ul>\n<p>进阶：如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 分治法 求解。</p>\n<h2 id=\"15-三数之和\"><a href=\"#15-三数之和\" class=\"headerlink\" title=\"15. 三数之和\"></a>15. 三数之和</h2><p>复制粘贴</p>\n<h2 id=\"25-K-个一组翻转链表\"><a href=\"#25-K-个一组翻转链表\" class=\"headerlink\" title=\"25. K 个一组翻转链表\"></a>25. K 个一组翻转链表</h2><p>复制粘贴</p>\n<h2 id=\"215-数组中的第K个最大元素\"><a href=\"#215-数组中的第K个最大元素\" class=\"headerlink\" title=\"215. 数组中的第K个最大元素\"></a>215. 数组中的第K个最大元素</h2><p>复制粘贴</p>\n<h2 id=\"LRU-缓存机制\"><a href=\"#LRU-缓存机制\" class=\"headerlink\" title=\"LRU 缓存机制\"></a>LRU 缓存机制</h2><h3 id=\"提交记录\"><a href=\"#提交记录\" class=\"headerlink\" title=\"提交记录\"></a>提交记录</h3><p>是先去b站看了解析视频然后自己写的，很多cpp的内容还是不熟悉，要继续。</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>日期</th>\n<th>语言</th>\n<th>时间</th>\n<th>空间</th>\n<th>优化</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.7 MB</td>\n<td>官方题解</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.4 MB</td>\n<td>ai 优化</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>476 ms</td>\n<td>170.7 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>488 ms</td>\n<td>170.8 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"自己的最终代码\"><a href=\"#自己的最终代码\" class=\"headerlink\" title=\"自己的最终代码\"></a>自己的最终代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) &#123;</span><br><span class=\"line\">        __cap = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//key = 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = hashmap [key]-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> (kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> kv.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"comment\">// 满了吗？</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__cap == hashmap.<span class=\"built_in\">size</span> ())&#123;</span><br><span class=\"line\">                hashmap.<span class=\"built_in\">erase</span> ( value_list.<span class=\"built_in\">back</span> ().key);</span><br><span class=\"line\">                value_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 找到了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除并添加到头</span></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> __cap;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">key_value</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\">        <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> key_value&amp; kv)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key == kv.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, list&lt;key_value&gt;::iterator&gt; hashmap;</span><br><span class=\"line\">    list&lt;key_value&gt; value_list;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ai优化\"><a href=\"#ai优化\" class=\"headerlink\" title=\"ai优化\"></a>ai优化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) : <span class=\"built_in\">capacity</span> (capacity) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将键值对移到链表头部表示最近使用</span></span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache_map [key]-&gt;second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">size</span> () &gt;= capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 缓存已满，删除最久未使用的项目</span></span><br><span class=\"line\">                <span class=\"type\">int</span> lru_key = lru_list.<span class=\"built_in\">back</span> ().first;</span><br><span class=\"line\">                cache_map.<span class=\"built_in\">erase</span> (lru_key);</span><br><span class=\"line\">                lru_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加新项目到链表头部</span></span><br><span class=\"line\">            lru_list.<span class=\"built_in\">push_front</span> (std::<span class=\"built_in\">make_pair</span> (key, value));</span><br><span class=\"line\">            cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 更新已存在的键值对的值，然后移到链表头部表示最近使用</span></span><br><span class=\"line\">            cache_map [key]-&gt;second = value;</span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">    std::unordered_map&lt;<span class=\"type\">int</span>, std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;::iterator&gt; cache_map;</span><br><span class=\"line\">    std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; lru_list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将键值对移到链表头部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveToFront</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = cache_map [key];</span><br><span class=\"line\">        lru_list.<span class=\"built_in\">splice</span> (lru_list.<span class=\"built_in\">begin</span> (), lru_list, it);</span><br><span class=\"line\">        cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><p>看了下提交记录，应该是复制粘贴，主要是cpp不熟，改天重写一遍</p>\n<p>这里就记录一下官方答案吧</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/</span><br><span class=\"line\"> * Definition <span class=\"keyword\">for</span> singly-linked list.</span><br><span class=\"line\"> * <span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span> &#123;</span><br><span class=\"line\"> *     <span class=\"type\">int</span> val;</span><br><span class=\"line\"> *     ListNode *next;</span><br><span class=\"line\"> *     <span class=\"built_in\">ListNode</span>() : <span class=\"built_in\">val</span>(<span class=\"number\">0</span>), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"> *     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> x) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>) &#123;&#125;</span><br><span class=\"line\"> *     <span class=\"built_in\">ListNode</span>(<span class=\"type\">int</span> x, ListNode *next) : <span class=\"built_in\">val</span>(x), <span class=\"built_in\">next</span>(next) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* ret = <span class=\"built_in\">reverseList</span>(head-&gt;next);</span><br><span class=\"line\">        head-&gt;next-&gt;next = head;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"3-无重复字符的最长子串\"><a href=\"#3-无重复字符的最长子串\" class=\"headerlink\" title=\"3 无重复字符的最长子串\"></a>3 无重复字符的最长子串</h2><p>独立编写</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string temp;</span><br><span class=\"line\">    <span class=\"type\">int</span> ftemp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = s.<span class=\"built_in\">length</span>(); i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) &gt; temp.<span class=\"built_in\">length</span>()) <span class=\"comment\">// 无重复  temp.find(s[s.length() - i]) == -1 但会很大 所以</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无重复</span></span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有重复</span></span><br><span class=\"line\">            i += (temp.<span class=\"built_in\">length</span>() - temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ftemp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用到的函数\"><a href=\"#使用到的函数\" class=\"headerlink\" title=\"使用到的函数\"></a>使用到的函数</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string::<span class=\"built_in\">find</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 返回c在string中的位置 无则返回string::npos</span></span><br><span class=\"line\">string::<span class=\"built_in\">length</span>() <span class=\"comment\">// 返回string的长度</span></span><br><span class=\"line\">string::<span class=\"built_in\">push_back</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 在string的末尾添加c</span></span><br><span class=\"line\">string::<span class=\"built_in\">clear</span>() <span class=\"comment\">// 清空string</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>刚开始看错了题</p>\n<p>做完去看评论 发现这个题的思路是滑动窗口 然鹅我不知道那是什么东东 只是大概理解字面意思</p>\n<blockquote>\n<p>这道题主要用到思路是：滑动窗口</p>\n</blockquote>\n<blockquote>\n<p>什么是滑动窗口？</p>\n</blockquote>\n<blockquote>\n<p>其实就是一个队列,比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p>\n</blockquote>\n<blockquote>\n<p>如何移动？</p>\n</blockquote>\n<blockquote>\n<p>我们只要把队列的左边的元素移出就行了，直到满足题目要求！</p>\n</blockquote>\n<blockquote>\n<p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p>\n</blockquote>\n<blockquote>\n<p>时间复杂度：O(n)O(n)O(n)</p>\n</blockquote>\n<blockquote>\n<p>作者：powcai<br>链接：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/\">https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/</a></p>\n</blockquote>\n<blockquote>\n<p>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>c++ 很多特性还不会用 要继续学习</p>\n","categories":[{"name":"💻Code","path":"api/categories/💻Code.json"}],"tags":[{"name":"💻Code","path":"api/tags/💻Code.json"},{"name":"🙂Leetcode","path":"api/tags/🙂Leetcode.json"}]}