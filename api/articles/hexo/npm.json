{"title":"NPM 图床探究","slug":"hexo/npm","date":"2021-11-07T15:20:55.000Z","updated":"2022-02-06T04:33:19.470Z","comments":true,"path":"api/articles/hexo/npm.json","excerpt":null,"covers":null,"content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近在吾爱发帖，苦于福利区不能贴图，要用自己的图床，然后我用了又拍云，一个帖子，一天，3元。</p>\n<p>这个价格有点贵了hhh，所以想要找个稳定的图床，本来用jsd + GitHub 但是论坛屏蔽掉了 jsd 好像是因为会传播木马什么的，总之是不安全。</p>\n<p>而且写教程还是蛮辛苦的，不想因为图床挂了而不能看，所以想要一个稳定的免费的图床，所以就想到了npm</p>\n<p>经测试 NPM 不会被论坛审核，可以使用</p>\n<h2 id=\"NPM-图床创建及日常使用\"><a href=\"#NPM-图床创建及日常使用\" class=\"headerlink\" title=\"NPM 图床创建及日常使用\"></a>NPM 图床创建及日常使用</h2><p>这里给店长打个广告，我也是通过<a href=\"https://akilar.top/\">店长</a>和<a href=\"https://cyfan.top/\">cyfan</a>才了解到npm图床的</p>\n<p><a href=\"https://akilar.top/posts/3e956346/\">npm图床的使用</a></p>\n<h2 id=\"NPM-图床的自动化\"><a href=\"#NPM-图床的自动化\" class=\"headerlink\" title=\"NPM 图床的自动化\"></a>NPM 图床的自动化</h2><p>流程如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">graph TD;</span><br><span class=\"line\">    Picgo上传多张图片到GitHub --&gt; Windows自动更新npm包版本;</span><br><span class=\"line\">    Windows自动更新npm包版本--&gt;自动查找替换链接;</span><br><span class=\"line\">    Windows自动更新npm包版本--&gt; GithubAction自动发包;</span><br><span class=\"line\">    GithubAction自动发包 --&gt; 图床更新完成;</span><br><span class=\"line\">    自动查找替换链接--&gt;push博客仓库;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Picgo上传图片到GitHub\"><a href=\"#Picgo上传图片到GitHub\" class=\"headerlink\" title=\"Picgo上传图片到GitHub\"></a>Picgo上传图片到GitHub</h3><p>这一步的目的是方便预览，而且为后面查找替换打个基础</p>\n<p>而且这一步会遇到GitHubaction 报错 这不重要 关掉通知 直接无视</p>\n<h3 id=\"GitHub-Action-自动推送到npm\"><a href=\"#GitHub-Action-自动推送到npm\" class=\"headerlink\" title=\"GitHub Action 自动推送到npm\"></a>GitHub Action 自动推送到npm</h3><p>这个教程里面有写，不再赘述<a href=\"https://akilar.top/posts/3e956346/\">npm图床的使用</a></p>\n<p>至于为什么使用action发包是因为图床很大，发包很慢</p>\n<h3 id=\"Windows-自动发包\"><a href=\"#Windows-自动发包\" class=\"headerlink\" title=\"Windows 自动发包\"></a>Windows 自动发包</h3><p>利用shell脚本，这个脚本放到图床仓库根目录运行即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">git add .    </span><br><span class=\"line\">git commit  -m &#x27; ty &#x27;</span><br><span class=\"line\">npm version patch </span><br><span class=\"line\">git push </span><br></pre></td></tr></table></figure>\n\n<p>内容其实很简单，就是简单的git命令</p>\n<h3 id=\"批量查找替换\"><a href=\"#批量查找替换\" class=\"headerlink\" title=\"批量查找替换\"></a>批量查找替换</h3><p>~~~求人不如求己，cyfan没看见就自己写，百度了一下 <code>sed</code> 命令 挺好的~~~<br>这里是利用shell脚本的查找替换功能比如将<code>3.txt</code>中的 <code>unpkg.zhimg.com/wxydeimage@1.0.43</code> 替换成 <code>unpkg.zhimg.com/wxydeimage@1.0.23</code> 其中有转义符号</p>\n<p><code>sed -i &#39;s/cdn.jsdelivr.net\\/gh\\/wxydejoy\\/image/unpkg.zhimg.com\\/wxydeimage@1.0.23/g&#39; 3.txt </code></p>\n<p>加上文件遍历，就变成了这个样子。这个脚本放在博客根目录即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">folder=<span class=\"string\">&quot;./test&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">function readfile ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这里`为esc下面的按键符号</span></span><br><span class=\"line\">  for file in `ls $1`</span><br><span class=\"line\">  do</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这里的-d表示是一个directory，即目录/子文件夹</span></span><br><span class=\"line\">    if [ -d $1&quot;/&quot;$file ]</span><br><span class=\"line\">    then</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果子文件夹则递归</span></span><br><span class=\"line\">      readfile $1&quot;/&quot;$file</span><br><span class=\"line\">    else</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">否则就能够读取该文件的地址</span></span><br><span class=\"line\">      echo $1&quot;/&quot;$file</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">读取该文件的文件名，basename是提取文件名的关键字</span></span><br><span class=\"line\">   sed -i &#x27;s/cdn.jsdelivr.net\\/gh\\/wxydejoy\\/image/unpkg.zhimg.com\\/wxydeimage@1.0.23/g&#x27; $folder/$file</span><br><span class=\"line\">   fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">函数定义结束，这里用来运行函数</span></span><br><span class=\"line\">folder=&quot;./source/_post&quot;</span><br><span class=\"line\">readfile $folder                 </span><br></pre></td></tr></table></figure>\n\n<p>其中<code>wxydejoy image</code>是GitHub用户名和仓库<code>wxydeimage</code>是<code>npm</code>包名，<code>1.0.23</code> 是版本号</p>\n<p>写着写着电脑黑屏了，吓死，幸亏是vscode自动保存了，有惊无险</p>\n<h2 id=\"完全自动化\"><a href=\"#完全自动化\" class=\"headerlink\" title=\"完全自动化\"></a>完全自动化</h2><p>我的目标是只要在提交之前运行一次脚本，无需手动修改版本号</p>\n<p>&#x3D;&#x3D;敬请期待&#x3D;&#x3D;</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>今天看到npm的图床是想换来着，但是跑了一下速度，还是又拍云香，npm就用来论坛发帖吧，不过这个方案比较适合没有又拍云的同学。�</p>\n","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近在吾爱发帖，苦于福利区不能贴图，要用自己的图床，然后我用了又拍云，一个帖子，一天，3元。</p>\n<p>这个价格有点贵了hhh，所以想要找个稳定的图床，本来用jsd + GitHub 但是论坛屏蔽掉了 jsd 好像是因为会传播木马什么的，总之是不安全。</p>\n<p>而且写教程还是蛮辛苦的，不想因为图床挂了而不能看，所以想要一个稳定的免费的图床，所以就想到了npm</p>\n<p>经测试 NPM 不会被论坛审核，可以使用</p>\n<h2 id=\"NPM-图床创建及日常使用\"><a href=\"#NPM-图床创建及日常使用\" class=\"headerlink\" title=\"NPM 图床创建及日常使用\"></a>NPM 图床创建及日常使用</h2><p>这里给店长打个广告，我也是通过<a href=\"https://akilar.top/\">店长</a>和<a href=\"https://cyfan.top/\">cyfan</a>才了解到npm图床的</p>\n<p><a href=\"https://akilar.top/posts/3e956346/\">npm图床的使用</a></p>\n<h2 id=\"NPM-图床的自动化\"><a href=\"#NPM-图床的自动化\" class=\"headerlink\" title=\"NPM 图床的自动化\"></a>NPM 图床的自动化</h2><p>流程如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">graph TD;</span><br><span class=\"line\">    Picgo上传多张图片到GitHub --&gt; Windows自动更新npm包版本;</span><br><span class=\"line\">    Windows自动更新npm包版本--&gt;自动查找替换链接;</span><br><span class=\"line\">    Windows自动更新npm包版本--&gt; GithubAction自动发包;</span><br><span class=\"line\">    GithubAction自动发包 --&gt; 图床更新完成;</span><br><span class=\"line\">    自动查找替换链接--&gt;push博客仓库;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Picgo上传图片到GitHub\"><a href=\"#Picgo上传图片到GitHub\" class=\"headerlink\" title=\"Picgo上传图片到GitHub\"></a>Picgo上传图片到GitHub</h3><p>这一步的目的是方便预览，而且为后面查找替换打个基础</p>\n<p>而且这一步会遇到GitHubaction 报错 这不重要 关掉通知 直接无视</p>\n<h3 id=\"GitHub-Action-自动推送到npm\"><a href=\"#GitHub-Action-自动推送到npm\" class=\"headerlink\" title=\"GitHub Action 自动推送到npm\"></a>GitHub Action 自动推送到npm</h3><p>这个教程里面有写，不再赘述<a href=\"https://akilar.top/posts/3e956346/\">npm图床的使用</a></p>\n<p>至于为什么使用action发包是因为图床很大，发包很慢</p>\n<h3 id=\"Windows-自动发包\"><a href=\"#Windows-自动发包\" class=\"headerlink\" title=\"Windows 自动发包\"></a>Windows 自动发包</h3><p>利用shell脚本，这个脚本放到图床仓库根目录运行即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">git add .    </span><br><span class=\"line\">git commit  -m &#x27; ty &#x27;</span><br><span class=\"line\">npm version patch </span><br><span class=\"line\">git push </span><br></pre></td></tr></table></figure>\n\n<p>内容其实很简单，就是简单的git命令</p>\n<h3 id=\"批量查找替换\"><a href=\"#批量查找替换\" class=\"headerlink\" title=\"批量查找替换\"></a>批量查找替换</h3><p>~~~求人不如求己，cyfan没看见就自己写，百度了一下 <code>sed</code> 命令 挺好的~~~<br>这里是利用shell脚本的查找替换功能比如将<code>3.txt</code>中的 <code>unpkg.zhimg.com/wxydeimage@1.0.43</code> 替换成 <code>unpkg.zhimg.com/wxydeimage@1.0.23</code> 其中有转义符号</p>\n<p><code>sed -i &#39;s/cdn.jsdelivr.net\\/gh\\/wxydejoy\\/image/unpkg.zhimg.com\\/wxydeimage@1.0.23/g&#39; 3.txt </code></p>\n<p>加上文件遍历，就变成了这个样子。这个脚本放在博客根目录即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">folder=<span class=\"string\">&quot;./test&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">function readfile ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这里`为esc下面的按键符号</span></span><br><span class=\"line\">  for file in `ls $1`</span><br><span class=\"line\">  do</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这里的-d表示是一个directory，即目录/子文件夹</span></span><br><span class=\"line\">    if [ -d $1&quot;/&quot;$file ]</span><br><span class=\"line\">    then</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果子文件夹则递归</span></span><br><span class=\"line\">      readfile $1&quot;/&quot;$file</span><br><span class=\"line\">    else</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">否则就能够读取该文件的地址</span></span><br><span class=\"line\">      echo $1&quot;/&quot;$file</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">读取该文件的文件名，basename是提取文件名的关键字</span></span><br><span class=\"line\">   sed -i &#x27;s/cdn.jsdelivr.net\\/gh\\/wxydejoy\\/image/unpkg.zhimg.com\\/wxydeimage@1.0.23/g&#x27; $folder/$file</span><br><span class=\"line\">   fi</span><br><span class=\"line\">  done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">函数定义结束，这里用来运行函数</span></span><br><span class=\"line\">folder=&quot;./source/_post&quot;</span><br><span class=\"line\">readfile $folder                 </span><br></pre></td></tr></table></figure>\n\n<p>其中<code>wxydejoy image</code>是GitHub用户名和仓库<code>wxydeimage</code>是<code>npm</code>包名，<code>1.0.23</code> 是版本号</p>\n<p>写着写着电脑黑屏了，吓死，幸亏是vscode自动保存了，有惊无险</p>\n<h2 id=\"完全自动化\"><a href=\"#完全自动化\" class=\"headerlink\" title=\"完全自动化\"></a>完全自动化</h2><p>我的目标是只要在提交之前运行一次脚本，无需手动修改版本号</p>\n<p>&#x3D;&#x3D;敬请期待&#x3D;&#x3D;</p>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2><p>今天看到npm的图床是想换来着，但是跑了一下速度，还是又拍云香，npm就用来论坛发帖吧，不过这个方案比较适合没有又拍云的同学。�</p>\n","categories":[{"name":"💻Code","path":"api/categories/💻Code.json"}],"tags":[{"name":"💻Hexo","path":"api/tags/💻Hexo.json"}]}