{"title":"三种常用表达式","slug":"code/正则表达式与corn表达式","date":"2022-01-03T01:24:04.000Z","updated":"2022-08-28T07:46:14.149Z","comments":true,"path":"api/articles/code/正则表达式与corn表达式.json","excerpt":null,"covers":["https://image.wxydejoy.top/image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ecorn%E8%A1%A8%E8%BE%BE%E5%BC%8F/2022-01-10-22-56-10.png!max","https://image.wxydejoy.top/image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ecorn%E8%A1%A8%E8%BE%BE%E5%BC%8F/2022-01-03-09-40-27.png"],"content":"<h2 id=\"Regex\"><a href=\"#Regex\" class=\"headerlink\" title=\"Regex\"></a>Regex</h2><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。</p>\n<p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>\n<p>正则表达式是繁琐的，但它是强大的，学会之后的应用会让你除了提高效率外，会给你带来绝对的成就感。只要认真阅读本教程，加上应用的时候进行一定的参考，掌握正则表达式不是问题。</p>\n<p>许多程序设计语言都支持利用正则表达式进行字符串操作。</p>\n<h2 id=\"保留匹配内容\"><a href=\"#保留匹配内容\" class=\"headerlink\" title=\"保留匹配内容\"></a>保留匹配内容</h2><p>为了保留某部分，通常情况下我们在正则表达式中使用()将我们要保留的内容括住。如下，我们要保留的是中间的数字部分，在替换时使用$1将括号的内容表达出来。$1可以认为是一个变量，代表着()中的内容。</p>\n<p><img src=\"https://image.wxydejoy.top/image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ecorn%E8%A1%A8%E8%BE%BE%E5%BC%8F/2022-01-10-22-56-10.png!max\" alt=\"2022-01-10-22-56-10\"></p>\n<h3 id=\"非打印字符\"><a href=\"#非打印字符\" class=\"headerlink\" title=\"非打印字符\"></a>非打印字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\cx</td>\n<td>匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n</tbody></table>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$</code></td>\n<td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 $。</td>\n</tr>\n<tr>\n<td><code>( )</code></td>\n<td>标记一个<code>子表达式</code>的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 . 。</td>\n</tr>\n<tr>\n<td><code>[</code></td>\n<td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>\n</tr>\n<tr>\n<td><code>\\</code></td>\n<td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\\n’ 匹配换行符。序列 ‘\\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>\n</tr>\n<tr>\n<td><code>&#123;</code></td>\n<td>标记限定符<code>表达式</code>的开始。要匹配 {，请使用 {。</td>\n</tr>\n<tr>\n<td>&#96;</td>\n<td>&#96;</td>\n</tr>\n</tbody></table>\n<h3 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p>\n<p>正则表达式的限定符有：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>*</code></td>\n<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td><code>&#123;n,&#125;</code></td>\n<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>\n</tr>\n<tr>\n<td><code>&#123;n,m&#125;</code></td>\n<td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td>以下正则表达式匹配一个正整数，[1-9]设置第一个数字不是 0，[0-9]* 表示任意多个数字：</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"定位符\"><a href=\"#定位符\" class=\"headerlink\" title=\"定位符\"></a>定位符</h3><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>\n<p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\\b 描述单词的前或后边界，\\B 表示非单词边界。</p>\n<p>正则表达式的定位符有：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>^</code></td>\n<td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配一个单词边界，即字与空格间的位置。</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>非单词边界匹配。</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://image.wxydejoy.top/image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ecorn%E8%A1%A8%E8%BE%BE%E5%BC%8F/2022-01-03-09-40-27.png\" alt=\"2022-01-03-09-40-27\"></p>\n<h2 id=\"Corn\"><a href=\"#Corn\" class=\"headerlink\" title=\"Corn\"></a>Corn</h2><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>允许值</th>\n<th>允许的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>秒（Seconds）</td>\n<td>0~59的整数</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>分（Minutes）</td>\n<td>0~59的整数</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>小时（Hours）</td>\n<td>0~23的整数</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>日期（DayofMonth）</td>\n<td>1~31的整数（但是你需要考虑你月的天数）</td>\n<td>,- * ? &#x2F; L W C</td>\n</tr>\n<tr>\n<td>月份（Month）</td>\n<td>1~12的整数或者 JAN-DEC</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>星期（DayofWeek）</td>\n<td>1~7的整数或者 SUN-SAT （1&#x3D;SUN）</td>\n<td>, - * ? &#x2F; L C #</td>\n</tr>\n<tr>\n<td>年(可选，留空)（Year）</td>\n<td>1970~2099</td>\n<td>, - * &#x2F;</td>\n</tr>\n</tbody></table>\n<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p>\n<ul>\n<li><p>（1）：表示匹配该域的任意值。假如在Minutes域使用, 即表示每分钟都会触发事件。</p>\n</li>\n<li><p>（2）?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20  ?, 其中最后一位只能用？，而不能使用，如果使用表示不管星期几都会触发，实际上并不是这样。</p>\n</li>\n<li><p>（3）-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p>\n</li>\n<li><p>（4）&#x2F;：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5&#x2F;20,则意味着5分钟触发一次，而25，45等分别触发一次. </p>\n</li>\n<li><p>（5）,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </p>\n</li>\n<li><p>（6）L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </p>\n</li>\n<li><p>（7）W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</p>\n</li>\n<li><p>（8）LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </p>\n</li>\n<li><p>（9）#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p>\n</li>\n</ul>\n<h2 id=\"Cidr\"><a href=\"#Cidr\" class=\"headerlink\" title=\"Cidr\"></a>Cidr</h2><table>\n<thead>\n<tr>\n<th>CIDR Block</th>\n<th>地址范围</th>\n<th>IP地址数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10.0.0.0&#x2F;8</td>\n<td>10.0.0.0 – 10.255.255.255</td>\n<td>16,777,216</td>\n</tr>\n<tr>\n<td>172.16.0.0&#x2F;12</td>\n<td>172.16.0.0 – 172.31.255.255</td>\n<td>1,048,576</td>\n</tr>\n<tr>\n<td>192.168.0.0&#x2F;16</td>\n<td>192.168.0.0 – 192.168.255.255</td>\n<td>65,536</td>\n</tr>\n</tbody></table>\n<p>比如腾讯云的防火墙就可以根据自己的ip设置</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\">菜鸟教程</a></p>\n<p><a href=\"https://www.cnblogs.com/yanghj010/p/10875151.html\">博客园</a></p>\n<p><a href=\"https://blog.csdn.net/cumo7370/article/details/107393927\">cidr</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","more":"<h2 id=\"Regex\"><a href=\"#Regex\" class=\"headerlink\" title=\"Regex\"></a>Regex</h2><p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。</p>\n<p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>\n<p>正则表达式是繁琐的，但它是强大的，学会之后的应用会让你除了提高效率外，会给你带来绝对的成就感。只要认真阅读本教程，加上应用的时候进行一定的参考，掌握正则表达式不是问题。</p>\n<p>许多程序设计语言都支持利用正则表达式进行字符串操作。</p>\n<h2 id=\"保留匹配内容\"><a href=\"#保留匹配内容\" class=\"headerlink\" title=\"保留匹配内容\"></a>保留匹配内容</h2><p>为了保留某部分，通常情况下我们在正则表达式中使用()将我们要保留的内容括住。如下，我们要保留的是中间的数字部分，在替换时使用$1将括号的内容表达出来。$1可以认为是一个变量，代表着()中的内容。</p>\n<p><img src=\"https://image.wxydejoy.top/image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ecorn%E8%A1%A8%E8%BE%BE%E5%BC%8F/2022-01-10-22-56-10.png!max\" alt=\"2022-01-10-22-56-10\"></p>\n<h3 id=\"非打印字符\"><a href=\"#非打印字符\" class=\"headerlink\" title=\"非打印字符\"></a>非打印字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\cx</td>\n<td>匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n</tbody></table>\n<h3 id=\"特殊字符\"><a href=\"#特殊字符\" class=\"headerlink\" title=\"特殊字符\"></a>特殊字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$</code></td>\n<td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\\n’ 或 ‘\\r’。要匹配 $ 字符本身，请使用 $。</td>\n</tr>\n<tr>\n<td><code>( )</code></td>\n<td>标记一个<code>子表达式</code>的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 . 。</td>\n</tr>\n<tr>\n<td><code>[</code></td>\n<td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>\n</tr>\n<tr>\n<td><code>\\</code></td>\n<td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\\n’ 匹配换行符。序列 ‘\\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>\n</tr>\n<tr>\n<td><code>&#123;</code></td>\n<td>标记限定符<code>表达式</code>的开始。要匹配 {，请使用 {。</td>\n</tr>\n<tr>\n<td>&#96;</td>\n<td>&#96;</td>\n</tr>\n</tbody></table>\n<h3 id=\"限定符\"><a href=\"#限定符\" class=\"headerlink\" title=\"限定符\"></a>限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p>\n<p>正则表达式的限定符有：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>*</code></td>\n<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td><code>&#123;n,&#125;</code></td>\n<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>\n</tr>\n<tr>\n<td><code>&#123;n,m&#125;</code></td>\n<td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td>以下正则表达式匹配一个正整数，[1-9]设置第一个数字不是 0，[0-9]* 表示任意多个数字：</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"定位符\"><a href=\"#定位符\" class=\"headerlink\" title=\"定位符\"></a>定位符</h3><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>\n<p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\\b 描述单词的前或后边界，\\B 表示非单词边界。</p>\n<p>正则表达式的定位符有：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>^</code></td>\n<td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>匹配一个单词边界，即字与空格间的位置。</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>非单词边界匹配。</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://image.wxydejoy.top/image/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8Ecorn%E8%A1%A8%E8%BE%BE%E5%BC%8F/2022-01-03-09-40-27.png\" alt=\"2022-01-03-09-40-27\"></p>\n<h2 id=\"Corn\"><a href=\"#Corn\" class=\"headerlink\" title=\"Corn\"></a>Corn</h2><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义：</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>允许值</th>\n<th>允许的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>秒（Seconds）</td>\n<td>0~59的整数</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>分（Minutes）</td>\n<td>0~59的整数</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>小时（Hours）</td>\n<td>0~23的整数</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>日期（DayofMonth）</td>\n<td>1~31的整数（但是你需要考虑你月的天数）</td>\n<td>,- * ? &#x2F; L W C</td>\n</tr>\n<tr>\n<td>月份（Month）</td>\n<td>1~12的整数或者 JAN-DEC</td>\n<td>, - * &#x2F;</td>\n</tr>\n<tr>\n<td>星期（DayofWeek）</td>\n<td>1~7的整数或者 SUN-SAT （1&#x3D;SUN）</td>\n<td>, - * ? &#x2F; L C #</td>\n</tr>\n<tr>\n<td>年(可选，留空)（Year）</td>\n<td>1970~2099</td>\n<td>, - * &#x2F;</td>\n</tr>\n</tbody></table>\n<p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</p>\n<ul>\n<li><p>（1）：表示匹配该域的任意值。假如在Minutes域使用, 即表示每分钟都会触发事件。</p>\n</li>\n<li><p>（2）?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20  ?, 其中最后一位只能用？，而不能使用，如果使用表示不管星期几都会触发，实际上并不是这样。</p>\n</li>\n<li><p>（3）-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </p>\n</li>\n<li><p>（4）&#x2F;：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5&#x2F;20,则意味着5分钟触发一次，而25，45等分别触发一次. </p>\n</li>\n<li><p>（5）,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </p>\n</li>\n<li><p>（6）L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </p>\n</li>\n<li><p>（7）W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</p>\n</li>\n<li><p>（8）LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </p>\n</li>\n<li><p>（9）#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</p>\n</li>\n</ul>\n<h2 id=\"Cidr\"><a href=\"#Cidr\" class=\"headerlink\" title=\"Cidr\"></a>Cidr</h2><table>\n<thead>\n<tr>\n<th>CIDR Block</th>\n<th>地址范围</th>\n<th>IP地址数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10.0.0.0&#x2F;8</td>\n<td>10.0.0.0 – 10.255.255.255</td>\n<td>16,777,216</td>\n</tr>\n<tr>\n<td>172.16.0.0&#x2F;12</td>\n<td>172.16.0.0 – 172.31.255.255</td>\n<td>1,048,576</td>\n</tr>\n<tr>\n<td>192.168.0.0&#x2F;16</td>\n<td>192.168.0.0 – 192.168.255.255</td>\n<td>65,536</td>\n</tr>\n</tbody></table>\n<p>比如腾讯云的防火墙就可以根据自己的ip设置</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\">菜鸟教程</a></p>\n<p><a href=\"https://www.cnblogs.com/yanghj010/p/10875151.html\">博客园</a></p>\n<p><a href=\"https://blog.csdn.net/cumo7370/article/details/107393927\">cidr</a></p>\n","categories":[],"tags":[{"name":"💻Regex","path":"api/tags/💻Regex.json"},{"name":"💻Corn","path":"api/tags/💻Corn.json"},{"name":"💻CIDR","path":"api/tags/💻CIDR.json"}]}