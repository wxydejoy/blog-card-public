{"title":"Python_study","slug":"code/Python_study","date":"2022-08-01T01:56:24.000Z","updated":"2022-08-08T06:27:52.312Z","comments":true,"path":"api/articles/code/Python_study.json","excerpt":null,"covers":null,"content":"<p>虽然之前学过不少 python 的知识，但是还是没有系统的学习过一些基础知识，补一下。<br>参考书 <a href=\"https://baike.baidu.com/item/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89/49977580?fr=aladdin\">Python 基础教程（第 3 版）_百度百科</a></p>\n<p>只记一下易错点和之前不会的点吧，个人向。</p>\n<h2 id=\"快速上手：基础知识\"><a href=\"#快速上手：基础知识\" class=\"headerlink\" title=\"快速上手：基础知识\"></a>快速上手：基础知识</h2><h3 id=\"数和表达式\"><a href=\"#数和表达式\" class=\"headerlink\" title=\"数和表达式\"></a>数和表达式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">10</span> % <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 整除</span></span><br><span class=\"line\"><span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 幂运算</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> // -<span class=\"number\">3</span></span><br><span class=\"line\">-<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>-<span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\">-<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>-<span class=\"number\">10</span> // -<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>对于整除运算，需要明白的一个重点是它向下圆整结果。因此在结果为负数的情况下，圆整后将离 0 更远。这意味着对于-10 &#x2F;&#x2F; 3， 将向下圆整到-4，而不是向上圆整到-3。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">3</span>     <span class=\"comment\"># pow(2, 3)</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>-<span class=\"number\">3</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">-<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(-<span class=\"number\">3</span>) ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意，乘方运算符的优先级比求负（单目减）高，因此<code>-3**2</code>等价于<code>-(3**2)</code>。如果你要计<br>算的是<code>(-3)**2</code>，必须明确指出。</p>\n<p>十六进制、八进制和二进制</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x10</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"number\">0o10</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"number\">0b10</span> <span class=\"comment\"># 二进制</span></span><br></pre></td></tr></table></figure>\n\n<p>这些表示法都以 0 打头。</p>\n<h3 id=\"获取用户输入\"><a href=\"#获取用户输入\" class=\"headerlink\" title=\"获取用户输入\"></a>获取用户输入</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">input</span>(<span class=\"string\">&quot;The meaning of life: &quot;</span>)</span><br><span class=\"line\">The meaning of life: <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"string\">&#x27;42&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里在交互式解释器中执行了第一行（input(…)），它打印字符串”The meaning of life:”，<br>提示用户输入相应的信息。我输入 42 并按回车。这个数被 input（以文本或字符串的方式）返回， 并在最后一行被自动打印出来。</p>\n<h3 id=\"cmath-和复数\"><a href=\"#cmath-和复数\" class=\"headerlink\" title=\"cmath 和复数\"></a>cmath 和复数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span> + <span class=\"number\">3j</span>) * (<span class=\"number\">9</span> + <span class=\"number\">4j</span>)</span><br><span class=\"line\">(-<span class=\"number\">3</span> + <span class=\"number\">31j</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保存并执行程序\"><a href=\"#保存并执行程序\" class=\"headerlink\" title=\"保存并执行程序\"></a>保存并执行程序</h3><p>在有些情况下，你希望能够像执行其他程序（如 Web 浏览器或文本编辑器）一样执行 Python 脚本，而无需显式地使用 Python 解释器。</p>\n<p>UNIX 提供了实现这种目标的标准方式：让脚本的第一 行以字符序列#!（称为 pound bang 或 shebang）开始，并在它后面指定用于对脚本进行解释的程序 （这里是 Python）的绝对路径。</p>\n<p>即便你对这一点不太明白，只需将下面的代码作为脚本的第一行， 就可在 UNIX 中轻松运行脚本：<br><code>#!/usr/bin/env python </code><br>不管 Python 库位于什么地方，这都将让你能够像运行普通程序一样运行脚本。<br>如果你安装了多个版本的 Python，可用更具体的可执行文件名（如 python3）替换 python。<br>要像普通程序一样运行脚本，还必须将其变成可执行的：<br><code>$ chmod a+x hello.py </code><br>现在，可以像下面这样来运行它（假定当前目录包含在执行路径中）：<br><code>$ hello.py </code><br>如果这不管用，请尝试使用<code>./hello.py</code>，这在当前目录（.）未包含在执行路径中时也管用（负责的系统管理员会告诉你执行路径是什么）。</p>\n<p>如果你愿意，可对文件进行重命名并删除扩展名<code>.py</code>，使其看起来更像普通程序。</p>\n<p>如果双击会如何呢 在 Windows 中，扩展名<code>.py</code>是让脚本像普通程序一样的关键所在。请尝试双击前一节保存的文件<code>hello.py</code>。如果正确地安装了<code>Python</code>，这将打开一个 DOS 窗口，其中包含提示信息 What is your name?。然而，这样运行程序存在一个问题：输入名字后，程序窗口将立即关闭，你根本来不及 看清结果。这是因为程序结束后窗口将立即关闭。尝试修改脚本，在末尾添加如下代码行： <code>input(&quot;Press &lt;enter&gt;&quot;)</code> 现在运行这个程序并输入名字后，DOS 窗口将包含如下内容：</p>\n<p><code>What is your name? Gumby Hello, Gumby! Press &lt;enter&gt;</code></p>\n<p>等你按回车键后，窗口将立即关闭，因为程序结束了。</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hello, world!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，有一点可能让你颇感意外：Python 在打印字符串时，用单引号将其括起，而 我们使用的是双引号。这有什么差别吗？其实没有任何差别。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Let&#x27;s go!&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Let&#x27;s go!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;&quot;Hello, world!&quot; she said&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;Hello, world!&quot; she said&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个字符串包含双引号，因此必须使用单引号将整个字符串括起，原因和前面一样。实际上，并非必须这样做（这样做只是出于方便考虑）。可使用反斜杠（\\）对引号进行转义，如 下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;Let\\&#x27;s go!&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Let&#x27;s go!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Python 打印所有的字符串时，都用引号将其括起。你可能通过前面的示例发现了这一点。</p>\n<p>因为 Python 打印值时，保留其在代码中的样子，而不是你希望用户看到的样子。但如果你使用 print，结果将不同。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello,\\nworld!&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hello,\\nworld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello,\\nworld!&quot;</span>)</span><br><span class=\"line\">Hello,</span><br><span class=\"line\">world!</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过两种不同的机制将值转换成了字符串。你可通过使用函数 str 和 repr① 直接使用这两种机制。使用 str 能以合理的方式将值转换为用户能够看懂的字符串。例如，尽可能将特殊字符编码 转换为相应的字符。然而，使用 repr 时，通常会获得值的合法 Python 表达式表示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(<span class=\"string\">&quot;Hello,\\nworld!&quot;</span>))</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello,\\nworld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(<span class=\"string\">&quot;Hello,\\nworld!&quot;</span>))</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>长字符串</li>\n</ol>\n<p>要表示很长的字符串（跨越多行的字符串），可使用三引号（而不是普通引号）。<br>print(‘’’This is a very long string. It continues here.<br>And it’s not over yet.<br>“Hello, world!” Still here.’’’)</p>\n<p>还可使用三个双引号，如”””like this”””。</p>\n<p>请注意，这让解释器能够识别表示字符串开始 和结束位置的引号，因此字符串本身可包含单引号和双引号，无需使用反斜杠进行转义</p>\n<p>三个引号也是注释的一种写法。</p>\n<ol start=\"2\">\n<li>原始字符串</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>path = <span class=\"string\">&#x27;C:\\nowhere&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>path</span><br><span class=\"line\"><span class=\"string\">&#x27;C:\\nowhere&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这好像没问题，但如果将其打印出来，就会出现问题。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(path)</span><br><span class=\"line\">C:</span><br><span class=\"line\">owhere</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原始字符串用前缀r表示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">r&#x27;C:\\nowhere&#x27;</span>)</span><br><span class=\"line\">C:\\nowhere</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#另外，原始字符串不能以单个反斜杠结尾。换而言之，原始字符串的最后一个字符不能是反斜杠，除非你对其进行转义（但进行转义时，用于转义的反斜杠也将是字符串的一部分）。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">r&#x27;C:\\Program Files\\foo\\bar&#x27;</span> <span class=\"string\">&#x27;\\\\&#x27;</span>)</span><br><span class=\"line\">C:\\Program Files\\foo\\bar\\</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Unicode、bytes 和 bytearray</li>\n</ol>\n<p>每个 Unicode 字符都用一个码点（code point）表示，而码点是 Unicode 标准给每个字符指定的数字。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>“\\u00C6”<br>‘Æ’<br>“\\U0001F60A”<br>‘☺ ‘<br>“This is a cat: \\N{Cat}”<br>‘This is a cat: ‘</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        篇幅较长 点击展开\n    </div>\n    <div class='spoiler-content'>\n        <p>Unicode 的理念很简单，却带来了一些挑战，其中之一是编码问题。在内存和磁盘中，所有对象都是以二进制数字（0 和 1）表示的（这些数字每 8 个为一组，即 1 字节），字符串也不例外。 在诸如 C 等编程语言中，这些字节完全暴露，而字符串不过是字节序列而已。为与 C 语言互操作 以及将文本写入文件或通过网络套接字发送出去，Python 提供了两种类似的类型：不可变的 bytes 和可变的 bytearray。如果需要，可直接创建 bytes 对象（而不是字符串），方法是使用前缀 b：</p>\n<p><code>&gt;&gt;&gt; b&#39;Hello, world!&#39; b&#39;Hello, world!&#39; </code></p>\n<p>然而，1 字节只能表示 256 个不同的值，离 Unicode 标准的要求差很远。Python bytes 字面量只支持 ASCII 标准中的 128 个字符，而余下的 128 个值必须用转义序列表示，如\\xf0 表示十六进制值 0xf0（即 240）。 唯一的差别好像在于可用的字母表规模，但实际上并非完全如此。乍一看，好像 ASCII 和 Unicode 定义的都是非负整数和字符之间的映射，但存在细微的差别：Unicode 码点是使用整数定义的，而 ASCII 字符是使用对应的数及其二进制编码定义的。</p>\n<p>这一点好像无关紧要，原因之一是 整数 0 ～ 255 和 8 位二进制数之间的映射是固定的，几乎没有任何机动空间。问题是超过 1 字节后， 情况就不那么简单了：直接将每个码点表示为相应的二进制数可能不再可行。这是因为不仅存在字节顺序的问题（即便对整数值进行编码，也会遇到这样的问题），而且还可能浪费空间：如果对于每个码点都使用相同数量的字节进行编码，就必须考虑到文本可能包含安那托利亚象形文字 或皇家亚兰字母。有一种 Unicode 编码标准是基于这种考虑的，它就是 UTF-32（32 位统一编码转换格式，Unicode Transformation Format 32 bits），但如果你主要处理的是使用互联网上常见语言书写的文本，那么使用这种编码标准将很浪费空间。</p>\n<p>然而，有一种非常巧妙的替代方式：不使用全部 32 位，而是使用变长编码，即对于不同的字符，使用不同数量的字节进行编码。这种编码方式主要出自计算机先锋 Kenneth Thompson 之手。 通过使用这种编码，可节省占用的空间，就像摩尔斯码使用较少的点和短线表示常见的字母，从 而减少工作量一样 ①。</p>\n<p>具体地说，进行单字节编码时，依然使用 ASCII 编码，以便与较旧的系统兼容；但对于不在这个范围内的字符，使用多个字节（最多为 6 个）进行编码。</p>\n<p>下面来使用 ASCII、 UTF-8 和 UTF-32 编码将字符串转换为 bytes。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;Hello, world!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span>.encode(<span class=\"string\">&quot;UTF-8&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;Hello, world!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span>.encode(<span class=\"string\">&quot;UTF-32&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xff\\xfe\\x00\\x00H\\x00\\x00\\x00e\\x00\\x00\\x00l\\x00\\x00\\x00l\\x00\\x00\\x00o\\x00\\x00\\x00,\\x00\\ x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00o\\x00\\x00\\x00r\\x00\\x00\\x00l\\x00\\x00\\x00d\\x00\\x00\\x00!\\x00\\ x00\\x00&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>从中可知，使用前两种编码的结果相同，但使用最后一种编码的结果长得多。再来看一个 示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">&quot;How long is this?&quot;</span>.encode(<span class=\"string\">&quot;UTF-8&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">&quot;How long is this?&quot;</span>.encode(<span class=\"string\">&quot;UTF-32&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">72</span></span><br></pre></td></tr></table></figure>\n\n<p>只要字符串包含较怪异的字符，ASCII 和 UTF-8 之间的差别便显现出来了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>) Traceback (most recent call last): ...</span><br><span class=\"line\"></span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">&#x27;ascii&#x27;</span> codec can<span class=\"string\">&#x27;t encode character &#x27;</span>\\xe6<span class=\"string\">&#x27; in position 1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>\n\n<p>斯堪的纳维亚字母没有对应的 ASCII 编码。如果必须使用 ASCII 编码（这样的情况肯定会遇到），可向 encode 提供另一个实参，告诉它如何处理错误。这个参数默认为 strict，但可将其指定为其他值，以忽略或替换不在 ASCII 表中的字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;Hll, wrld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;replace&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H?ll?, w?rld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;backslashreplace&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H\\\\xe6ll\\\\xe5, w\\\\xf8rld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;xmlcharrefreplace&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H&amp;#230;ll&amp;#229;, w&amp;#248;rld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>几乎在所有情况下，都最好使用 UTF-8。事实上，它也是默认使用的编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode()</span><br><span class=\"line\"><span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这相比于 Hello, world!，编码结果要长些；但使用 UTF-32 编码时，结果一样长。 可将字符串编码为 bytes，同样也可将 bytes 解码为字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span>.decode()</span><br><span class=\"line\"><span class=\"string\">&#x27;Hællå, wørld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>与前面一样，默认编码也是 UTF-8。你可指定其他编码，但如果指定的编码不正确，将出现错误消息或得到一堆乱码。bytes 对象本身并不知道使用的是哪种编码，因此你必须负责跟踪这 一点。可不使用方法 encode 和 decode，而直接创建 bytes 和 str（即字符串）对象，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bytes</span>(<span class=\"string\">&quot;Hællå, wørld!&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span>(<span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Hællå, wørld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这种方法更通用一些，在你不知道类似于字符串或 bytes 的对象属于哪个类时，使用这种方法也更管用。</p>\n<p>一个通用规则是，不要做过于严格的假设。 编码和解码的最重要用途之一是，将文本存储到磁盘文件中。然而，Python 提供的文件读写机制通常会替你完成这方面的工作！</p>\n<p>只要文件使用的是 UTF-8 编码，就无需操心编码和解码的问 题。</p>\n<p>但如果原本正常的文本变成了乱码，就说明文件使用的可能是其他编码。</p>\n<p>在这种情况下，对 导致这种问题的原因有所了解将大有裨益。</p>\n<p>如果你想更详细地了解 Python 中的 Unicode，请参阅 在线文档中有关该主题的 HOWTO 部分 ①。</p>\n<p>注意 源代码也将被编码，且默认使用的也是 UTF-8 编码。如果你想使用其他编码（例如，如果 你使用的文本编辑器使用其他编码来存储源代码），可使用特殊的注释来指定。 # -*- coding: encoding name -*请将其中的 encoding name 替换为你要使用的编码（大小写都行），如 utf-8 或 latin-1。<br>最后，Python 还提供了 bytearray，它是 bytes 的可变版。从某种意义上说，它就像是可修改 的字符串——常规字符串是不能修改的。然而，bytearray 其实是为在幕后使用而设计的，因此 作为类字符串使用时对用户并不友好。例如，要替换其中的字符，必须将其指定为 0 ～ 255 的值。 因此，要插入字符，必须使用 ord 获取其序数值（ordinal value）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"built_in\">bytearray</span>(<span class=\"string\">b&quot;Hello!&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x[<span class=\"number\">1</span>] = <span class=\"built_in\">ord</span>(<span class=\"string\">b&quot;u&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"built_in\">bytearray</span>(<span class=\"string\">b&#x27;Hullo!&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n    </div>\n</div>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍的内容很多，先来看看你都学到了什么，再接着往下讲。</p>\n<ul>\n<li>算法：算法犹如菜谱，告诉你如何完成特定的任务。从本质上说，编写计算机程序就是 使用计算机能够理解的语言（如 Python）描述一种算法。这种对机器友好的描述被称为程序，主要由表达式和语句组成。</li>\n<li>表达式：表达式为程序的一部分，结果为一个值。例如，2 + 2 就是一个表达式，结果为 4。简单表达式是使用运算符（如+或%）和函数（如 pow）将字面值（如 2 或”Hello”）组 合起来得到的。通过组合简单的表达式，可创建复杂的表达式，如(2 + 2) *(3 - 1)。表 达式还可能包含变量。</li>\n<li>变量：变量是表示值的名称。通过赋值，可将新值赋给变量，如 x &#x3D; 2。赋值是一种语句。</li>\n<li><ul>\n<li>语句：语句是让计算机执行特定操作的指示。这种操作可能是修改变量（通过赋值）、将 信息打印到屏幕上（如 print(“Hello, world!”)）、导入模块或执行众多其他任务。</li>\n</ul>\n</li>\n<li>函数：Python 函数类似于数学函数，它们可能接受参数，并返回结果（在第 6 章学习编写 自定义函数时，你将发现函数实际上可以在返回前做很多事情）。</li>\n<li>模块：模块是扩展，可通过导入它们来扩展 Python 的功能。例如，模块 math 包含多个很有 用的函数。</li>\n<li>程序：你通过练习学习了如何编写、保存和运行 Python 程序。 - 字符串：字符串非常简单。它们其实就是一段文本，其中的字符是用 Unicode 码点表示的。 然而，对于字符串，需要学习的知识有很多。本章介绍了很多表示字符串的方式，第 3 章 将介绍众多字符串用法。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">abs</span>(number)                             <span class=\"comment\"># 返回指定数的绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">bytes</span>(string, encoding[, errors])       <span class=\"comment\"># 对指定的字符串进行编码，并以指定的方式处理错误</span></span><br><span class=\"line\">cmath.sqrt(number)                      <span class=\"comment\"># 返回平方根；可用于负数</span></span><br><span class=\"line\"><span class=\"built_in\">float</span>(<span class=\"built_in\">object</span>)                           <span class=\"comment\"># 将字符串或数字转换为浮点数</span></span><br><span class=\"line\"><span class=\"built_in\">help</span>([<span class=\"built_in\">object</span>])                          <span class=\"comment\"># 提供交互式帮助</span></span><br><span class=\"line\"><span class=\"built_in\">input</span>(prompt)                           <span class=\"comment\"># 以字符串的方式获取用户输入</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(<span class=\"built_in\">object</span>)                             <span class=\"comment\"># 将字符串或数转换为整数</span></span><br><span class=\"line\">math.ceil(number)                       <span class=\"comment\"># 以浮点数的方式返回向上圆整的结果</span></span><br><span class=\"line\">math.floor(number)                      <span class=\"comment\"># 以浮点数的方式返回向下圆整的结果</span></span><br><span class=\"line\">math.sqrt(number)                       <span class=\"comment\"># 返回平方根；不能用于负数</span></span><br><span class=\"line\"><span class=\"built_in\">pow</span>(x, y[, z])                          <span class=\"comment\"># 返回x的y次方对z求模的结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">object</span>, ...)                      <span class=\"comment\"># 将提供的实参打印出来，并用空格分隔</span></span><br><span class=\"line\"><span class=\"built_in\">repr</span>(<span class=\"built_in\">object</span>)                            <span class=\"comment\"># 返回一个对象的字符串表示形式</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(number[, ndigits])                <span class=\"comment\"># 四舍五入为指定的精度，正好为5时舍入到偶数</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>(<span class=\"built_in\">object</span>)                             <span class=\"comment\"># 将指定的值转换为字符串。用于转换bytes时，可指定编码和错误处理方式</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表和元组\"><a href=\"#列表和元组\" class=\"headerlink\" title=\"列表和元组\"></a>列表和元组</h2><p>索引 <code>tag[0]</code></p>\n<p>切片 <code>tag[32:-4]</code></p>\n<h3 id=\"更大的步长\"><a href=\"#更大的步长\" class=\"headerlink\" title=\"更大的步长\"></a>更大的步长</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这个示例中，指定了另一个数。你可能猜到了，这显式地指定了步长。如果指定的步长大于<span class=\"number\">1</span>，将跳过一些元素。例如，步长为<span class=\"number\">2</span>时，将从起点和终点之间每隔一个元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">0</span>:<span class=\"number\">10</span>:<span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">提取一个元素显式地指定步长时，也可使用前述简写。例如，要从序列中每隔<span class=\"number\">3</span>个元素提取<span class=\"number\">1</span>个，只需提供步长<span class=\"number\">4</span>即可</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">0</span>:<span class=\"number\">10</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">numbers[<span class=\"number\">3</span>:<span class=\"number\">6</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">[<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">当然，步长不能为<span class=\"number\">0</span>，否则无法向前移动，但可以为负数，即从右向左提取元素。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"乘法\"><a href=\"#乘法\" class=\"headerlink\" title=\"乘法\"></a>乘法</h3><p>将序列与数 x 相乘时，将重复这个序列 x 次来创建一个新序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;python&#x27;</span> * <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;pythonpythonpythonpythonpython&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[<span class=\"number\">42</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">[<span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>]</span><br></pre></td></tr></table></figure>\n\n<p>None、空列表和初始化</p>\n<p>空列表是使用不包含任何内容的两个方括号表示的。如果要创建一个可包含 10 个元素的列表，但没有任何有用的内容，可像前面那样使用<code>[42]*10</code>。但更准确的做法是使用<code>[0]*10</code>，这将创建一个包含 10 个零的列表。然而，在有些情况下，你可能想使用表示“什么都没有”的值，如表示还没有在列表中添加任何内容。在这种情况下，可使用 None。在 Python 中， None 表示什么都没有。因此，要将列表的长度初始化为 10，可像下面这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sequence = [<span class=\"literal\">None</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sequence</span><br><span class=\"line\">[<span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列表：-Python-的主力\"><a href=\"#列表：-Python-的主力\" class=\"headerlink\" title=\"列表： Python 的主力\"></a>列表： Python 的主力</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">[<span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>要将字符列表（如前述代码中的字符列表）转换为字符串，可使用下面的表达式：<br><code>&#39;&#39;.join(somelist)</code></p>\n<ol>\n<li>给切片赋值<br>切片是一项极其强大的功能，而能够给切片赋值让这项功能显得更加强大。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;Perl&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\">[<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name[<span class=\"number\">2</span>:] = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;ar&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\">[<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>从上述代码可知，可同时给多个元素赋值。你可能认为，这有什么大不了的，分别给每个元<br>素赋值不是一样的吗？确实如此，但通过使用切片赋值，可将切片替换为长度与其不同的序列。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;Perl&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name[<span class=\"number\">1</span>:] = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;ython&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\">[<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>使用切片赋值还可在不替换原有元素的情况下插入新元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers = [<span class=\"number\">1</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">1</span>:<span class=\"number\">1</span>] = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我“替换”了一个空切片，相当于插入了一个序列。你可采取相反的措施来删除切片。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">1</span>:<span class=\"number\">4</span>] = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<p>你可能猜到了，上述代码与 del numbers[1:4]等效。现在，你可自己尝试执行步长<strong>不为 1（乃至为负）</strong>的切片赋值了。</p>\n<h3 id=\"列表方法\"><a href=\"#列表方法\" class=\"headerlink\" title=\"列表方法\"></a>列表方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append()</span><br><span class=\"line\">clear()</span><br><span class=\"line\">copy()</span><br><span class=\"line\">count()</span><br><span class=\"line\">extend()</span><br><span class=\"line\">index()</span><br><span class=\"line\">insert()</span><br><span class=\"line\">pop()  <span class=\"comment\">#从列尾删除一个元素，并返回该元素的值</span></span><br><span class=\"line\">remove()  <span class=\"comment\">#删除第一个值</span></span><br><span class=\"line\">reverse()  <span class=\"comment\">#反转列表中的元素</span></span><br><span class=\"line\">sort()  <span class=\"comment\">#排序列表中的元素 就地排序意味着对原来的列表进行修改，而不是创建一个新的列表。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy()\"></a>copy()</h4><p>方法 copy 复制列表。前面说过，常规复制只是将另一个名称关联到列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b[<span class=\"number\">1</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>要让 a 和 b 指向不同的列表，就必须将 b 关联到 a 的副本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.copy()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b[<span class=\"number\">1</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Extend\"><a href=\"#Extend\" class=\"headerlink\" title=\"Extend()\"></a>Extend()</h4><p>方法 extend 让你能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提<br>供给方法 extend。换而言之，你可使用一个列表来扩展另一个列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.extend(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这可能看起来类似于拼接，但存在一个重要差别，那就是将修改被扩展的序列（这里是 a）。<br>在常规拼接中，情况是返回一个全新的序列。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a + b</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sort-高级排序\"><a href=\"#sort-高级排序\" class=\"headerlink\" title=\"sort() 高级排序\"></a>sort() 高级排序</h4><p>方法 sort 接受两个可选参数： key 和 reverse。</p>\n<p>方法 sort 接受两个可选参数： key 和 reverse。这两个参数通常是按名称指定的，称为关键字<br>参数，将在第 6 章详细讨论。参数 key 类似于参数 cmp：你将其设置为一个用于排序的函数。然而，<br>不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个<br>键，再根据这些键对元素进行排序。因此，要根据长度对元素进行排序，可将参数 key 设置为函数 len。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = [<span class=\"string\">&#x27;aardvark&#x27;</span>, <span class=\"string\">&#x27;abalone&#x27;</span>, <span class=\"string\">&#x27;acme&#x27;</span>, <span class=\"string\">&#x27;add&#x27;</span>, <span class=\"string\">&#x27;aerate&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x.sort(key=<span class=\"built_in\">len</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"string\">&#x27;acme&#x27;</span>, <span class=\"string\">&#x27;aerate&#x27;</span>, <span class=\"string\">&#x27;abalone&#x27;</span>, <span class=\"string\">&#x27;aardvark&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>对于另一个关键字参数 reverse，只需将其指定为一个真值（ True 或 False，将在第 5 章详细介绍），以指出是否要按相反的顺序对列表进行排序。</p>\n<h3 id=\"元组：不可修改的序列-元组\"><a href=\"#元组：不可修改的序列-元组\" class=\"headerlink\" title=\"元组：不可修改的序列 (元组)\"></a>元组：不可修改的序列 (元组)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>下面来回顾一下本章介绍的一些最重要的概念。</p>\n<ul>\n<li><p>序列：序列是一种数据结构，其中的元素带编号（编号从 0 开始）。列表、字符串和元组<br>都属于序列，其中列表是可变的（你可修改其内容），而元组和字符串是不可变的（一旦<br>创建，内容就是固定的）。要访问序列的一部分，可使用切片操作：提供两个指定切片起<br>始和结束位置的索引。要修改列表，可给其元素赋值，也可使用赋值语句给切片赋值。</p>\n</li>\n<li><p>成员资格：要确定特定的值是否包含在序列（或其他容器）中，可使用运算符 in。将运<br>算符 in 用于字符串时情况比较特殊——这样可查找子串。</p>\n</li>\n<li><p>方法：一些内置类型（如列表和字符串，但不包括元组）提供了很多有用的方法。方法<br>有点像函数，只是与特定的值相关联。方法是面向对象编程的一个重要方面，这将在第 7<br>章介绍。</p>\n</li>\n</ul>\n<h2 id=\"字符串-1\"><a href=\"#字符串-1\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"设置字符串的格式-精简版\"><a href=\"#设置字符串的格式-精简版\" class=\"headerlink\" title=\"设置字符串的格式 精简版\"></a>设置字符串的格式 精简版</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># from c</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">format</span> = <span class=\"string\">&quot;Hello, s. s enough for ya?&quot;</span> % %</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values = (<span class=\"string\">&#x27;world&#x27;</span>, <span class=\"string\">&#x27;Hot&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">format</span> values %</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello, world. Hot enough for ya?&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># from shell</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl = Template(<span class=\"string\">&quot;Hello, $who! $what enough for ya?&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl.substitute(who=<span class=\"string\">&quot;Mars&quot;</span>, what=<span class=\"string\">&quot;Dusty&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello, Mars! Dusty enough for ya?&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># new and improved</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;&#125;, &#123;&#125; and &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;first&quot;</span>, <span class=\"string\">&quot;second&quot;</span>, <span class=\"string\">&quot;third&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;first, second and third&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;0&#125;, &#123;1&#125; and &#123;2&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;first&quot;</span>, <span class=\"string\">&quot;second&quot;</span>, <span class=\"string\">&quot;third&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;first, second and third&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;3&#125; &#123;0&#125; &#123;2&#125; &#123;1&#125; &#123;3&#125; &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;be&quot;</span>, <span class=\"string\">&quot;not&quot;</span>, <span class=\"string\">&quot;or&quot;</span>, <span class=\"string\">&quot;to&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;to be or not to be&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> pi</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;name&#125; is approximately &#123;value:.2f&#125;.&quot;</span>.<span class=\"built_in\">format</span>(value=pi, name=<span class=\"string\">&quot;π &quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;π is approximately 3.14.&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后，在Python 3.6中，如果变量与替换字段同名，还可使用一种简写。在这种情况下，可使用f字符串——在字符串前面加上f。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> e</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">f&quot;Euler&#x27;s constant is roughly <span class=\"subst\">&#123;e&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Euler&#x27;s constant is roughly 2.718281828459045.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Euler&#x27;s constant is roughly &#123;e&#125;.&quot;</span>.<span class=\"built_in\">format</span>(e=e)</span><br><span class=\"line\"><span class=\"string\">&quot;Euler&#x27;s constant is roughly 2.718281828459045.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置字符串的格式-完整版\"><a href=\"#设置字符串的格式-完整版\" class=\"headerlink\" title=\"设置字符串的格式 完整版\"></a>设置字符串的格式 完整版</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;&#123;ceci n&#x27;est pas une replacement field&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>()</span><br><span class=\"line\"><span class=\"string\">&quot;&#123;ceci n&#x27;est pas une replacement field&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在格式字符串中，最激动人心的部分为替换字段。替换字段由如下部分组成，其中每个部分<br>都是可选的。</p>\n<ul>\n<li>字段名：索引或标识符，指出要设置哪个值的格式并使用结果来替换该字段。除指定值<br>外，还可指定值的特定部分，如列表的元素。</li>\n<li>转换标志：跟在叹号后面的单个字符。当前支持的字符包括 r（表示 repr）、 s（表示 str）<br>和 a（表示 ascii）。如果你指定了转换标志，将不使用对象本身的格式设置机制，而是使<br>用指定的函数将对象转换为字符串，再做进一步的格式设置。</li>\n<li>格式说明符：跟在冒号后面的表达式（这种表达式是使用微型格式指定语言表示的）。格<br>式说明符让我们能够详细地指定最终的格式，包括格式类型（如字符串、浮点数或十六<br>进制数），字段宽度和数的精度，如何显示符号和千位分隔符，以及各种对齐和填充方式。<br>下面详细介绍其中的一些要素。</li>\n</ul>\n<h4 id=\"替换字段名\"><a href=\"#替换字段名\" class=\"headerlink\" title=\"替换字段名\"></a>替换字段名</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;foo&#125; &#123;&#125; &#123;bar&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, bar=<span class=\"number\">4</span>, foo=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;3 1 4 2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;foo&#125; &#123;1&#125; &#123;bar&#125; &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, bar=<span class=\"number\">4</span>, foo=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;3 2 4 1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fullname = [<span class=\"string\">&quot;Alfred&quot;</span>, <span class=\"string\">&quot;Smoketoomuch&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Mr &#123;name[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=fullname)</span><br><span class=\"line\"><span class=\"string\">&#x27;Mr Smoketoomuch&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl = <span class=\"string\">&quot;The &#123;mod.__name__&#125; module defines the value &#123;mod.pi&#125; for π &quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl.<span class=\"built_in\">format</span>(mod=math)</span><br><span class=\"line\"><span class=\"string\">&#x27;The math module defines the value 3.141592653589793 for π &#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本转换\"><a href=\"#基本转换\" class=\"headerlink\" title=\"基本转换\"></a>基本转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;pi!s&#125; &#123;pi!r&#125; &#123;pi!a&#125;&quot;</span>.<span class=\"built_in\">format</span>(pi=<span class=\"string\">&quot;π &quot;</span>))</span><br><span class=\"line\">π <span class=\"string\">&#x27;π &#x27;</span> <span class=\"string\">&#x27;\\u03c0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上述三个标志（ s、 r和a）指定分别使用str、 repr和ascii进行转换。</span></span><br><span class=\"line\"><span class=\"comment\"># 你还可指定要转换的值是哪种类型，更准确地说，是要将其视为哪种类型。例如，你可能提供一个整数，但将其作为小数进行处理。为此可在格式说明（即冒号后面）使用字符f（表示定点数）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;The number is &#123;num&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;The number is 42&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;The number is &#123;num:f&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;The number is 42.000000&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;The number is &#123;num:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;The number is 101010&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>表 3-1 字符串格式设置中的类型说明符</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b</td>\n<td>将整数表示为二进制数</td>\n</tr>\n<tr>\n<td>c</td>\n<td>将整数解读为 Unicode 码点</td>\n</tr>\n<tr>\n<td>d</td>\n<td>将整数视为十进制数进行处理，这是整数默认使用的说明符</td>\n</tr>\n<tr>\n<td>e</td>\n<td>使用科学表示法来表示小数（用 e 来表示指数）</td>\n</tr>\n<tr>\n<td>E</td>\n<td>与 e 相同，但使用 E 来表示指数</td>\n</tr>\n<tr>\n<td>f</td>\n<td>将小数表示为定点数</td>\n</tr>\n<tr>\n<td>F</td>\n<td>与 f 相同，但对于特殊值（ nan 和 inf），使用大写表示</td>\n</tr>\n<tr>\n<td>g</td>\n<td>自动在定点表示法和科学表示法之间做出选择。这是默认用于小数的说明符，但在默认情况下至少有 1 位小数</td>\n</tr>\n<tr>\n<td>G</td>\n<td>与 g 相同，但使用大写来表示指数和特殊值</td>\n</tr>\n<tr>\n<td>n</td>\n<td>与 g 相同，但插入随区域而异的数字分隔符</td>\n</tr>\n<tr>\n<td>o</td>\n<td>将整数表示为八进制数</td>\n</tr>\n<tr>\n<td>s</td>\n<td>保持字符串的格式不变，这是默认用于字符串的说明符</td>\n</tr>\n<tr>\n<td>x</td>\n<td>将整数表示为十六进制数并使用小写字母</td>\n</tr>\n<tr>\n<td>X</td>\n<td>与 x 相同，但使用大写字母</td>\n</tr>\n<tr>\n<td>%</td>\n<td>将数表示为百分比值（乘以 100，按说明符 f 设置格式，再在后面加上%）</td>\n</tr>\n</tbody></table>\n<h5 id=\"宽度、精度和千位分隔符\"><a href=\"#宽度、精度和千位分隔符\" class=\"headerlink\" title=\"宽度、精度和千位分隔符\"></a>宽度、精度和千位分隔符</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#宽度是使用整数指定的，如下所示：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;num:10&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;         3&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;name:10&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;Bob&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Bob       &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#精度是使用小数指定的，如下所示：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Pi day is &#123;pi:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(pi=pi)</span><br><span class=\"line\"><span class=\"string\">&#x27;Pi day is 3.14&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;pi:10.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(pi=pi)</span><br><span class=\"line\"><span class=\"string\">&#x27; 3.14&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:.5&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;Guido van Rossum&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Guido&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#　千位分隔符　　可使用逗号来指出你要添加千位分隔符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;One googol is &#123;:,&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">10</span>**<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;One googol is 10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时指定其他格式设置元素时，这个逗号应放在宽度和表示精度的句点之间①。</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"符号、对齐和用-0-填充\"><a href=\"#符号、对齐和用-0-填充\" class=\"headerlink\" title=\"符号、对齐和用 0 填充\"></a>符号、对齐和用 0 填充</h5><p>在一栏中同时包含字符串和数时，你可能想修改默认对齐方式。在指定宽<br>度和精度的数前面，可添加一个标志。<br>这个标志可以是零、加号、减号或空格，其中零表示使用 0 来填充数字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;&#123;:010.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi)</span><br><span class=\"line\"><span class=\"string\">&#x27;0000003.14&#x27;</span></span><br><span class=\"line\">要指定左对齐、右对齐和居中，可分别使用&lt;、 &gt;和^。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:&lt;10.2f&#125;\\n&#123;0:^10.2f&#125;\\n&#123;0:&gt;10.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi))</span><br><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\">  <span class=\"number\">3.14</span></span><br><span class=\"line\">     <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以使用填充字符来扩充对齐说明符，这样将使用指定的字符而不是默认的空格来填充。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:$^15&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot; WIN BIG &quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;$$$ WIN BIG $$$&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还有更具体的说明符=，它指定将填充字符放在符号和数字之间。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:10.2f&#125;\\n&#123;1:10.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\">   <span class=\"number\">3.14</span></span><br><span class=\"line\">   -<span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:10.2f&#125;\\n&#123;1:=10.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\">   <span class=\"number\">3.14</span></span><br><span class=\"line\">-  <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果要给正数加上符号，可使用说明符+（将其放在对齐说明符后面），而不是默认的-。如果将符号说明符指定为空格，会在正数前面加上空格而不是+。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:-.2&#125;\\n&#123;1:-.2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi)) <span class=\"comment\">#默认设置</span></span><br><span class=\"line\"><span class=\"number\">3.1</span></span><br><span class=\"line\">-<span class=\"number\">3.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:+.2&#125;\\n&#123;1:+.2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\">+<span class=\"number\">3.1</span></span><br><span class=\"line\">-<span class=\"number\">3.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0: .2&#125;\\n&#123;1: .2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\"> <span class=\"number\">3.1</span></span><br><span class=\"line\">-<span class=\"number\">3.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要介绍的最后一个要素是井号（ #）选项，你可将其放在符号说明符和宽度之间（如果指定了这两种设置）。这个选项将触发另一种转换方式，转换细节随类型而异。例如，对于二进制、八进制和十六进制转换，将加上一个前缀。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;101010&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:#b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0b101010&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:g&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;42&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:#g&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;42.0000&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据指定的宽度打印格式良好的价格列表</span></span><br><span class=\"line\">width = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please enter width: &#x27;</span>))</span><br><span class=\"line\">price_width = <span class=\"number\">10</span></span><br><span class=\"line\">item_width = width - price_width</span><br><span class=\"line\">header_fmt = <span class=\"string\">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;&#125;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(item_width, price_width)</span><br><span class=\"line\">fmt = <span class=\"string\">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;.2f&#125;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(item_width, price_width)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=&#x27;</span> * width)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(header_fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Item&#x27;</span>, <span class=\"string\">&#x27;Price&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * width)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Apples&#x27;</span>, <span class=\"number\">0.4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Pears&#x27;</span>, <span class=\"number\">0.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Cantaloupes&#x27;</span>, <span class=\"number\">1.92</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Dried Apricots (16 oz.)&#x27;</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Prunes (4 lbs.)&#x27;</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=&#x27;</span> * width)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result</span></span><br><span class=\"line\"><span class=\"comment\"># 这个程序的运行情况类似于下面这样：</span></span><br><span class=\"line\">Please enter width: <span class=\"number\">35</span></span><br><span class=\"line\">===================================</span><br><span class=\"line\">Item                          Price</span><br><span class=\"line\">-----------------------------------</span><br><span class=\"line\">Apples                         <span class=\"number\">0.40</span></span><br><span class=\"line\">Pears                          <span class=\"number\">0.50</span></span><br><span class=\"line\">Cantaloupes                    <span class=\"number\">1.92</span></span><br><span class=\"line\">Dried Apricots (<span class=\"number\">16</span> oz.)        <span class=\"number\">8.00</span></span><br><span class=\"line\">Prunes (<span class=\"number\">4</span> lbs.)               <span class=\"number\">12.00</span></span><br><span class=\"line\">===================================</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>套娃哇！！666</p>\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><p>字符串的方法太多了，这里只介绍一些最有用的。完整的字符串方法清单请参阅附录 B。这<br>里描述字符串的方法时，将列出其他相关的方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字符串的方法</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.center(width[, fillchar]) <span class=\"comment\"># 方法center通过在两边添加填充字符（默认为空格）让字符串居中。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.find(sub[, start[, end]]) <span class=\"comment\"># 方法find返回子字符串sub在字符串中第一次出现的索引，如果没有找到，则返回-1。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.join(seq) <span class=\"comment\"># 方法join将序列seq中的元素用字符串str连接起来，返回连接后的字符串。 所合并序列的元素必须都是字符串</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.lower() <span class=\"comment\"># 方法lower将字符串转换为小写。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.upper() <span class=\"comment\"># 方法upper将字符串转换为大写。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.split(sep[, maxsplit]) <span class=\"comment\"># 方法split将字符串按照分隔符sep分割，返回分割后的字符串列表。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.strip([chars]) <span class=\"comment\"># 方法strip删除字符串左右两边的空格。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.replace(old, new[, <span class=\"built_in\">max</span>]) <span class=\"comment\"># 方法replace将字符串中的old子字符串替换为new子字符串，返回替换后的字符串。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.splitlines([keepends]) <span class=\"comment\"># 方法splitlines将字符串按照行分割，返回分割后的字符串列表。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.translate(table[, deletechars]) <span class=\"comment\"># 方法translate将字符串中的字符用表table中的对应字符替换，返回替换后的字符串。 方法translate与replace一样替换字符串的特定部分，但不同的是它只能进行单字符替换。这个方法的优势在于能够同时替换多个字符，因此效率比replace高。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isdigit() <span class=\"comment\"># 方法isdigit判断字符串是否只包含数字字符。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isalpha() <span class=\"comment\"># 方法isalpha判断字符串是否只包含字母字符。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isalnum() <span class=\"comment\"># 方法isalnum判断字符串是否只包含字母和数字字符。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.islower() <span class=\"comment\"># 方法islower判断字符串是否只包含小写字母。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isupper() <span class=\"comment\"># 方法isupper判断字符串是否只包含大写字母。 isalnum、 isalpha、 isdecimal、 isdigit、 isidentifier、 islower、 isnumeric、isprintable、 isspace、 istitle、 isupper。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"trnaslate\"><a href=\"#trnaslate\" class=\"headerlink\" title=\"trnaslate\"></a>trnaslate</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = <span class=\"built_in\">str</span>.maketrans(<span class=\"string\">&#x27;cs&#x27;</span>, <span class=\"string\">&#x27;kz&#x27;</span>)</span><br><span class=\"line\">如果愿意，可查看转换表的内容，但你看到的只是Unicode码点之间的映射。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table</span><br><span class=\"line\">&#123;<span class=\"number\">115</span>: <span class=\"number\">122</span>, <span class=\"number\">99</span>: <span class=\"number\">107</span>&#125;</span><br><span class=\"line\">创建转换表后，就可将其用作方法translate的参数。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;this is an incredible test&#x27;</span>.translate(table)</span><br><span class=\"line\"><span class=\"string\">&#x27;thiz iz an inkredible tezt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了字符串的两个重要方面。</p>\n<ul>\n<li>字符串格式设置：求模运算符（ %）可用于将值合并为包含转换标志（如%s）的字符串，<br>这让你能够以众多方式设置值的格式，如左对齐或右对齐，指定字段宽度和精度，添加<br>符号（正号或负号）以及在左边填充 0 等。</li>\n<li>字符串方法：字符串有很多方法， 有些很有用（如 split 和 join），有些很少用到（如 istitle<br>和 capitalize）。</li>\n</ul>\n<h2 id=\"字典-当索引行不通时\"><a href=\"#字典-当索引行不通时\" class=\"headerlink\" title=\"字典 当索引行不通时\"></a>字典 当索引行不通时</h2><p><code>phonebook = &#123;&#39;Alice&#39;: &#39;2341&#39;, &#39;Beth&#39;: &#39;9102&#39;, &#39;Cecil&#39;: &#39;3258&#39;&#125;</code></p>\n<p>他的定义有点像结构体</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>items = [(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Gumby&#x27;</span>), (<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">42</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"built_in\">dict</span>(items)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">42</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Gumby&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;Gumby&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 还可使用关键字实参来调用这个函数，如下所示：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"built_in\">dict</span>(name=<span class=\"string\">&#x27;Gumby&#x27;</span>, age=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">42</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Gumby&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>键的类型：字典中的键可以是整数，但并非必须是整数。字典中的键可以是任何不可变<br>的类型，如浮点数（实数）、字符串或元组。</li>\n<li>自动添加：即便是字典中原本没有的键，也可以给它赋值，这将在字典中创建一个新项。<br>然而，如果不使用 append 或其他类似的方法，就不能给列表中没有的元素赋值。</li>\n<li>成员资格：表达式 k in d（其中 d 是一个字典）查找的是键而不是值，而表达式 v in l（其<br>中 l 是一个列表）查找的是值而不是索引。这看似不太一致，但你习惯后就会觉得相当自<br>然。毕竟如果字典包含指定的键，检查相应的值就很容易。</li>\n</ul>\n<blockquote>\n<p>将字符串格式设置功能用于字典</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>phonebook</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;Beth&#x27;</span>: <span class=\"string\">&#x27;9102&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>: <span class=\"string\">&#x27;2341&#x27;</span>, <span class=\"string\">&#x27;Cecil&#x27;</span>: <span class=\"string\">&#x27;3258&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Cecil&#x27;s phone number is &#123;Cecil&#125;.&quot;</span>.format_map(phonebook)</span><br><span class=\"line\"><span class=\"string\">&quot;Cecil&#x27;s phone number is 3258.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字典方法\"><a href=\"#字典方法\" class=\"headerlink\" title=\"字典方法\"></a>字典方法</h3><p>clear：清空字典中的所有项。<br>copy：返回一个字典的浅复制，而不是深复制。deepcopy：返回一个字典的深复制。<br>fromkeys：从指定的键值对创建一个新的字典。<br>get：返回指定键的值，如果值不在字典中返回默认值。方法 get 为访问字典项提供了宽松的环境。通常，如果你试图访问字典中没有的项，将引发错误。使用 get 来访问不存在的键时，没有引发异常，而是返回 None。你可指定“默认”值，这样将返回你指定的值而不是 None。</p>\n<p>items：返回一个包含字典中的所有项的列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;Python Web Site&#x27;</span>, <span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;http://www.python.org&#x27;</span>, <span class=\"string\">&#x27;spam&#x27;</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</span><br><span class=\"line\">dict_items([(<span class=\"string\">&#x27;url&#x27;</span>, <span class=\"string\">&#x27;http://www.python.org&#x27;</span>), (<span class=\"string\">&#x27;spam&#x27;</span>, <span class=\"number\">0</span>), (<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;Python Web Site&#x27;</span>)])</span><br></pre></td></tr></table></figure>\n\n<p>返回值属于一种名为字典视图的特殊类型。字典视图可用于迭代（迭代将在第 5 章详细介绍）。<br>另外，你还可确定其长度以及对其执行成员资格检查。</p>\n<p>视图的一个优点是不复制，它们始终是底层字典的反映，即便你修改了底层字典亦如此。</p>\n<p>keys：返回一个包含字典中的所有键的列表。视图<br>pop：删除并返回字典中的一个项。<code>d.pop(&#39;x&#39;)</code><br>popitem：随机删除并返回字典中的一个项。<br>setdefault：如果键不存在于字典中，则为它设置默认值。<br>update：将另一个字典的项添加到字典中。<br>values：返回一个包含字典中的所有值的列表。视图</p>\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了如下内容。</p>\n<ul>\n<li>映射：映射让你能够使用任何不可变的对象（最常用的是字符串和元组）来标识其元素。<br>Python 只有一种内置的映射类型，那就是字典。</li>\n<li>将字符串格式设置功能用于字典：要对字典执行字符串格式设置操作，不能使用 format<br>和命名参数，而必须使用 format_map。</li>\n<li>字典方法：字典有很多方法，这些方法的调用方式与列表和字符串的方法相同。</li>\n</ul>\n<h2 id=\"条件、循环及其他语句\"><a href=\"#条件、循环及其他语句\" class=\"headerlink\" title=\"条件、循环及其他语句\"></a>条件、循环及其他语句</h2><h3 id=\"赋值魔法\"><a href=\"#赋值魔法\" class=\"headerlink\" title=\"赋值魔法\"></a>赋值魔法</h3><ol>\n<li>序列解包</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y, z = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = y, x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x, y)</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y, z = values</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可使用星号运算符（ *）来收集多余的值，这样无需确保值和变量的个数相同，如下例所示：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, *rest = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rest</span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可将带星号的变量放在其他位置。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;Albus Percival Wulfric Brian Dumbledore&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first, *middle, last = name.split()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>middle</span><br><span class=\"line\">[<span class=\"string\">&#x27;Percival&#x27;</span>, <span class=\"string\">&#x27;Wulfric&#x27;</span>, <span class=\"string\">&#x27;Brian&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">赋值语句的右边可以是任何类型的序列，但带星号的变量最终包含的总是一个列表。在变量和值的个数相同时亦如此。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, *b, c = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c</span><br><span class=\"line\">(<span class=\"string\">&#x27;a&#x27;</span>, [<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>链式赋值</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链式赋值是一种快捷方式，用于将多个变量关联到同一个值。这有点像前一节介绍的并行赋值，但只涉及一个值：</span></span><br><span class=\"line\">x = y = somefunction()</span><br><span class=\"line\"><span class=\"comment\"># 上述代码与下面的代码等价：</span></span><br><span class=\"line\">y = somefunction()</span><br><span class=\"line\">x = y</span><br><span class=\"line\"><span class=\"comment\"># 请注意，这两条语句可能与下面的语句不等价：</span></span><br><span class=\"line\">x = somefunction()</span><br><span class=\"line\">y = somefunction()</span><br><span class=\"line\"><span class=\"comment\"># 有关这方面的详细信息，请参阅5.4.6节介绍相同运算符（ is）的部分。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>关键字 assert</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt; age &lt; <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt; age &lt; <span class=\"number\">100</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> ?</span><br><span class=\"line\">AssertionError</span><br><span class=\"line\"><span class=\"comment\">#如果知道必须满足特定条件，程序才能正确地运行，可在程序中添加assert语句充当检查点，这很有帮助。还可在条件后面添加一个字符串，对断言做出说明。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt; age &lt; <span class=\"number\">100</span>, <span class=\"string\">&#x27;The age must be realistic&#x27;</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> ?</span><br><span class=\"line\">AssertionError: The age must be realistic</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>迭代字典</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 要遍历字典的所有关键字，可像遍历序列那样使用普通的for语句。</span></span><br><span class=\"line\">d = &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;z&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(key, <span class=\"string\">&#x27;corresponds to&#x27;</span>, d[key])</span><br><span class=\"line\"><span class=\"comment\"># 也可使用keys等字典方法来获取所有的键。如果只对值感兴趣，可使用d.values。你可能还</span></span><br><span class=\"line\"><span class=\"comment\"># 记得， d.items以元组的方式返回键值对。 for循环的优点之一是，可在其中使用序列解包。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> d.items():</span><br><span class=\"line\"><span class=\"built_in\">print</span>(key, <span class=\"string\">&#x27;corresponds to&#x27;</span>, value)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>并行迭代</li>\n</ol>\n<p>有时候，你可能想同时迭代两个序列。假设有下面两个列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">&#x27;anne&#x27;</span>, <span class=\"string\">&#x27;beth&#x27;</span>, <span class=\"string\">&#x27;george&#x27;</span>, <span class=\"string\">&#x27;damon&#x27;</span>]</span><br><span class=\"line\">ages = [<span class=\"number\">12</span>, <span class=\"number\">45</span>, <span class=\"number\">32</span>, <span class=\"number\">102</span>]</span><br></pre></td></tr></table></figure>\n\n<p>如果要打印名字和对应的年龄，可以像下面这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(names)):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names[i], <span class=\"string\">&#x27;is&#x27;</span>, ages[i], <span class=\"string\">&#x27;years old&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>i 是用作循环索引的变量的标准名称。一个很有用的并行迭代工具是内置函数 zip，它将两个<br>序列“缝合”起来，并返回一个由元组组成的序列。返回值是一个适合迭代的对象，要查看其内<br>容，可使用 list 将其转换为列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(names, ages))</span><br><span class=\"line\">[(<span class=\"string\">&#x27;anne&#x27;</span>, <span class=\"number\">12</span>), (<span class=\"string\">&#x27;beth&#x27;</span>, <span class=\"number\">45</span>), (<span class=\"string\">&#x27;george&#x27;</span>, <span class=\"number\">32</span>), (<span class=\"string\">&#x27;damon&#x27;</span>, <span class=\"number\">102</span>)]</span><br></pre></td></tr></table></figure>\n\n<p>“缝合”后，可在循环中将元组解包。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name, age <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(names, ages):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name, <span class=\"string\">&#x27;is&#x27;</span>, age, <span class=\"string\">&#x27;years old&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>函数 zip 可用于“缝合”任意数量的序列。需要指出的是，当序列的长度不同时，函数 zip 将<br>在最短的序列用完后停止“缝合”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(<span class=\"built_in\">range</span>(<span class=\"number\">5</span>), <span class=\"built_in\">range</span>(<span class=\"number\">100000000</span>)))</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">1</span>), (<span class=\"number\">2</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">4</span>)]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>迭代时获取索引</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> string <span class=\"keyword\">in</span> strings:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">in</span> string:</span><br><span class=\"line\">strings[index] = <span class=\"string\">&#x27;[censored]&#x27;</span></span><br><span class=\"line\">index += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>这个解决方案虽然可以接受，但看起来也有点笨拙。另一种解决方案是使用内置函数<br>enumerate。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index, string <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(strings):</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">in</span> string:</span><br><span class=\"line\">strings[index] = <span class=\"string\">&#x27;[censored]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个函数让你能够迭代索引 值对，其中的索引是自动提供的。</p>\n<ol start=\"7\">\n<li>循环中的 else 子句<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">99</span>, <span class=\"number\">81</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">root = sqrt(n)</span><br><span class=\"line\"><span class=\"keyword\">if</span> root == <span class=\"built_in\">int</span>(root):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n)</span><br><span class=\"line\"><span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Didn&#x27;t find it!&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在循环中使用 else 子句，可以在循环正常结束时执行，也可以在循环异常结束时执行。</p>\n<h3 id=\"列表推导式\"><a href=\"#列表推导式\" class=\"headerlink\" title=\"列表推导式\"></a>列表推导式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表推导式是列表创建的另一种方式。</span></span><br><span class=\"line\">squares = [n ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(squares)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> x <span class=\"number\">3</span> == <span class=\"number\">0</span>] %</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">36</span>, <span class=\"number\">81</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[(x, y) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">2</span>, <span class=\"number\">1</span>), (<span class=\"number\">2</span>, <span class=\"number\">2</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>girls = [<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;bernice&#x27;</span>, <span class=\"string\">&#x27;clarice&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>boys = [<span class=\"string\">&#x27;chris&#x27;</span>, <span class=\"string\">&#x27;arnold&#x27;</span>, <span class=\"string\">&#x27;bob&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[b+<span class=\"string\">&#x27;+&#x27;</span>+g <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> boys <span class=\"keyword\">for</span> g <span class=\"keyword\">in</span> girls <span class=\"keyword\">if</span> b[<span class=\"number\">0</span>] == g[<span class=\"number\">0</span>]]</span><br><span class=\"line\">[<span class=\"string\">&#x27;chris+clarice&#x27;</span>, <span class=\"string\">&#x27;arnold+alice&#x27;</span>, <span class=\"string\">&#x27;bob+bernice&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 这些代码将名字的首字母相同的男孩和女孩配对。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典推导。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>squares = &#123;i:<span class=\"string\">&quot;&#123;&#125; squared is &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(i, i**<span class=\"number\">2</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>squares</span><br><span class=\"line\">&#123;<span class=\"number\">0</span>: <span class=\"string\">&#x27;0 squared is 0&#x27;</span>, <span class=\"number\">1</span>: <span class=\"string\">&#x27;1 squared is 1&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;2 squared is 4&#x27;</span>, <span class=\"number\">3</span>: <span class=\"string\">&#x27;3 squared is 9&#x27;</span>, <span class=\"number\">4</span>: <span class=\"string\">&#x27;4 squared is 16&#x27;</span>, <span class=\"number\">5</span>: <span class=\"string\">&#x27;5 squared is 25&#x27;</span>, <span class=\"number\">6</span>: <span class=\"string\">&#x27;6 squared is 36&#x27;</span>, <span class=\"number\">7</span>: <span class=\"string\">&#x27;7 squared is 49&#x27;</span>, <span class=\"number\">8</span>: <span class=\"string\">&#x27;8 squared is 64&#x27;</span>, <span class=\"number\">9</span>: <span class=\"string\">&#x27;9 squared is 81&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 在列表推导中， for前面只有一个表达式，而在字典推导中， for前面有两个用冒号分隔的表</span></span><br><span class=\"line\"><span class=\"comment\"># 达式。这两个表达式分别为键及其对应的值。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三人行\"><a href=\"#三人行\" class=\"headerlink\" title=\"三人行\"></a>三人行</h3><p>pass、 del 和 exec</p>\n<p>pass 可以用来作为占位符，用于空语句块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>del 可以用来删除一个对象的引用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> var</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这看似简单，但有时不太好理解。例如，在下面的示例中， x和y指向同一个列表：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = [<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y[<span class=\"number\">1</span>] = <span class=\"string\">&quot;Python&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 你可能认为通过删除x，也将删除y，但情况并非如此。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</span><br><span class=\"line\">[<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#这是为什么呢？ x和y指向同一个列表，但删除x对y没有任何影响，因为你只删除名称x，而没有删除列表本身（值）。事实上，在Python中，根本就没有办法删除值，而且你也不需要这样</span></span><br><span class=\"line\"><span class=\"comment\"># 做，因为对于你不再使用的值， Python解释器会立即将其删除。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>exec 可以用来执行一段代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">exec</span>(<span class=\"string\">&quot;print(&#x27;Hello, world!&#x27;)&quot;</span>)</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eval</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exec执行一系列Python语句，而eval计算用字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"># 的Python表达式的值，并返回结果（ exec什么都不返回，因为它本身是条语句）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;Enter an arithmetic expression: &quot;</span>))</span><br><span class=\"line\">Enter an arithmetic expression: <span class=\"number\">6</span> + <span class=\"number\">18</span> * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了多种语句。</p>\n<ul>\n<li>打印语句：你可使用 print 语句来打印多个用逗号分隔的值。如果 print 语句以逗号结尾，<br>后续 print 语句将在当前行接着打印。</li>\n<li>导入语句：有时候，你不喜欢要导入的函数的名称——可能是因为你已将这个名称用作<br>他用。在这种情况下，可使用 import … as …语句在本地重命名函数。</li>\n<li>赋值语句：通过使用奇妙的序列解包和链式赋值，可同时给多个变量赋值；而通过使用<br>增强赋值，可就地修改变量。</li>\n<li>代码块：代码块用于通过缩进将语句编组。代码块可用于条件语句和循环中，还可用于<br>函数和类定义中（这将在本书后面介绍）。</li>\n<li>条件语句：条件语句根据条件（布尔表达式）决定是否执行后续代码块。通过使用 if&#x2F;elif&#x2F;<br>else，可将多个条件语句组合起来。条件语句的一个变种是条件表达式，如 a if b else c。</li>\n<li>断言：断言断定某件事（一个布尔表达式）为真，可包含说明为何必须如此的字符串。<br>如果指定的表达式为假，断言将导致程序停止执行（或引发第 8 章将介绍的异常）。最好<br>尽早将错误揪出来，免得它潜藏在程序中，直到带来麻烦。</li>\n<li>循环：你可针对序列中的每个元素（如特定范围内的每个数）执行代码块，也可在条件<br>为真时反复执行代码块。要跳过代码块中余下的代码，直接进入下一次迭代，可使用<br>continue 语句；要跳出循环，可使用 break 语句。另外，你还可在循环末尾添加一个 else<br>子句，它将在没有执行循环中的任何 break 语句时执行。</li>\n<li>推导：推导并不是语句，而是表达式。它们看起来很像循环，因此我将它们放在循环中<br>讨论。通过列表推导，可从既有列表创建出新列表，这是通过对列表元素调用函数、剔<br>除不想要的函数等实现的。推导功能强大，但在很多情况下，使用普通循环和条件语句<br>也可完成任务，且代码的可读性可能更高。使用类似于列表推导的表达式可创建出字典。</li>\n<li>pass、 del、 exec 和 eval： pass 语句什么都不做，但适合用作占位符。 del 语句用于删除变<br>量或数据结构的成员，但不能用于删除值。函数 exec 用于将字符串作为 Python 程序执行。<br>函数 eval 计算用字符串表示的表达式并返回结果。</li>\n</ul>\n<h2 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h2><h4 id=\"懒惰是一种美德\"><a href=\"#懒惰是一种美德\" class=\"headerlink\" title=\"懒惰是一种美德\"></a>懒惰是一种美德</h4><p>这里说的懒不是贬义词，而是说不做无谓的工作。</p>\n<p>在有些语言（如C++、 Pascal和Ada）中，经常需要给参数赋值并让这种修改影响函数外部的变<br>量。在Python中，没法直接这样做，只能修改参数对象本身。</p>\n<h4 id=\"收集参数\"><a href=\"#收集参数\" class=\"headerlink\" title=\"收集参数\"></a>收集参数</h4><p>参数前面的星号将提供的所有值都放在一个元组中，也就是将这些值收集起来。这样的行为<br>我们在5.2.1节见过：赋值时带星号的变量收集多余的值。它收集的是列表而不是元组中多余的值，<br>但除此之外，这两种用法很像。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_params</span>(<span class=\"params\">*params</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(params)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_params_2</span>(<span class=\"params\">title, *params</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(title)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(params)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_2(<span class=\"string\">&#x27;Params:&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">Params:</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>与赋值时一样，带星号的参数也可放在其他位置（而不是最后），但不同的是，在这种情况<br>下你需要做些额外的工作：使用名称来指定后续参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">in_the_middle</span>(<span class=\"params\">x, *y, z</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>in_the_middle(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, z=<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> (<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>in_the_middle(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: in_the_middle() missing <span class=\"number\">1</span> required keyword-only argument: <span class=\"string\">&#x27;z&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 星号不会收集关键字参数。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_2(<span class=\"string\">&#x27;Hmm...&#x27;</span>, something=<span class=\"number\">42</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: print_params_2() got an unexpected keyword argument <span class=\"string\">&#x27;something&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要收集关键字参数，可使用两个星号。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">print_params_3</span>(<span class=\"params\">**params</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"built_in\">print</span>(params)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_3(x=<span class=\"number\">1</span>, y=<span class=\"number\">2</span>, z=<span class=\"number\">3</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;z&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">如你所见，这样得到的是一个字典而不是元组。可结合使用这些技术。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_params_4</span>(<span class=\"params\">x, y, z=<span class=\"number\">3</span>, *pospar, **keypar</span>):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pospar)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(keypar)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其效果与预期的相同。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_4(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, foo=<span class=\"number\">1</span>, bar=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\">(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;bar&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_4(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\">()</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了抽象的基本知识以及函数。</p>\n<ul>\n<li>抽象：抽象是隐藏不必要细节的艺术。通过定义处理细节的函数，可让程序更抽象。</li>\n<li>函数定义：函数是使用def语句定义的。函数由语句块组成，它们从外部接受值（参数），<br>并可能返回一个或多个值（计算结果）。</li>\n<li>参数：函数通过参数（调用函数时被设置的变量）接收所需的信息。在Python中，参数有<br>两类：位置参数和关键字参数。通过给参数指定默认值，可使其变成可选的。</li>\n<li>作用域：变量存储在作用域（也叫命名空间）中。在Python中，作用域分两大类：全局作<br>用域和局部作用域。作用域可以嵌套。</li>\n<li>递归：函数可调用自身，这称为递归。可使用递归完成的任何任务都可使用循环来完成，<br>但有时使用递归函数的可读性更高。</li>\n<li>函数式编程： Python提供了一些函数式编程工具，其中包括lambda表达式以及函数map、<br>filter和reduce。</li>\n</ul>\n<h2 id=\"再谈抽象\"><a href=\"#再谈抽象\" class=\"headerlink\" title=\"再谈抽象\"></a>再谈抽象</h2><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","more":"<p>虽然之前学过不少 python 的知识，但是还是没有系统的学习过一些基础知识，补一下。<br>参考书 <a href=\"https://baike.baidu.com/item/Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89/49977580?fr=aladdin\">Python 基础教程（第 3 版）_百度百科</a></p>\n<p>只记一下易错点和之前不会的点吧，个人向。</p>\n<h2 id=\"快速上手：基础知识\"><a href=\"#快速上手：基础知识\" class=\"headerlink\" title=\"快速上手：基础知识\"></a>快速上手：基础知识</h2><h3 id=\"数和表达式\"><a href=\"#数和表达式\" class=\"headerlink\" title=\"数和表达式\"></a>数和表达式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取余</span></span><br><span class=\"line\"><span class=\"number\">10</span> % <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 整除</span></span><br><span class=\"line\"><span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 幂运算</span></span><br><span class=\"line\"><span class=\"number\">2</span> ** <span class=\"number\">3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">10</span> // -<span class=\"number\">3</span></span><br><span class=\"line\">-<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>-<span class=\"number\">10</span> // <span class=\"number\">3</span></span><br><span class=\"line\">-<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>-<span class=\"number\">10</span> // -<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>对于整除运算，需要明白的一个重点是它向下圆整结果。因此在结果为负数的情况下，圆整后将离 0 更远。这意味着对于-10 &#x2F;&#x2F; 3， 将向下圆整到-4，而不是向上圆整到-3。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> ** <span class=\"number\">3</span>     <span class=\"comment\"># pow(2, 3)</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>-<span class=\"number\">3</span> ** <span class=\"number\">2</span></span><br><span class=\"line\">-<span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(-<span class=\"number\">3</span>) ** <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>请注意，乘方运算符的优先级比求负（单目减）高，因此<code>-3**2</code>等价于<code>-(3**2)</code>。如果你要计<br>算的是<code>(-3)**2</code>，必须明确指出。</p>\n<p>十六进制、八进制和二进制</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x10</span> <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"number\">0o10</span> <span class=\"comment\"># 八进制</span></span><br><span class=\"line\"><span class=\"number\">0b10</span> <span class=\"comment\"># 二进制</span></span><br></pre></td></tr></table></figure>\n\n<p>这些表示法都以 0 打头。</p>\n<h3 id=\"获取用户输入\"><a href=\"#获取用户输入\" class=\"headerlink\" title=\"获取用户输入\"></a>获取用户输入</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">input</span>(<span class=\"string\">&quot;The meaning of life: &quot;</span>)</span><br><span class=\"line\">The meaning of life: <span class=\"number\">42</span></span><br><span class=\"line\"><span class=\"string\">&#x27;42&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里在交互式解释器中执行了第一行（input(…)），它打印字符串”The meaning of life:”，<br>提示用户输入相应的信息。我输入 42 并按回车。这个数被 input（以文本或字符串的方式）返回， 并在最后一行被自动打印出来。</p>\n<h3 id=\"cmath-和复数\"><a href=\"#cmath-和复数\" class=\"headerlink\" title=\"cmath 和复数\"></a>cmath 和复数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"number\">1</span> + <span class=\"number\">3j</span>) * (<span class=\"number\">9</span> + <span class=\"number\">4j</span>)</span><br><span class=\"line\">(-<span class=\"number\">3</span> + <span class=\"number\">31j</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"保存并执行程序\"><a href=\"#保存并执行程序\" class=\"headerlink\" title=\"保存并执行程序\"></a>保存并执行程序</h3><p>在有些情况下，你希望能够像执行其他程序（如 Web 浏览器或文本编辑器）一样执行 Python 脚本，而无需显式地使用 Python 解释器。</p>\n<p>UNIX 提供了实现这种目标的标准方式：让脚本的第一 行以字符序列#!（称为 pound bang 或 shebang）开始，并在它后面指定用于对脚本进行解释的程序 （这里是 Python）的绝对路径。</p>\n<p>即便你对这一点不太明白，只需将下面的代码作为脚本的第一行， 就可在 UNIX 中轻松运行脚本：<br><code>#!/usr/bin/env python </code><br>不管 Python 库位于什么地方，这都将让你能够像运行普通程序一样运行脚本。<br>如果你安装了多个版本的 Python，可用更具体的可执行文件名（如 python3）替换 python。<br>要像普通程序一样运行脚本，还必须将其变成可执行的：<br><code>$ chmod a+x hello.py </code><br>现在，可以像下面这样来运行它（假定当前目录包含在执行路径中）：<br><code>$ hello.py </code><br>如果这不管用，请尝试使用<code>./hello.py</code>，这在当前目录（.）未包含在执行路径中时也管用（负责的系统管理员会告诉你执行路径是什么）。</p>\n<p>如果你愿意，可对文件进行重命名并删除扩展名<code>.py</code>，使其看起来更像普通程序。</p>\n<p>如果双击会如何呢 在 Windows 中，扩展名<code>.py</code>是让脚本像普通程序一样的关键所在。请尝试双击前一节保存的文件<code>hello.py</code>。如果正确地安装了<code>Python</code>，这将打开一个 DOS 窗口，其中包含提示信息 What is your name?。然而，这样运行程序存在一个问题：输入名字后，程序窗口将立即关闭，你根本来不及 看清结果。这是因为程序结束后窗口将立即关闭。尝试修改脚本，在末尾添加如下代码行： <code>input(&quot;Press &lt;enter&gt;&quot;)</code> 现在运行这个程序并输入名字后，DOS 窗口将包含如下内容：</p>\n<p><code>What is your name? Gumby Hello, Gumby! Press &lt;enter&gt;</code></p>\n<p>等你按回车键后，窗口将立即关闭，因为程序结束了。</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hello, world!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，有一点可能让你颇感意外：Python 在打印字符串时，用单引号将其括起，而 我们使用的是双引号。这有什么差别吗？其实没有任何差别。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Let&#x27;s go!&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Let&#x27;s go!&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;&quot;Hello, world!&quot; she said&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;Hello, world!&quot; she said&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二个字符串包含双引号，因此必须使用单引号将整个字符串括起，原因和前面一样。实际上，并非必须这样做（这样做只是出于方便考虑）。可使用反斜杠（\\）对引号进行转义，如 下所示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;Let\\&#x27;s go!&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Let&#x27;s go!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Python 打印所有的字符串时，都用引号将其括起。你可能通过前面的示例发现了这一点。</p>\n<p>因为 Python 打印值时，保留其在代码中的样子，而不是你希望用户看到的样子。但如果你使用 print，结果将不同。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello,\\nworld!&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Hello,\\nworld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello,\\nworld!&quot;</span>)</span><br><span class=\"line\">Hello,</span><br><span class=\"line\">world!</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过两种不同的机制将值转换成了字符串。你可通过使用函数 str 和 repr① 直接使用这两种机制。使用 str 能以合理的方式将值转换为用户能够看懂的字符串。例如，尽可能将特殊字符编码 转换为相应的字符。然而，使用 repr 时，通常会获得值的合法 Python 表达式表示</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">repr</span>(<span class=\"string\">&quot;Hello,\\nworld!&quot;</span>))</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello,\\nworld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(<span class=\"string\">&quot;Hello,\\nworld!&quot;</span>))</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>长字符串</li>\n</ol>\n<p>要表示很长的字符串（跨越多行的字符串），可使用三引号（而不是普通引号）。<br>print(‘’’This is a very long string. It continues here.<br>And it’s not over yet.<br>“Hello, world!” Still here.’’’)</p>\n<p>还可使用三个双引号，如”””like this”””。</p>\n<p>请注意，这让解释器能够识别表示字符串开始 和结束位置的引号，因此字符串本身可包含单引号和双引号，无需使用反斜杠进行转义</p>\n<p>三个引号也是注释的一种写法。</p>\n<ol start=\"2\">\n<li>原始字符串</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>path = <span class=\"string\">&#x27;C:\\nowhere&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>path</span><br><span class=\"line\"><span class=\"string\">&#x27;C:\\nowhere&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这好像没问题，但如果将其打印出来，就会出现问题。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(path)</span><br><span class=\"line\">C:</span><br><span class=\"line\">owhere</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 原始字符串用前缀r表示</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">r&#x27;C:\\nowhere&#x27;</span>)</span><br><span class=\"line\">C:\\nowhere</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#另外，原始字符串不能以单个反斜杠结尾。换而言之，原始字符串的最后一个字符不能是反斜杠，除非你对其进行转义（但进行转义时，用于转义的反斜杠也将是字符串的一部分）。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">r&#x27;C:\\Program Files\\foo\\bar&#x27;</span> <span class=\"string\">&#x27;\\\\&#x27;</span>)</span><br><span class=\"line\">C:\\Program Files\\foo\\bar\\</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Unicode、bytes 和 bytearray</li>\n</ol>\n<p>每个 Unicode 字符都用一个码点（code point）表示，而码点是 Unicode 标准给每个字符指定的数字。</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>“\\u00C6”<br>‘Æ’<br>“\\U0001F60A”<br>‘☺ ‘<br>“This is a cat: \\N{Cat}”<br>‘This is a cat: ‘</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<div class='spoiler collapsed'>\n    <div class='spoiler-title'>\n        篇幅较长 点击展开\n    </div>\n    <div class='spoiler-content'>\n        <p>Unicode 的理念很简单，却带来了一些挑战，其中之一是编码问题。在内存和磁盘中，所有对象都是以二进制数字（0 和 1）表示的（这些数字每 8 个为一组，即 1 字节），字符串也不例外。 在诸如 C 等编程语言中，这些字节完全暴露，而字符串不过是字节序列而已。为与 C 语言互操作 以及将文本写入文件或通过网络套接字发送出去，Python 提供了两种类似的类型：不可变的 bytes 和可变的 bytearray。如果需要，可直接创建 bytes 对象（而不是字符串），方法是使用前缀 b：</p>\n<p><code>&gt;&gt;&gt; b&#39;Hello, world!&#39; b&#39;Hello, world!&#39; </code></p>\n<p>然而，1 字节只能表示 256 个不同的值，离 Unicode 标准的要求差很远。Python bytes 字面量只支持 ASCII 标准中的 128 个字符，而余下的 128 个值必须用转义序列表示，如\\xf0 表示十六进制值 0xf0（即 240）。 唯一的差别好像在于可用的字母表规模，但实际上并非完全如此。乍一看，好像 ASCII 和 Unicode 定义的都是非负整数和字符之间的映射，但存在细微的差别：Unicode 码点是使用整数定义的，而 ASCII 字符是使用对应的数及其二进制编码定义的。</p>\n<p>这一点好像无关紧要，原因之一是 整数 0 ～ 255 和 8 位二进制数之间的映射是固定的，几乎没有任何机动空间。问题是超过 1 字节后， 情况就不那么简单了：直接将每个码点表示为相应的二进制数可能不再可行。这是因为不仅存在字节顺序的问题（即便对整数值进行编码，也会遇到这样的问题），而且还可能浪费空间：如果对于每个码点都使用相同数量的字节进行编码，就必须考虑到文本可能包含安那托利亚象形文字 或皇家亚兰字母。有一种 Unicode 编码标准是基于这种考虑的，它就是 UTF-32（32 位统一编码转换格式，Unicode Transformation Format 32 bits），但如果你主要处理的是使用互联网上常见语言书写的文本，那么使用这种编码标准将很浪费空间。</p>\n<p>然而，有一种非常巧妙的替代方式：不使用全部 32 位，而是使用变长编码，即对于不同的字符，使用不同数量的字节进行编码。这种编码方式主要出自计算机先锋 Kenneth Thompson 之手。 通过使用这种编码，可节省占用的空间，就像摩尔斯码使用较少的点和短线表示常见的字母，从 而减少工作量一样 ①。</p>\n<p>具体地说，进行单字节编码时，依然使用 ASCII 编码，以便与较旧的系统兼容；但对于不在这个范围内的字符，使用多个字节（最多为 6 个）进行编码。</p>\n<p>下面来使用 ASCII、 UTF-8 和 UTF-32 编码将字符串转换为 bytes。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;Hello, world!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span>.encode(<span class=\"string\">&quot;UTF-8&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;Hello, world!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hello, world!&quot;</span>.encode(<span class=\"string\">&quot;UTF-32&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xff\\xfe\\x00\\x00H\\x00\\x00\\x00e\\x00\\x00\\x00l\\x00\\x00\\x00l\\x00\\x00\\x00o\\x00\\x00\\x00,\\x00\\ x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00o\\x00\\x00\\x00r\\x00\\x00\\x00l\\x00\\x00\\x00d\\x00\\x00\\x00!\\x00\\ x00\\x00&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>从中可知，使用前两种编码的结果相同，但使用最后一种编码的结果长得多。再来看一个 示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">&quot;How long is this?&quot;</span>.encode(<span class=\"string\">&quot;UTF-8&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">&quot;How long is this?&quot;</span>.encode(<span class=\"string\">&quot;UTF-32&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">72</span></span><br></pre></td></tr></table></figure>\n\n<p>只要字符串包含较怪异的字符，ASCII 和 UTF-8 之间的差别便显现出来了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>) Traceback (most recent call last): ...</span><br><span class=\"line\"></span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">&#x27;ascii&#x27;</span> codec can<span class=\"string\">&#x27;t encode character &#x27;</span>\\xe6<span class=\"string\">&#x27; in position 1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>\n\n<p>斯堪的纳维亚字母没有对应的 ASCII 编码。如果必须使用 ASCII 编码（这样的情况肯定会遇到），可向 encode 提供另一个实参，告诉它如何处理错误。这个参数默认为 strict，但可将其指定为其他值，以忽略或替换不在 ASCII 表中的字符。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;Hll, wrld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;replace&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H?ll?, w?rld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;backslashreplace&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H\\\\xe6ll\\\\xe5, w\\\\xf8rld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode(<span class=\"string\">&quot;ASCII&quot;</span>, <span class=\"string\">&quot;xmlcharrefreplace&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H&amp;#230;ll&amp;#229;, w&amp;#248;rld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>几乎在所有情况下，都最好使用 UTF-8。事实上，它也是默认使用的编码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Hællå, wørld!&quot;</span>.encode()</span><br><span class=\"line\"><span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这相比于 Hello, world!，编码结果要长些；但使用 UTF-32 编码时，结果一样长。 可将字符串编码为 bytes，同样也可将 bytes 解码为字符串。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span>.decode()</span><br><span class=\"line\"><span class=\"string\">&#x27;Hællå, wørld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>与前面一样，默认编码也是 UTF-8。你可指定其他编码，但如果指定的编码不正确，将出现错误消息或得到一堆乱码。bytes 对象本身并不知道使用的是哪种编码，因此你必须负责跟踪这 一点。可不使用方法 encode 和 decode，而直接创建 bytes 和 str（即字符串）对象，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bytes</span>(<span class=\"string\">&quot;Hællå, wørld!&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">str</span>(<span class=\"string\">b&#x27;H\\xc3\\xa6ll\\xc3\\xa5, w\\xc3\\xb8rld!&#x27;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Hællå, wørld!&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这种方法更通用一些，在你不知道类似于字符串或 bytes 的对象属于哪个类时，使用这种方法也更管用。</p>\n<p>一个通用规则是，不要做过于严格的假设。 编码和解码的最重要用途之一是，将文本存储到磁盘文件中。然而，Python 提供的文件读写机制通常会替你完成这方面的工作！</p>\n<p>只要文件使用的是 UTF-8 编码，就无需操心编码和解码的问 题。</p>\n<p>但如果原本正常的文本变成了乱码，就说明文件使用的可能是其他编码。</p>\n<p>在这种情况下，对 导致这种问题的原因有所了解将大有裨益。</p>\n<p>如果你想更详细地了解 Python 中的 Unicode，请参阅 在线文档中有关该主题的 HOWTO 部分 ①。</p>\n<p>注意 源代码也将被编码，且默认使用的也是 UTF-8 编码。如果你想使用其他编码（例如，如果 你使用的文本编辑器使用其他编码来存储源代码），可使用特殊的注释来指定。 # -*- coding: encoding name -*请将其中的 encoding name 替换为你要使用的编码（大小写都行），如 utf-8 或 latin-1。<br>最后，Python 还提供了 bytearray，它是 bytes 的可变版。从某种意义上说，它就像是可修改 的字符串——常规字符串是不能修改的。然而，bytearray 其实是为在幕后使用而设计的，因此 作为类字符串使用时对用户并不友好。例如，要替换其中的字符，必须将其指定为 0 ～ 255 的值。 因此，要插入字符，必须使用 ord 获取其序数值（ordinal value）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"built_in\">bytearray</span>(<span class=\"string\">b&quot;Hello!&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x[<span class=\"number\">1</span>] = <span class=\"built_in\">ord</span>(<span class=\"string\">b&quot;u&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"built_in\">bytearray</span>(<span class=\"string\">b&#x27;Hullo!&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n    </div>\n</div>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍的内容很多，先来看看你都学到了什么，再接着往下讲。</p>\n<ul>\n<li>算法：算法犹如菜谱，告诉你如何完成特定的任务。从本质上说，编写计算机程序就是 使用计算机能够理解的语言（如 Python）描述一种算法。这种对机器友好的描述被称为程序，主要由表达式和语句组成。</li>\n<li>表达式：表达式为程序的一部分，结果为一个值。例如，2 + 2 就是一个表达式，结果为 4。简单表达式是使用运算符（如+或%）和函数（如 pow）将字面值（如 2 或”Hello”）组 合起来得到的。通过组合简单的表达式，可创建复杂的表达式，如(2 + 2) *(3 - 1)。表 达式还可能包含变量。</li>\n<li>变量：变量是表示值的名称。通过赋值，可将新值赋给变量，如 x &#x3D; 2。赋值是一种语句。</li>\n<li><ul>\n<li>语句：语句是让计算机执行特定操作的指示。这种操作可能是修改变量（通过赋值）、将 信息打印到屏幕上（如 print(“Hello, world!”)）、导入模块或执行众多其他任务。</li>\n</ul>\n</li>\n<li>函数：Python 函数类似于数学函数，它们可能接受参数，并返回结果（在第 6 章学习编写 自定义函数时，你将发现函数实际上可以在返回前做很多事情）。</li>\n<li>模块：模块是扩展，可通过导入它们来扩展 Python 的功能。例如，模块 math 包含多个很有 用的函数。</li>\n<li>程序：你通过练习学习了如何编写、保存和运行 Python 程序。 - 字符串：字符串非常简单。它们其实就是一段文本，其中的字符是用 Unicode 码点表示的。 然而，对于字符串，需要学习的知识有很多。本章介绍了很多表示字符串的方式，第 3 章 将介绍众多字符串用法。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">abs</span>(number)                             <span class=\"comment\"># 返回指定数的绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">bytes</span>(string, encoding[, errors])       <span class=\"comment\"># 对指定的字符串进行编码，并以指定的方式处理错误</span></span><br><span class=\"line\">cmath.sqrt(number)                      <span class=\"comment\"># 返回平方根；可用于负数</span></span><br><span class=\"line\"><span class=\"built_in\">float</span>(<span class=\"built_in\">object</span>)                           <span class=\"comment\"># 将字符串或数字转换为浮点数</span></span><br><span class=\"line\"><span class=\"built_in\">help</span>([<span class=\"built_in\">object</span>])                          <span class=\"comment\"># 提供交互式帮助</span></span><br><span class=\"line\"><span class=\"built_in\">input</span>(prompt)                           <span class=\"comment\"># 以字符串的方式获取用户输入</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>(<span class=\"built_in\">object</span>)                             <span class=\"comment\"># 将字符串或数转换为整数</span></span><br><span class=\"line\">math.ceil(number)                       <span class=\"comment\"># 以浮点数的方式返回向上圆整的结果</span></span><br><span class=\"line\">math.floor(number)                      <span class=\"comment\"># 以浮点数的方式返回向下圆整的结果</span></span><br><span class=\"line\">math.sqrt(number)                       <span class=\"comment\"># 返回平方根；不能用于负数</span></span><br><span class=\"line\"><span class=\"built_in\">pow</span>(x, y[, z])                          <span class=\"comment\"># 返回x的y次方对z求模的结果</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">object</span>, ...)                      <span class=\"comment\"># 将提供的实参打印出来，并用空格分隔</span></span><br><span class=\"line\"><span class=\"built_in\">repr</span>(<span class=\"built_in\">object</span>)                            <span class=\"comment\"># 返回一个对象的字符串表示形式</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(number[, ndigits])                <span class=\"comment\"># 四舍五入为指定的精度，正好为5时舍入到偶数</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>(<span class=\"built_in\">object</span>)                             <span class=\"comment\"># 将指定的值转换为字符串。用于转换bytes时，可指定编码和错误处理方式</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表和元组\"><a href=\"#列表和元组\" class=\"headerlink\" title=\"列表和元组\"></a>列表和元组</h2><p>索引 <code>tag[0]</code></p>\n<p>切片 <code>tag[32:-4]</code></p>\n<h3 id=\"更大的步长\"><a href=\"#更大的步长\" class=\"headerlink\" title=\"更大的步长\"></a>更大的步长</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在这个示例中，指定了另一个数。你可能猜到了，这显式地指定了步长。如果指定的步长大于<span class=\"number\">1</span>，将跳过一些元素。例如，步长为<span class=\"number\">2</span>时，将从起点和终点之间每隔一个元素</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">0</span>:<span class=\"number\">10</span>:<span class=\"number\">1</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">提取一个元素显式地指定步长时，也可使用前述简写。例如，要从序列中每隔<span class=\"number\">3</span>个元素提取<span class=\"number\">1</span>个，只需提供步长<span class=\"number\">4</span>即可</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">0</span>:<span class=\"number\">10</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">numbers[<span class=\"number\">3</span>:<span class=\"number\">6</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">[<span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">当然，步长不能为<span class=\"number\">0</span>，否则无法向前移动，但可以为负数，即从右向左提取元素。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"乘法\"><a href=\"#乘法\" class=\"headerlink\" title=\"乘法\"></a>乘法</h3><p>将序列与数 x 相乘时，将重复这个序列 x 次来创建一个新序列：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;python&#x27;</span> * <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"string\">&#x27;pythonpythonpythonpythonpython&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[<span class=\"number\">42</span>] * <span class=\"number\">10</span></span><br><span class=\"line\">[<span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>, <span class=\"number\">42</span>]</span><br></pre></td></tr></table></figure>\n\n<p>None、空列表和初始化</p>\n<p>空列表是使用不包含任何内容的两个方括号表示的。如果要创建一个可包含 10 个元素的列表，但没有任何有用的内容，可像前面那样使用<code>[42]*10</code>。但更准确的做法是使用<code>[0]*10</code>，这将创建一个包含 10 个零的列表。然而，在有些情况下，你可能想使用表示“什么都没有”的值，如表示还没有在列表中添加任何内容。在这种情况下，可使用 None。在 Python 中， None 表示什么都没有。因此，要将列表的长度初始化为 10，可像下面这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sequence = [<span class=\"literal\">None</span>] * <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sequence</span><br><span class=\"line\">[<span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>, <span class=\"literal\">None</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列表：-Python-的主力\"><a href=\"#列表：-Python-的主力\" class=\"headerlink\" title=\"列表： Python 的主力\"></a>列表： Python 的主力</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">[<span class=\"string\">&#x27;H&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>要将字符列表（如前述代码中的字符列表）转换为字符串，可使用下面的表达式：<br><code>&#39;&#39;.join(somelist)</code></p>\n<ol>\n<li>给切片赋值<br>切片是一项极其强大的功能，而能够给切片赋值让这项功能显得更加强大。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;Perl&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\">[<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name[<span class=\"number\">2</span>:] = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;ar&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\">[<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>从上述代码可知，可同时给多个元素赋值。你可能认为，这有什么大不了的，分别给每个元<br>素赋值不是一样的吗？确实如此，但通过使用切片赋值，可将切片替换为长度与其不同的序列。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;Perl&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name[<span class=\"number\">1</span>:] = <span class=\"built_in\">list</span>(<span class=\"string\">&#x27;ython&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</span><br><span class=\"line\">[<span class=\"string\">&#x27;P&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;t&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>使用切片赋值还可在不替换原有元素的情况下插入新元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers = [<span class=\"number\">1</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">1</span>:<span class=\"number\">1</span>] = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我“替换”了一个空切片，相当于插入了一个序列。你可采取相反的措施来删除切片。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers[<span class=\"number\">1</span>:<span class=\"number\">4</span>] = []</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>numbers</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>]</span><br></pre></td></tr></table></figure>\n\n<p>你可能猜到了，上述代码与 del numbers[1:4]等效。现在，你可自己尝试执行步长<strong>不为 1（乃至为负）</strong>的切片赋值了。</p>\n<h3 id=\"列表方法\"><a href=\"#列表方法\" class=\"headerlink\" title=\"列表方法\"></a>列表方法</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">append()</span><br><span class=\"line\">clear()</span><br><span class=\"line\">copy()</span><br><span class=\"line\">count()</span><br><span class=\"line\">extend()</span><br><span class=\"line\">index()</span><br><span class=\"line\">insert()</span><br><span class=\"line\">pop()  <span class=\"comment\">#从列尾删除一个元素，并返回该元素的值</span></span><br><span class=\"line\">remove()  <span class=\"comment\">#删除第一个值</span></span><br><span class=\"line\">reverse()  <span class=\"comment\">#反转列表中的元素</span></span><br><span class=\"line\">sort()  <span class=\"comment\">#排序列表中的元素 就地排序意味着对原来的列表进行修改，而不是创建一个新的列表。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy()\"></a>copy()</h4><p>方法 copy 复制列表。前面说过，常规复制只是将另一个名称关联到列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b[<span class=\"number\">1</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>要让 a 和 b 指向不同的列表，就必须将 b 关联到 a 的副本</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a.copy()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b[<span class=\"number\">1</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Extend\"><a href=\"#Extend\" class=\"headerlink\" title=\"Extend()\"></a>Extend()</h4><p>方法 extend 让你能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提<br>供给方法 extend。换而言之，你可使用一个列表来扩展另一个列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.extend(b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n\n<p>这可能看起来类似于拼接，但存在一个重要差别，那就是将修改被扩展的序列（这里是 a）。<br>在常规拼接中，情况是返回一个全新的序列。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a + b</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"sort-高级排序\"><a href=\"#sort-高级排序\" class=\"headerlink\" title=\"sort() 高级排序\"></a>sort() 高级排序</h4><p>方法 sort 接受两个可选参数： key 和 reverse。</p>\n<p>方法 sort 接受两个可选参数： key 和 reverse。这两个参数通常是按名称指定的，称为关键字<br>参数，将在第 6 章详细讨论。参数 key 类似于参数 cmp：你将其设置为一个用于排序的函数。然而，<br>不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个<br>键，再根据这些键对元素进行排序。因此，要根据长度对元素进行排序，可将参数 key 设置为函数 len。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = [<span class=\"string\">&#x27;aardvark&#x27;</span>, <span class=\"string\">&#x27;abalone&#x27;</span>, <span class=\"string\">&#x27;acme&#x27;</span>, <span class=\"string\">&#x27;add&#x27;</span>, <span class=\"string\">&#x27;aerate&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x.sort(key=<span class=\"built_in\">len</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[<span class=\"string\">&#x27;add&#x27;</span>, <span class=\"string\">&#x27;acme&#x27;</span>, <span class=\"string\">&#x27;aerate&#x27;</span>, <span class=\"string\">&#x27;abalone&#x27;</span>, <span class=\"string\">&#x27;aardvark&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>对于另一个关键字参数 reverse，只需将其指定为一个真值（ True 或 False，将在第 5 章详细介绍），以指出是否要按相反的顺序对列表进行排序。</p>\n<h3 id=\"元组：不可修改的序列-元组\"><a href=\"#元组：不可修改的序列-元组\" class=\"headerlink\" title=\"元组：不可修改的序列 (元组)\"></a>元组：不可修改的序列 (元组)</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>(<span class=\"string\">&#x27;abc&#x27;</span>)</span><br><span class=\"line\">(<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">tuple</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>下面来回顾一下本章介绍的一些最重要的概念。</p>\n<ul>\n<li><p>序列：序列是一种数据结构，其中的元素带编号（编号从 0 开始）。列表、字符串和元组<br>都属于序列，其中列表是可变的（你可修改其内容），而元组和字符串是不可变的（一旦<br>创建，内容就是固定的）。要访问序列的一部分，可使用切片操作：提供两个指定切片起<br>始和结束位置的索引。要修改列表，可给其元素赋值，也可使用赋值语句给切片赋值。</p>\n</li>\n<li><p>成员资格：要确定特定的值是否包含在序列（或其他容器）中，可使用运算符 in。将运<br>算符 in 用于字符串时情况比较特殊——这样可查找子串。</p>\n</li>\n<li><p>方法：一些内置类型（如列表和字符串，但不包括元组）提供了很多有用的方法。方法<br>有点像函数，只是与特定的值相关联。方法是面向对象编程的一个重要方面，这将在第 7<br>章介绍。</p>\n</li>\n</ul>\n<h2 id=\"字符串-1\"><a href=\"#字符串-1\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"设置字符串的格式-精简版\"><a href=\"#设置字符串的格式-精简版\" class=\"headerlink\" title=\"设置字符串的格式 精简版\"></a>设置字符串的格式 精简版</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># from c</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">format</span> = <span class=\"string\">&quot;Hello, s. s enough for ya?&quot;</span> % %</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values = (<span class=\"string\">&#x27;world&#x27;</span>, <span class=\"string\">&#x27;Hot&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">format</span> values %</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello, world. Hot enough for ya?&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># from shell</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> Template</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl = Template(<span class=\"string\">&quot;Hello, $who! $what enough for ya?&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl.substitute(who=<span class=\"string\">&quot;Mars&quot;</span>, what=<span class=\"string\">&quot;Dusty&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Hello, Mars! Dusty enough for ya?&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># new and improved</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;&#125;, &#123;&#125; and &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;first&quot;</span>, <span class=\"string\">&quot;second&quot;</span>, <span class=\"string\">&quot;third&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;first, second and third&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;0&#125;, &#123;1&#125; and &#123;2&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;first&quot;</span>, <span class=\"string\">&quot;second&quot;</span>, <span class=\"string\">&quot;third&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;first, second and third&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;3&#125; &#123;0&#125; &#123;2&#125; &#123;1&#125; &#123;3&#125; &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;be&quot;</span>, <span class=\"string\">&quot;not&quot;</span>, <span class=\"string\">&quot;or&quot;</span>, <span class=\"string\">&quot;to&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;to be or not to be&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> pi</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;name&#125; is approximately &#123;value:.2f&#125;.&quot;</span>.<span class=\"built_in\">format</span>(value=pi, name=<span class=\"string\">&quot;π &quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;π is approximately 3.14.&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后，在Python 3.6中，如果变量与替换字段同名，还可使用一种简写。在这种情况下，可使用f字符串——在字符串前面加上f。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> e</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">f&quot;Euler&#x27;s constant is roughly <span class=\"subst\">&#123;e&#125;</span>.&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;Euler&#x27;s constant is roughly 2.718281828459045.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Euler&#x27;s constant is roughly &#123;e&#125;.&quot;</span>.<span class=\"built_in\">format</span>(e=e)</span><br><span class=\"line\"><span class=\"string\">&quot;Euler&#x27;s constant is roughly 2.718281828459045.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置字符串的格式-完整版\"><a href=\"#设置字符串的格式-完整版\" class=\"headerlink\" title=\"设置字符串的格式 完整版\"></a>设置字符串的格式 完整版</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;&#123;ceci n&#x27;est pas une replacement field&#125;&#125;&quot;</span>.<span class=\"built_in\">format</span>()</span><br><span class=\"line\"><span class=\"string\">&quot;&#123;ceci n&#x27;est pas une replacement field&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在格式字符串中，最激动人心的部分为替换字段。替换字段由如下部分组成，其中每个部分<br>都是可选的。</p>\n<ul>\n<li>字段名：索引或标识符，指出要设置哪个值的格式并使用结果来替换该字段。除指定值<br>外，还可指定值的特定部分，如列表的元素。</li>\n<li>转换标志：跟在叹号后面的单个字符。当前支持的字符包括 r（表示 repr）、 s（表示 str）<br>和 a（表示 ascii）。如果你指定了转换标志，将不使用对象本身的格式设置机制，而是使<br>用指定的函数将对象转换为字符串，再做进一步的格式设置。</li>\n<li>格式说明符：跟在冒号后面的表达式（这种表达式是使用微型格式指定语言表示的）。格<br>式说明符让我们能够详细地指定最终的格式，包括格式类型（如字符串、浮点数或十六<br>进制数），字段宽度和数的精度，如何显示符号和千位分隔符，以及各种对齐和填充方式。<br>下面详细介绍其中的一些要素。</li>\n</ul>\n<h4 id=\"替换字段名\"><a href=\"#替换字段名\" class=\"headerlink\" title=\"替换字段名\"></a>替换字段名</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;foo&#125; &#123;&#125; &#123;bar&#125; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, bar=<span class=\"number\">4</span>, foo=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;3 1 4 2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;foo&#125; &#123;1&#125; &#123;bar&#125; &#123;0&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, bar=<span class=\"number\">4</span>, foo=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;3 2 4 1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fullname = [<span class=\"string\">&quot;Alfred&quot;</span>, <span class=\"string\">&quot;Smoketoomuch&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Mr &#123;name[1]&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=fullname)</span><br><span class=\"line\"><span class=\"string\">&#x27;Mr Smoketoomuch&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl = <span class=\"string\">&quot;The &#123;mod.__name__&#125; module defines the value &#123;mod.pi&#125; for π &quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tmpl.<span class=\"built_in\">format</span>(mod=math)</span><br><span class=\"line\"><span class=\"string\">&#x27;The math module defines the value 3.141592653589793 for π &#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本转换\"><a href=\"#基本转换\" class=\"headerlink\" title=\"基本转换\"></a>基本转换</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;&#123;pi!s&#125; &#123;pi!r&#125; &#123;pi!a&#125;&quot;</span>.<span class=\"built_in\">format</span>(pi=<span class=\"string\">&quot;π &quot;</span>))</span><br><span class=\"line\">π <span class=\"string\">&#x27;π &#x27;</span> <span class=\"string\">&#x27;\\u03c0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上述三个标志（ s、 r和a）指定分别使用str、 repr和ascii进行转换。</span></span><br><span class=\"line\"><span class=\"comment\"># 你还可指定要转换的值是哪种类型，更准确地说，是要将其视为哪种类型。例如，你可能提供一个整数，但将其作为小数进行处理。为此可在格式说明（即冒号后面）使用字符f（表示定点数）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;The number is &#123;num&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;The number is 42&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;The number is &#123;num:f&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;The number is 42.000000&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;The number is &#123;num:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;The number is 101010&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>表 3-1 字符串格式设置中的类型说明符</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>b</td>\n<td>将整数表示为二进制数</td>\n</tr>\n<tr>\n<td>c</td>\n<td>将整数解读为 Unicode 码点</td>\n</tr>\n<tr>\n<td>d</td>\n<td>将整数视为十进制数进行处理，这是整数默认使用的说明符</td>\n</tr>\n<tr>\n<td>e</td>\n<td>使用科学表示法来表示小数（用 e 来表示指数）</td>\n</tr>\n<tr>\n<td>E</td>\n<td>与 e 相同，但使用 E 来表示指数</td>\n</tr>\n<tr>\n<td>f</td>\n<td>将小数表示为定点数</td>\n</tr>\n<tr>\n<td>F</td>\n<td>与 f 相同，但对于特殊值（ nan 和 inf），使用大写表示</td>\n</tr>\n<tr>\n<td>g</td>\n<td>自动在定点表示法和科学表示法之间做出选择。这是默认用于小数的说明符，但在默认情况下至少有 1 位小数</td>\n</tr>\n<tr>\n<td>G</td>\n<td>与 g 相同，但使用大写来表示指数和特殊值</td>\n</tr>\n<tr>\n<td>n</td>\n<td>与 g 相同，但插入随区域而异的数字分隔符</td>\n</tr>\n<tr>\n<td>o</td>\n<td>将整数表示为八进制数</td>\n</tr>\n<tr>\n<td>s</td>\n<td>保持字符串的格式不变，这是默认用于字符串的说明符</td>\n</tr>\n<tr>\n<td>x</td>\n<td>将整数表示为十六进制数并使用小写字母</td>\n</tr>\n<tr>\n<td>X</td>\n<td>与 x 相同，但使用大写字母</td>\n</tr>\n<tr>\n<td>%</td>\n<td>将数表示为百分比值（乘以 100，按说明符 f 设置格式，再在后面加上%）</td>\n</tr>\n</tbody></table>\n<h5 id=\"宽度、精度和千位分隔符\"><a href=\"#宽度、精度和千位分隔符\" class=\"headerlink\" title=\"宽度、精度和千位分隔符\"></a>宽度、精度和千位分隔符</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#宽度是使用整数指定的，如下所示：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;num:10&#125;&quot;</span>.<span class=\"built_in\">format</span>(num=<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;         3&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;name:10&#125;&quot;</span>.<span class=\"built_in\">format</span>(name=<span class=\"string\">&quot;Bob&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Bob       &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#精度是使用小数指定的，如下所示：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Pi day is &#123;pi:.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(pi=pi)</span><br><span class=\"line\"><span class=\"string\">&#x27;Pi day is 3.14&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;pi:10.2f&#125;&quot;</span>.<span class=\"built_in\">format</span>(pi=pi)</span><br><span class=\"line\"><span class=\"string\">&#x27; 3.14&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:.5&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot;Guido van Rossum&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;Guido&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#　千位分隔符　　可使用逗号来指出你要添加千位分隔符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;One googol is &#123;:,&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">10</span>**<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;One googol is 10,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时指定其他格式设置元素时，这个逗号应放在宽度和表示精度的句点之间①。</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"符号、对齐和用-0-填充\"><a href=\"#符号、对齐和用-0-填充\" class=\"headerlink\" title=\"符号、对齐和用 0 填充\"></a>符号、对齐和用 0 填充</h5><p>在一栏中同时包含字符串和数时，你可能想修改默认对齐方式。在指定宽<br>度和精度的数前面，可添加一个标志。<br>这个标志可以是零、加号、减号或空格，其中零表示使用 0 来填充数字。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;&#123;:010.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi)</span><br><span class=\"line\"><span class=\"string\">&#x27;0000003.14&#x27;</span></span><br><span class=\"line\">要指定左对齐、右对齐和居中，可分别使用&lt;、 &gt;和^。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:&lt;10.2f&#125;\\n&#123;0:^10.2f&#125;\\n&#123;0:&gt;10.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi))</span><br><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\">  <span class=\"number\">3.14</span></span><br><span class=\"line\">     <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#可以使用填充字符来扩充对齐说明符，这样将使用指定的字符而不是默认的空格来填充。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:$^15&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"string\">&quot; WIN BIG &quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;$$$ WIN BIG $$$&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还有更具体的说明符=，它指定将填充字符放在符号和数字之间。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:10.2f&#125;\\n&#123;1:10.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\">   <span class=\"number\">3.14</span></span><br><span class=\"line\">   -<span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:10.2f&#125;\\n&#123;1:=10.2f&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\">   <span class=\"number\">3.14</span></span><br><span class=\"line\">-  <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果要给正数加上符号，可使用说明符+（将其放在对齐说明符后面），而不是默认的-。如果将符号说明符指定为空格，会在正数前面加上空格而不是+。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:-.2&#125;\\n&#123;1:-.2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi)) <span class=\"comment\">#默认设置</span></span><br><span class=\"line\"><span class=\"number\">3.1</span></span><br><span class=\"line\">-<span class=\"number\">3.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0:+.2&#125;\\n&#123;1:+.2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\">+<span class=\"number\">3.1</span></span><br><span class=\"line\">-<span class=\"number\">3.1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;&#123;0: .2&#125;\\n&#123;1: .2&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pi, -pi))</span><br><span class=\"line\"> <span class=\"number\">3.1</span></span><br><span class=\"line\">-<span class=\"number\">3.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 需要介绍的最后一个要素是井号（ #）选项，你可将其放在符号说明符和宽度之间（如果指定了这两种设置）。这个选项将触发另一种转换方式，转换细节随类型而异。例如，对于二进制、八进制和十六进制转换，将加上一个前缀。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;101010&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:#b&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0b101010&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:g&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;42&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;&#123;:#g&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;42.0000&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 根据指定的宽度打印格式良好的价格列表</span></span><br><span class=\"line\">width = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Please enter width: &#x27;</span>))</span><br><span class=\"line\">price_width = <span class=\"number\">10</span></span><br><span class=\"line\">item_width = width - price_width</span><br><span class=\"line\">header_fmt = <span class=\"string\">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;&#125;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(item_width, price_width)</span><br><span class=\"line\">fmt = <span class=\"string\">&#x27;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;.2f&#125;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(item_width, price_width)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=&#x27;</span> * width)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(header_fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Item&#x27;</span>, <span class=\"string\">&#x27;Price&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * width)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Apples&#x27;</span>, <span class=\"number\">0.4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Pears&#x27;</span>, <span class=\"number\">0.5</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Cantaloupes&#x27;</span>, <span class=\"number\">1.92</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Dried Apricots (16 oz.)&#x27;</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fmt.<span class=\"built_in\">format</span>(<span class=\"string\">&#x27;Prunes (4 lbs.)&#x27;</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;=&#x27;</span> * width)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># result</span></span><br><span class=\"line\"><span class=\"comment\"># 这个程序的运行情况类似于下面这样：</span></span><br><span class=\"line\">Please enter width: <span class=\"number\">35</span></span><br><span class=\"line\">===================================</span><br><span class=\"line\">Item                          Price</span><br><span class=\"line\">-----------------------------------</span><br><span class=\"line\">Apples                         <span class=\"number\">0.40</span></span><br><span class=\"line\">Pears                          <span class=\"number\">0.50</span></span><br><span class=\"line\">Cantaloupes                    <span class=\"number\">1.92</span></span><br><span class=\"line\">Dried Apricots (<span class=\"number\">16</span> oz.)        <span class=\"number\">8.00</span></span><br><span class=\"line\">Prunes (<span class=\"number\">4</span> lbs.)               <span class=\"number\">12.00</span></span><br><span class=\"line\">===================================</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>套娃哇！！666</p>\n<h3 id=\"字符串方法\"><a href=\"#字符串方法\" class=\"headerlink\" title=\"字符串方法\"></a>字符串方法</h3><p>字符串的方法太多了，这里只介绍一些最有用的。完整的字符串方法清单请参阅附录 B。这<br>里描述字符串的方法时，将列出其他相关的方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 字符串的方法</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.center(width[, fillchar]) <span class=\"comment\"># 方法center通过在两边添加填充字符（默认为空格）让字符串居中。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.find(sub[, start[, end]]) <span class=\"comment\"># 方法find返回子字符串sub在字符串中第一次出现的索引，如果没有找到，则返回-1。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.join(seq) <span class=\"comment\"># 方法join将序列seq中的元素用字符串str连接起来，返回连接后的字符串。 所合并序列的元素必须都是字符串</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.lower() <span class=\"comment\"># 方法lower将字符串转换为小写。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.upper() <span class=\"comment\"># 方法upper将字符串转换为大写。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.split(sep[, maxsplit]) <span class=\"comment\"># 方法split将字符串按照分隔符sep分割，返回分割后的字符串列表。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.strip([chars]) <span class=\"comment\"># 方法strip删除字符串左右两边的空格。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.replace(old, new[, <span class=\"built_in\">max</span>]) <span class=\"comment\"># 方法replace将字符串中的old子字符串替换为new子字符串，返回替换后的字符串。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.splitlines([keepends]) <span class=\"comment\"># 方法splitlines将字符串按照行分割，返回分割后的字符串列表。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.translate(table[, deletechars]) <span class=\"comment\"># 方法translate将字符串中的字符用表table中的对应字符替换，返回替换后的字符串。 方法translate与replace一样替换字符串的特定部分，但不同的是它只能进行单字符替换。这个方法的优势在于能够同时替换多个字符，因此效率比replace高。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isdigit() <span class=\"comment\"># 方法isdigit判断字符串是否只包含数字字符。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isalpha() <span class=\"comment\"># 方法isalpha判断字符串是否只包含字母字符。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isalnum() <span class=\"comment\"># 方法isalnum判断字符串是否只包含字母和数字字符。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.islower() <span class=\"comment\"># 方法islower判断字符串是否只包含小写字母。</span></span><br><span class=\"line\"><span class=\"built_in\">str</span>.isupper() <span class=\"comment\"># 方法isupper判断字符串是否只包含大写字母。 isalnum、 isalpha、 isdecimal、 isdigit、 isidentifier、 islower、 isnumeric、isprintable、 isspace、 istitle、 isupper。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"trnaslate\"><a href=\"#trnaslate\" class=\"headerlink\" title=\"trnaslate\"></a>trnaslate</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table = <span class=\"built_in\">str</span>.maketrans(<span class=\"string\">&#x27;cs&#x27;</span>, <span class=\"string\">&#x27;kz&#x27;</span>)</span><br><span class=\"line\">如果愿意，可查看转换表的内容，但你看到的只是Unicode码点之间的映射。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>table</span><br><span class=\"line\">&#123;<span class=\"number\">115</span>: <span class=\"number\">122</span>, <span class=\"number\">99</span>: <span class=\"number\">107</span>&#125;</span><br><span class=\"line\">创建转换表后，就可将其用作方法translate的参数。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;this is an incredible test&#x27;</span>.translate(table)</span><br><span class=\"line\"><span class=\"string\">&#x27;thiz iz an inkredible tezt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了字符串的两个重要方面。</p>\n<ul>\n<li>字符串格式设置：求模运算符（ %）可用于将值合并为包含转换标志（如%s）的字符串，<br>这让你能够以众多方式设置值的格式，如左对齐或右对齐，指定字段宽度和精度，添加<br>符号（正号或负号）以及在左边填充 0 等。</li>\n<li>字符串方法：字符串有很多方法， 有些很有用（如 split 和 join），有些很少用到（如 istitle<br>和 capitalize）。</li>\n</ul>\n<h2 id=\"字典-当索引行不通时\"><a href=\"#字典-当索引行不通时\" class=\"headerlink\" title=\"字典 当索引行不通时\"></a>字典 当索引行不通时</h2><p><code>phonebook = &#123;&#39;Alice&#39;: &#39;2341&#39;, &#39;Beth&#39;: &#39;9102&#39;, &#39;Cecil&#39;: &#39;3258&#39;&#125;</code></p>\n<p>他的定义有点像结构体</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>items = [(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;Gumby&#x27;</span>), (<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">42</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"built_in\">dict</span>(items)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">42</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Gumby&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;Gumby&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 还可使用关键字实参来调用这个函数，如下所示：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = <span class=\"built_in\">dict</span>(name=<span class=\"string\">&#x27;Gumby&#x27;</span>, age=<span class=\"number\">42</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;age&#x27;</span>: <span class=\"number\">42</span>, <span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;Gumby&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li>键的类型：字典中的键可以是整数，但并非必须是整数。字典中的键可以是任何不可变<br>的类型，如浮点数（实数）、字符串或元组。</li>\n<li>自动添加：即便是字典中原本没有的键，也可以给它赋值，这将在字典中创建一个新项。<br>然而，如果不使用 append 或其他类似的方法，就不能给列表中没有的元素赋值。</li>\n<li>成员资格：表达式 k in d（其中 d 是一个字典）查找的是键而不是值，而表达式 v in l（其<br>中 l 是一个列表）查找的是值而不是索引。这看似不太一致，但你习惯后就会觉得相当自<br>然。毕竟如果字典包含指定的键，检查相应的值就很容易。</li>\n</ul>\n<blockquote>\n<p>将字符串格式设置功能用于字典</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>phonebook</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;Beth&#x27;</span>: <span class=\"string\">&#x27;9102&#x27;</span>, <span class=\"string\">&#x27;Alice&#x27;</span>: <span class=\"string\">&#x27;2341&#x27;</span>, <span class=\"string\">&#x27;Cecil&#x27;</span>: <span class=\"string\">&#x27;3258&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&quot;Cecil&#x27;s phone number is &#123;Cecil&#125;.&quot;</span>.format_map(phonebook)</span><br><span class=\"line\"><span class=\"string\">&quot;Cecil&#x27;s phone number is 3258.&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字典方法\"><a href=\"#字典方法\" class=\"headerlink\" title=\"字典方法\"></a>字典方法</h3><p>clear：清空字典中的所有项。<br>copy：返回一个字典的浅复制，而不是深复制。deepcopy：返回一个字典的深复制。<br>fromkeys：从指定的键值对创建一个新的字典。<br>get：返回指定键的值，如果值不在字典中返回默认值。方法 get 为访问字典项提供了宽松的环境。通常，如果你试图访问字典中没有的项，将引发错误。使用 get 来访问不存在的键时，没有引发异常，而是返回 None。你可指定“默认”值，这样将返回你指定的值而不是 None。</p>\n<p>items：返回一个包含字典中的所有项的列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">&#x27;title&#x27;</span>: <span class=\"string\">&#x27;Python Web Site&#x27;</span>, <span class=\"string\">&#x27;url&#x27;</span>: <span class=\"string\">&#x27;http://www.python.org&#x27;</span>, <span class=\"string\">&#x27;spam&#x27;</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.items()</span><br><span class=\"line\">dict_items([(<span class=\"string\">&#x27;url&#x27;</span>, <span class=\"string\">&#x27;http://www.python.org&#x27;</span>), (<span class=\"string\">&#x27;spam&#x27;</span>, <span class=\"number\">0</span>), (<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;Python Web Site&#x27;</span>)])</span><br></pre></td></tr></table></figure>\n\n<p>返回值属于一种名为字典视图的特殊类型。字典视图可用于迭代（迭代将在第 5 章详细介绍）。<br>另外，你还可确定其长度以及对其执行成员资格检查。</p>\n<p>视图的一个优点是不复制，它们始终是底层字典的反映，即便你修改了底层字典亦如此。</p>\n<p>keys：返回一个包含字典中的所有键的列表。视图<br>pop：删除并返回字典中的一个项。<code>d.pop(&#39;x&#39;)</code><br>popitem：随机删除并返回字典中的一个项。<br>setdefault：如果键不存在于字典中，则为它设置默认值。<br>update：将另一个字典的项添加到字典中。<br>values：返回一个包含字典中的所有值的列表。视图</p>\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了如下内容。</p>\n<ul>\n<li>映射：映射让你能够使用任何不可变的对象（最常用的是字符串和元组）来标识其元素。<br>Python 只有一种内置的映射类型，那就是字典。</li>\n<li>将字符串格式设置功能用于字典：要对字典执行字符串格式设置操作，不能使用 format<br>和命名参数，而必须使用 format_map。</li>\n<li>字典方法：字典有很多方法，这些方法的调用方式与列表和字符串的方法相同。</li>\n</ul>\n<h2 id=\"条件、循环及其他语句\"><a href=\"#条件、循环及其他语句\" class=\"headerlink\" title=\"条件、循环及其他语句\"></a>条件、循环及其他语句</h2><h3 id=\"赋值魔法\"><a href=\"#赋值魔法\" class=\"headerlink\" title=\"赋值魔法\"></a>赋值魔法</h3><ol>\n<li>序列解包</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y, z = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y = y, x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(x, y)</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values = <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>values</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x, y, z = values</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可使用星号运算符（ *）来收集多余的值，这样无需确保值和变量的个数相同，如下例所示：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, *rest = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>rest</span><br><span class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可将带星号的变量放在其他位置。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name = <span class=\"string\">&quot;Albus Percival Wulfric Brian Dumbledore&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>first, *middle, last = name.split()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>middle</span><br><span class=\"line\">[<span class=\"string\">&#x27;Percival&#x27;</span>, <span class=\"string\">&#x27;Wulfric&#x27;</span>, <span class=\"string\">&#x27;Brian&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">赋值语句的右边可以是任何类型的序列，但带星号的变量最终包含的总是一个列表。在变量和值的个数相同时亦如此。</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, *b, c = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b, c</span><br><span class=\"line\">(<span class=\"string\">&#x27;a&#x27;</span>, [<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>链式赋值</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 链式赋值是一种快捷方式，用于将多个变量关联到同一个值。这有点像前一节介绍的并行赋值，但只涉及一个值：</span></span><br><span class=\"line\">x = y = somefunction()</span><br><span class=\"line\"><span class=\"comment\"># 上述代码与下面的代码等价：</span></span><br><span class=\"line\">y = somefunction()</span><br><span class=\"line\">x = y</span><br><span class=\"line\"><span class=\"comment\"># 请注意，这两条语句可能与下面的语句不等价：</span></span><br><span class=\"line\">x = somefunction()</span><br><span class=\"line\">y = somefunction()</span><br><span class=\"line\"><span class=\"comment\"># 有关这方面的详细信息，请参阅5.4.6节介绍相同运算符（ is）的部分。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>关键字 assert</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt; age &lt; <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt; age &lt; <span class=\"number\">100</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> ?</span><br><span class=\"line\">AssertionError</span><br><span class=\"line\"><span class=\"comment\">#如果知道必须满足特定条件，程序才能正确地运行，可在程序中添加assert语句充当检查点，这很有帮助。还可在条件后面添加一个字符串，对断言做出说明。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt; age &lt; <span class=\"number\">100</span>, <span class=\"string\">&#x27;The age must be realistic&#x27;</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> ?</span><br><span class=\"line\">AssertionError: The age must be realistic</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>迭代字典</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 要遍历字典的所有关键字，可像遍历序列那样使用普通的for语句。</span></span><br><span class=\"line\">d = &#123;<span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;z&#x27;</span>: <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(key, <span class=\"string\">&#x27;corresponds to&#x27;</span>, d[key])</span><br><span class=\"line\"><span class=\"comment\"># 也可使用keys等字典方法来获取所有的键。如果只对值感兴趣，可使用d.values。你可能还</span></span><br><span class=\"line\"><span class=\"comment\"># 记得， d.items以元组的方式返回键值对。 for循环的优点之一是，可在其中使用序列解包。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> d.items():</span><br><span class=\"line\"><span class=\"built_in\">print</span>(key, <span class=\"string\">&#x27;corresponds to&#x27;</span>, value)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>并行迭代</li>\n</ol>\n<p>有时候，你可能想同时迭代两个序列。假设有下面两个列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">&#x27;anne&#x27;</span>, <span class=\"string\">&#x27;beth&#x27;</span>, <span class=\"string\">&#x27;george&#x27;</span>, <span class=\"string\">&#x27;damon&#x27;</span>]</span><br><span class=\"line\">ages = [<span class=\"number\">12</span>, <span class=\"number\">45</span>, <span class=\"number\">32</span>, <span class=\"number\">102</span>]</span><br></pre></td></tr></table></figure>\n\n<p>如果要打印名字和对应的年龄，可以像下面这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(names)):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names[i], <span class=\"string\">&#x27;is&#x27;</span>, ages[i], <span class=\"string\">&#x27;years old&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>i 是用作循环索引的变量的标准名称。一个很有用的并行迭代工具是内置函数 zip，它将两个<br>序列“缝合”起来，并返回一个由元组组成的序列。返回值是一个适合迭代的对象，要查看其内<br>容，可使用 list 将其转换为列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(names, ages))</span><br><span class=\"line\">[(<span class=\"string\">&#x27;anne&#x27;</span>, <span class=\"number\">12</span>), (<span class=\"string\">&#x27;beth&#x27;</span>, <span class=\"number\">45</span>), (<span class=\"string\">&#x27;george&#x27;</span>, <span class=\"number\">32</span>), (<span class=\"string\">&#x27;damon&#x27;</span>, <span class=\"number\">102</span>)]</span><br></pre></td></tr></table></figure>\n\n<p>“缝合”后，可在循环中将元组解包。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> name, age <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(names, ages):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name, <span class=\"string\">&#x27;is&#x27;</span>, age, <span class=\"string\">&#x27;years old&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>函数 zip 可用于“缝合”任意数量的序列。需要指出的是，当序列的长度不同时，函数 zip 将<br>在最短的序列用完后停止“缝合”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(<span class=\"built_in\">range</span>(<span class=\"number\">5</span>), <span class=\"built_in\">range</span>(<span class=\"number\">100000000</span>)))</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">1</span>), (<span class=\"number\">2</span>, <span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">4</span>)]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>迭代时获取索引</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> string <span class=\"keyword\">in</span> strings:</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">in</span> string:</span><br><span class=\"line\">strings[index] = <span class=\"string\">&#x27;[censored]&#x27;</span></span><br><span class=\"line\">index += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>这个解决方案虽然可以接受，但看起来也有点笨拙。另一种解决方案是使用内置函数<br>enumerate。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> index, string <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(strings):</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&#x27;xxx&#x27;</span> <span class=\"keyword\">in</span> string:</span><br><span class=\"line\">strings[index] = <span class=\"string\">&#x27;[censored]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个函数让你能够迭代索引 值对，其中的索引是自动提供的。</p>\n<ol start=\"7\">\n<li>循环中的 else 子句<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">99</span>, <span class=\"number\">81</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">root = sqrt(n)</span><br><span class=\"line\"><span class=\"keyword\">if</span> root == <span class=\"built_in\">int</span>(root):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n)</span><br><span class=\"line\"><span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Didn&#x27;t find it!&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在循环中使用 else 子句，可以在循环正常结束时执行，也可以在循环异常结束时执行。</p>\n<h3 id=\"列表推导式\"><a href=\"#列表推导式\" class=\"headerlink\" title=\"列表推导式\"></a>列表推导式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列表推导式是列表创建的另一种方式。</span></span><br><span class=\"line\">squares = [n ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(squares)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> x <span class=\"number\">3</span> == <span class=\"number\">0</span>] %</span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">36</span>, <span class=\"number\">81</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[(x, y) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>) <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">1</span>), (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">2</span>, <span class=\"number\">1</span>), (<span class=\"number\">2</span>, <span class=\"number\">2</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>girls = [<span class=\"string\">&#x27;alice&#x27;</span>, <span class=\"string\">&#x27;bernice&#x27;</span>, <span class=\"string\">&#x27;clarice&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>boys = [<span class=\"string\">&#x27;chris&#x27;</span>, <span class=\"string\">&#x27;arnold&#x27;</span>, <span class=\"string\">&#x27;bob&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[b+<span class=\"string\">&#x27;+&#x27;</span>+g <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> boys <span class=\"keyword\">for</span> g <span class=\"keyword\">in</span> girls <span class=\"keyword\">if</span> b[<span class=\"number\">0</span>] == g[<span class=\"number\">0</span>]]</span><br><span class=\"line\">[<span class=\"string\">&#x27;chris+clarice&#x27;</span>, <span class=\"string\">&#x27;arnold+alice&#x27;</span>, <span class=\"string\">&#x27;bob+bernice&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 这些代码将名字的首字母相同的男孩和女孩配对。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典推导。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>squares = &#123;i:<span class=\"string\">&quot;&#123;&#125; squared is &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(i, i**<span class=\"number\">2</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>squares</span><br><span class=\"line\">&#123;<span class=\"number\">0</span>: <span class=\"string\">&#x27;0 squared is 0&#x27;</span>, <span class=\"number\">1</span>: <span class=\"string\">&#x27;1 squared is 1&#x27;</span>, <span class=\"number\">2</span>: <span class=\"string\">&#x27;2 squared is 4&#x27;</span>, <span class=\"number\">3</span>: <span class=\"string\">&#x27;3 squared is 9&#x27;</span>, <span class=\"number\">4</span>: <span class=\"string\">&#x27;4 squared is 16&#x27;</span>, <span class=\"number\">5</span>: <span class=\"string\">&#x27;5 squared is 25&#x27;</span>, <span class=\"number\">6</span>: <span class=\"string\">&#x27;6 squared is 36&#x27;</span>, <span class=\"number\">7</span>: <span class=\"string\">&#x27;7 squared is 49&#x27;</span>, <span class=\"number\">8</span>: <span class=\"string\">&#x27;8 squared is 64&#x27;</span>, <span class=\"number\">9</span>: <span class=\"string\">&#x27;9 squared is 81&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 在列表推导中， for前面只有一个表达式，而在字典推导中， for前面有两个用冒号分隔的表</span></span><br><span class=\"line\"><span class=\"comment\"># 达式。这两个表达式分别为键及其对应的值。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三人行\"><a href=\"#三人行\" class=\"headerlink\" title=\"三人行\"></a>三人行</h3><p>pass、 del 和 exec</p>\n<p>pass 可以用来作为占位符，用于空语句块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>del 可以用来删除一个对象的引用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> var</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这看似简单，但有时不太好理解。例如，在下面的示例中， x和y指向同一个列表：</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = [<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y[<span class=\"number\">1</span>] = <span class=\"string\">&quot;Python&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x</span><br><span class=\"line\">[<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 你可能认为通过删除x，也将删除y，但情况并非如此。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y</span><br><span class=\"line\">[<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;Python&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#这是为什么呢？ x和y指向同一个列表，但删除x对y没有任何影响，因为你只删除名称x，而没有删除列表本身（值）。事实上，在Python中，根本就没有办法删除值，而且你也不需要这样</span></span><br><span class=\"line\"><span class=\"comment\"># 做，因为对于你不再使用的值， Python解释器会立即将其删除。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>exec 可以用来执行一段代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">exec</span>(<span class=\"string\">&quot;print(&#x27;Hello, world!&#x27;)&quot;</span>)</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># eval</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># exec执行一系列Python语句，而eval计算用字符串表示</span></span><br><span class=\"line\"><span class=\"comment\"># 的Python表达式的值，并返回结果（ exec什么都不返回，因为它本身是条语句）。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">eval</span>(<span class=\"built_in\">input</span>(<span class=\"string\">&quot;Enter an arithmetic expression: &quot;</span>))</span><br><span class=\"line\">Enter an arithmetic expression: <span class=\"number\">6</span> + <span class=\"number\">18</span> * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了多种语句。</p>\n<ul>\n<li>打印语句：你可使用 print 语句来打印多个用逗号分隔的值。如果 print 语句以逗号结尾，<br>后续 print 语句将在当前行接着打印。</li>\n<li>导入语句：有时候，你不喜欢要导入的函数的名称——可能是因为你已将这个名称用作<br>他用。在这种情况下，可使用 import … as …语句在本地重命名函数。</li>\n<li>赋值语句：通过使用奇妙的序列解包和链式赋值，可同时给多个变量赋值；而通过使用<br>增强赋值，可就地修改变量。</li>\n<li>代码块：代码块用于通过缩进将语句编组。代码块可用于条件语句和循环中，还可用于<br>函数和类定义中（这将在本书后面介绍）。</li>\n<li>条件语句：条件语句根据条件（布尔表达式）决定是否执行后续代码块。通过使用 if&#x2F;elif&#x2F;<br>else，可将多个条件语句组合起来。条件语句的一个变种是条件表达式，如 a if b else c。</li>\n<li>断言：断言断定某件事（一个布尔表达式）为真，可包含说明为何必须如此的字符串。<br>如果指定的表达式为假，断言将导致程序停止执行（或引发第 8 章将介绍的异常）。最好<br>尽早将错误揪出来，免得它潜藏在程序中，直到带来麻烦。</li>\n<li>循环：你可针对序列中的每个元素（如特定范围内的每个数）执行代码块，也可在条件<br>为真时反复执行代码块。要跳过代码块中余下的代码，直接进入下一次迭代，可使用<br>continue 语句；要跳出循环，可使用 break 语句。另外，你还可在循环末尾添加一个 else<br>子句，它将在没有执行循环中的任何 break 语句时执行。</li>\n<li>推导：推导并不是语句，而是表达式。它们看起来很像循环，因此我将它们放在循环中<br>讨论。通过列表推导，可从既有列表创建出新列表，这是通过对列表元素调用函数、剔<br>除不想要的函数等实现的。推导功能强大，但在很多情况下，使用普通循环和条件语句<br>也可完成任务，且代码的可读性可能更高。使用类似于列表推导的表达式可创建出字典。</li>\n<li>pass、 del、 exec 和 eval： pass 语句什么都不做，但适合用作占位符。 del 语句用于删除变<br>量或数据结构的成员，但不能用于删除值。函数 exec 用于将字符串作为 Python 程序执行。<br>函数 eval 计算用字符串表示的表达式并返回结果。</li>\n</ul>\n<h2 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h2><h4 id=\"懒惰是一种美德\"><a href=\"#懒惰是一种美德\" class=\"headerlink\" title=\"懒惰是一种美德\"></a>懒惰是一种美德</h4><p>这里说的懒不是贬义词，而是说不做无谓的工作。</p>\n<p>在有些语言（如C++、 Pascal和Ada）中，经常需要给参数赋值并让这种修改影响函数外部的变<br>量。在Python中，没法直接这样做，只能修改参数对象本身。</p>\n<h4 id=\"收集参数\"><a href=\"#收集参数\" class=\"headerlink\" title=\"收集参数\"></a>收集参数</h4><p>参数前面的星号将提供的所有值都放在一个元组中，也就是将这些值收集起来。这样的行为<br>我们在5.2.1节见过：赋值时带星号的变量收集多余的值。它收集的是列表而不是元组中多余的值，<br>但除此之外，这两种用法很像。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_params</span>(<span class=\"params\">*params</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(params)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_params_2</span>(<span class=\"params\">title, *params</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(title)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(params)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_2(<span class=\"string\">&#x27;Params:&#x27;</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">Params:</span><br><span class=\"line\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>与赋值时一样，带星号的参数也可放在其他位置（而不是最后），但不同的是，在这种情况<br>下你需要做些额外的工作：使用名称来指定后续参数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">in_the_middle</span>(<span class=\"params\">x, *y, z</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>in_the_middle(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, z=<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> (<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>in_the_middle(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: in_the_middle() missing <span class=\"number\">1</span> required keyword-only argument: <span class=\"string\">&#x27;z&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 星号不会收集关键字参数。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_2(<span class=\"string\">&#x27;Hmm...&#x27;</span>, something=<span class=\"number\">42</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">File <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">TypeError: print_params_2() got an unexpected keyword argument <span class=\"string\">&#x27;something&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要收集关键字参数，可使用两个星号。</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">print_params_3</span>(<span class=\"params\">**params</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span><span class=\"built_in\">print</span>(params)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_3(x=<span class=\"number\">1</span>, y=<span class=\"number\">2</span>, z=<span class=\"number\">3</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;z&#x27;</span>: <span class=\"number\">3</span>, <span class=\"string\">&#x27;x&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;y&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">如你所见，这样得到的是一个字典而不是元组。可结合使用这些技术。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_params_4</span>(<span class=\"params\">x, y, z=<span class=\"number\">3</span>, *pospar, **keypar</span>):</span><br><span class=\"line\"><span class=\"built_in\">print</span>(x, y, z)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(pospar)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(keypar)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 其效果与预期的相同。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_4(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, foo=<span class=\"number\">1</span>, bar=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\">(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;bar&#x27;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print_params_4(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\">()</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本章介绍了抽象的基本知识以及函数。</p>\n<ul>\n<li>抽象：抽象是隐藏不必要细节的艺术。通过定义处理细节的函数，可让程序更抽象。</li>\n<li>函数定义：函数是使用def语句定义的。函数由语句块组成，它们从外部接受值（参数），<br>并可能返回一个或多个值（计算结果）。</li>\n<li>参数：函数通过参数（调用函数时被设置的变量）接收所需的信息。在Python中，参数有<br>两类：位置参数和关键字参数。通过给参数指定默认值，可使其变成可选的。</li>\n<li>作用域：变量存储在作用域（也叫命名空间）中。在Python中，作用域分两大类：全局作<br>用域和局部作用域。作用域可以嵌套。</li>\n<li>递归：函数可调用自身，这称为递归。可使用递归完成的任何任务都可使用循环来完成，<br>但有时使用递归函数的可读性更高。</li>\n<li>函数式编程： Python提供了一些函数式编程工具，其中包括lambda表达式以及函数map、<br>filter和reduce。</li>\n</ul>\n<h2 id=\"再谈抽象\"><a href=\"#再谈抽象\" class=\"headerlink\" title=\"再谈抽象\"></a>再谈抽象</h2>","categories":[],"tags":[]}