{"title":"ROS 自定义订阅者","slug":"code/ROS自定义订阅者","date":"2023-01-03T10:31:53.000Z","updated":"2023-05-27T03:57:55.985Z","comments":true,"path":"api/articles/code/ROS自定义订阅者.json","excerpt":null,"covers":["https://image.wxydejoy.top/utools/1672740244110_bzks31rh5v5r8w2j.png","https://image.wxydejoy.top/utools/Topic-SinglePublisherandSingleSubscriber_rwqsdprhxyi1h02t.gif","https://image.wxydejoy.top/utools/Topic-MultiplePublisherandMultipleSubscriber_wcrylp7ekdu30y58.gif"],"content":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><h3 id=\"软件平台\"><a href=\"#软件平台\" class=\"headerlink\" title=\"软件平台\"></a>软件平台</h3><blockquote>\n<p>The Robot Operating System (ROS) is a set of software libraries and tools that help you build robot applications. From drivers to state-of-the-art algorithms, and with powerful developer tools, ROS has what you need for your next robotics project. And it’s all open source.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>Robot操作系统(ROS)是一组软件库和工具，可帮助您构建机器人应用程序。从驱动程序到最先进的算法，再加上强大的开发工具，ROS为您的下一个机器人项目提供了所需的一切。而且这一切都是开源的。</p>\n</blockquote>\n<h3 id=\"硬件平台\"><a href=\"#硬件平台\" class=\"headerlink\" title=\"硬件平台\"></a>硬件平台</h3><p><img src=\"https://image.wxydejoy.top/utools/1672740244110_bzks31rh5v5r8w2j.png\" alt=\"x3\"></p>\n<blockquote>\n<p>地平线旭日®️X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops端侧推理与4核ARM A53处理能力。可同时多路Camera Sensor的输入并支持H.264&#x2F;H.265编解码。结合地平线的高性能AI工具链与机器人开发平台，助力开发者快速落地解决方案。</p>\n</blockquote>\n<h2 id=\"ROS-订阅机制\"><a href=\"#ROS-订阅机制\" class=\"headerlink\" title=\"ROS 订阅机制\"></a>ROS 订阅机制</h2><p>ROS 2将复杂的系统分解为许多模块化节点。 主题是 ROS 图的重要组成部分，充当节点交换消息的总线。</p>\n<p><img src=\"https://image.wxydejoy.top/utools/Topic-SinglePublisherandSingleSubscriber_rwqsdprhxyi1h02t.gif\" alt=\"Topic-SinglePublisherandSingleSubscriber\"></p>\n<p>一个节点可以将数据发布到任意数量的主题，同时订阅任意数量的主题。</p>\n<p><img src=\"https://image.wxydejoy.top/utools/Topic-MultiplePublisherandMultipleSubscriber_wcrylp7ekdu30y58.gif\" alt=\"Topic-MultiplePublishersandMultipleSubscribers\"></p>\n<p>主题是数据在节点之间移动的主要方式之一，因此也是在系统的不同部分之间移动的主要方式之一。</p>\n<p>(不得不说官方文档还是写的很不错的)</p>\n<h2 id=\"自定义订阅者\"><a href=\"#自定义订阅者\" class=\"headerlink\" title=\"自定义订阅者\"></a>自定义订阅者</h2><p>(这里参考了很多官方文档)</p>\n<h3 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><p>打开一个新终端并获取 ROS 2 安装，以便命令正常工作。<code>ros2</code></p>\n<p>导航到上一教程中创建的目录。<code>ros2_ws</code></p>\n<p>回想一下，包应该在目录中创建，而不是在工作区的根目录中创建。 因此，导航到 并运行包创建命令：<code>srcros2_ws/src</code></p>\n<p><code>ros2 pkg create --build-type ament_python py_pubsub</code></p>\n<p>您的终端将返回一条消息，验证您的软件包及其所有必要文件和文件夹的创建。</p>\n<h3 id=\"编写订阅节点\"><a href=\"#编写订阅节点\" class=\"headerlink\" title=\"编写订阅节点\"></a>编写订阅节点</h3><p>导航到 <code>py_pubsub</code> </p>\n<p>回想一下，此目录是一个 <code>Python</code> 包，与它嵌套的 ROS 2 包同名。<code>ros2_ws/src/py_pubsub/py_pubsub</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> rclpy</span><br><span class=\"line\"><span class=\"keyword\">from</span> rclpy.node <span class=\"keyword\">import</span> Node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> std_msgs.msg <span class=\"keyword\">import</span> String</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinimalSubscriber</span>(<span class=\"title class_ inherited__\">Node</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&#x27;minimal_subscriber&#x27;</span>)</span><br><span class=\"line\">        self.subscription = self.create_subscription(</span><br><span class=\"line\">            String,</span><br><span class=\"line\">            <span class=\"string\">&#x27;topic&#x27;</span>,</span><br><span class=\"line\">            self.listener_callback,</span><br><span class=\"line\">            <span class=\"number\">10</span>)</span><br><span class=\"line\">        self.subscription  <span class=\"comment\"># prevent unused variable warning</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">listener_callback</span>(<span class=\"params\">self, msg</span>):</span><br><span class=\"line\">        self.get_logger().info(<span class=\"string\">&#x27;I heard: &quot;%s&quot;&#x27;</span> % msg.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    rclpy.init(args=args)</span><br><span class=\"line\"></span><br><span class=\"line\">    minimal_subscriber = MinimalSubscriber()</span><br><span class=\"line\"></span><br><span class=\"line\">    rclpy.spin(minimal_subscriber)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Destroy the node explicitly</span></span><br><span class=\"line\">    <span class=\"comment\"># (optional - otherwise it will be done automatically</span></span><br><span class=\"line\">    <span class=\"comment\"># when the garbage collector destroys the node object)</span></span><br><span class=\"line\">    minimal_subscriber.destroy_node()</span><br><span class=\"line\">    rclpy.shutdown()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>将一个级别导航回目录，其中已为您创建了目录和文件。<code>ros2_ws/src/py_pubsub</code> <code>setup.py</code> <code>setup.cfg</code> <code>package.xml</code></p>\n<p>使用文本编辑器打开。<code>package.xml</code></p>\n<p>如上一教程所述，请确保填写<code>&lt;description&gt;</code> <code>&lt;maintainer&gt;</code> <code>&lt;license&gt;</code>标记：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Examples of minimal publisher/subscriber using rclpy<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">maintainer</span> <span class=\"attr\">email</span>=<span class=\"string\">&quot;you@email.com&quot;</span>&gt;</span>Your Name<span class=\"tag\">&lt;/<span class=\"name\">maintainer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>Apache License 2.0<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述行之后，添加与节点的导入语句对应的以下依赖项：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exec_depend</span>&gt;</span>rclpy<span class=\"tag\">&lt;/<span class=\"name\">exec_depend</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exec_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这声明了包的需求以及何时执行其代码</p>\n<h3 id=\"添加入口点\"><a href=\"#添加入口点\" class=\"headerlink\" title=\"添加入口点\"></a>添加入口点</h3><p>打开<code>setup.py</code>文件。 同样，将 、 和 字段与您的 ：maintainer maintainer_email description licensepackage.xml</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maintainer=<span class=\"string\">&#x27;YourName&#x27;</span>,</span><br><span class=\"line\">maintainer_email=<span class=\"string\">&#x27;you@email.com&#x27;</span>,</span><br><span class=\"line\">description=<span class=\"string\">&#x27;Examples of minimal publisher/subscriber using rclpy&#x27;</span>,</span><br><span class=\"line\">license=<span class=\"string\">&#x27;Apache License 2.0&#x27;</span>,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在字段的括号内添加以下行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry_points=&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;console_scripts&#x27;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&#x27;talker = py_pubsub.publisher_member_function:main&#x27;</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>不要忘记保存。</p>\n<h3 id=\"检查设置-cfg\"><a href=\"#检查设置-cfg\" class=\"headerlink\" title=\"检查设置.cfg\"></a>检查设置.cfg</h3><p>文件的内容应自动正确填充，如下所示：setup.cfg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[develop]</span><br><span class=\"line\">script-dir=$base/lib/py_pubsub</span><br><span class=\"line\">[install]</span><br><span class=\"line\">install-scripts=$base/lib/py_pubsub</span><br></pre></td></tr></table></figure>\n<p>这只是告诉设置工具将您的可执行文件放入 ，因为会在那里寻找它们。</p>\n<p>您现在可以构建软件包，获取本地安装文件并运行它，但让我们先创建订阅者节点，以便您可以看到完整的系统在工作。</p>\n<h3 id=\"消息格式\"><a href=\"#消息格式\" class=\"headerlink\" title=\"消息格式\"></a>消息格式</h3><p><a href=\"https://c-gitlab.horizon.ai/HHP/box/hobot_msgs/-/tree/develop/ai_msgs\">参考旭日x3的ai_msgs</a></p>\n<details ><summary>消息格式</summary><div class=\"fold-content\"><h4 id=\"ai-msgs\"><a href=\"#ai-msgs\" class=\"headerlink\" title=\"ai_msgs\"></a>ai_msgs</h4><p>自定义的ai msg，包括人&#x2F;物&#x2F;车等检测框roi，跟踪track id，抓拍，特征，手势识别等结果。用于算法模型推理后，发布推理结果。</p>\n<p>message详细说明如下：</p>\n<h4 id=\"PerceptionTargets-msg\"><a href=\"#PerceptionTargets-msg\" class=\"headerlink\" title=\"PerceptionTargets.msg\"></a>PerceptionTargets.msg</h4><p>感知结果的消息定义，一般每帧图像对应一个感知结果消息。消息包含：</p>\n<p>1、std_msgs&#x2F;Header header</p>\n<p>消息头，包含stamp和frame_id，和用于模型推理的图片header一致，用于表示此消息所对应的图片。</p>\n<p>2、int16 fps</p>\n<p>感知结果的输出帧率，即算法模型推理处理帧率，小于0无效。</p>\n<p>当fps小于sensor的图像输出帧率时，说明算法模型推理耗时比较长，需要对推理流程进行优化。</p>\n<p>3、Perf[] perfs</p>\n<p>性能统计信息，比如记录每个模型推理的耗时。</p>\n<p>当有多个模型时，可以通过记录每个模型的性能信息发现模型推理流程的性能瓶颈。同时当发生推理异常导致无ai消息输出时，也能够根据性能统计信息中的模型名，判断是哪个模型没有输出，实现快速缩小排查范围。</p>\n<p>4、Target[] targets</p>\n<p>感知目标集合。</p>\n<p>5、Target[] disappeared_targets</p>\n<p>消失目标集合。</p>\n<h4 id=\"CaptureTargets-msg\"><a href=\"#CaptureTargets-msg\" class=\"headerlink\" title=\"CaptureTargets.msg\"></a>CaptureTargets.msg</h4><p>抓拍结果的消息定义。消息包含：</p>\n<p>1、std_msgs&#x2F;Header header</p>\n<p>消息头，包含stamp和frame_id，和用于模型推理的图片header一致，用于表示此消息所对应的图片。</p>\n<p>2、Perf.msg</p>\n<p>性能统计信息，比如记录每个模型推理的耗时</p>\n<p>4、Target[] targets</p>\n<p>抓拍目标集合。</p>\n<h4 id=\"Perf-msg\"><a href=\"#Perf-msg\" class=\"headerlink\" title=\"Perf.msg\"></a>Perf.msg</h4><p>性能统计信息。</p>\n<p>1、string type</p>\n<p>类型，用于表示处理模块。例如type为模型名时，表示对此模型推理的性能统计。</p>\n<p>2、builtin_interfaces&#x2F;Time stamp_start</p>\n<p>开始处理的时间戳。</p>\n<p>3、builtin_interfaces&#x2F;Time stamp_end</p>\n<p>处理完成的时间戳。</p>\n<h4 id=\"Target-msg\"><a href=\"#Target-msg\" class=\"headerlink\" title=\"Target.msg\"></a>Target.msg</h4><p>目标消息。</p>\n<p>1、string type</p>\n<p>目标类型名称，如：人、车、动物、物体，具体值可以定义为为person&#x2F;car&#x2F;object&#x2F;animal</p>\n<p>2、uint64 track_id</p>\n<p>目标跟踪ID号。</p>\n<p>3、Roi[] rois</p>\n<p>目标的检测框。一个目标可能包含多个检测框，如同时具有人体、人头和人脸检测框。</p>\n<p>4、Attribute[] attributes</p>\n<p>属性。一个目标可能包含多个属性信息，如同时具有年龄、性别和手势结果。</p>\n<p>5、Point[] points</p>\n<p>关键点。一个目标可能包含多个关键点信息，如同时具有人脸关键点、人体骨骼点、人手关键点</p>\n<p>6、Capture[] captures</p>\n<p>跟踪目标抓拍图信息，包含抓拍图、特征、特征的底库检索结果信息。</p>\n<h4 id=\"Roi-msg\"><a href=\"#Roi-msg\" class=\"headerlink\" title=\"Roi.msg\"></a>Roi.msg</h4><p>roi感知消息，如：人体检测框、人头检测框、人脸检测框、人手检测框。</p>\n<p>1、string type</p>\n<p>roi类型，如body&#x2F;head&#x2F;face&#x2F;hand。</p>\n<p>2、sensor_msgs&#x2F;RegionOfInterest rect</p>\n<p>检测框。</p>\n<p>3、float32 score</p>\n<p>检测结果的置信度。</p>\n<h4 id=\"Attribute-msg\"><a href=\"#Attribute-msg\" class=\"headerlink\" title=\"Attribute.msg\"></a>Attribute.msg</h4><p>属性感知消息，如：年龄、性别、手势、眼镜、口罩、活体信息、车辆类型、车辆颜色、车辆速度、车辆所在车道等信息。</p>\n<p>1、string type</p>\n<p>属性类型，如年龄：age，性别：gender， 手势：gesture。</p>\n<p>2、float32 value</p>\n<p>属性数值。</p>\n<p>如age数值定义举例：</p>\n<p>​\tval为实际年龄数值</p>\n<p>gender数值定义举例：</p>\n<p>​\t“1”: “男”, “-1”: “女”</p>\n<p>gesture数值定义举例：</p>\n<p>​\t0: Background,  &#x2F;&#x2F; 无手势</p>\n<p>​\t1: FingerHeart,  &#x2F;&#x2F; 比心</p>\n<p>​\t2: ThumbUp,  &#x2F;&#x2F; 大拇指向上</p>\n<p>​\t3: Victory, &#x2F;&#x2F; V手势</p>\n<p>​\t4: Mute,  &#x2F;&#x2F; 嘘</p>\n<p>​\t10: Palm,  &#x2F;&#x2F; 手掌</p>\n<p>​\t11: Okay,  &#x2F;&#x2F;  OK手势</p>\n<p>​\t12: ThumbRight,  &#x2F;&#x2F;  大拇指向右</p>\n<p>​\t13: ThumbLeft,  &#x2F;&#x2F;  大拇指向左</p>\n<p>​\t14: Awesome,  &#x2F;&#x2F;  666手势</p>\n<p>3、float32 confidence</p>\n<p>属性结果的置信度。</p>\n<h4 id=\"Point-msg\"><a href=\"#Point-msg\" class=\"headerlink\" title=\"Point.msg\"></a>Point.msg</h4><p>关键点感知结果，如：人脸关键点、人体骨骼点、人手关键点。</p>\n<p>1、string type</p>\n<p>类型，如body_kps&#x2F;face_kps&#x2F;hand_kps。</p>\n<p>2、geometry_msgs&#x2F;Point32[] point</p>\n<p>关键点数值。</p>\n<p>3、float32[] confidence</p>\n<p>每个关键点的置信度，维度和关键点数值相同。</p>\n<h4 id=\"Capture-msg\"><a href=\"#Capture-msg\" class=\"headerlink\" title=\"Capture.msg\"></a>Capture.msg</h4><p>抓拍信息。</p>\n<p>1、std_msgs&#x2F;Header header</p>\n<p>抓拍图对应原视频帧的timestamp和frame_id。</p>\n<p>2、sensor_msgs&#x2F;Image img</p>\n<p>抓拍图。</p>\n<p>3、float32[] features</p>\n<p>抓拍图对应的特征数据，数据长度为0时表示无特征。</p>\n<p>4、DBResult db_result</p>\n<p>特征的底库检索结果。只有当有特征时底库检索结果有效。</p>\n<h4 id=\"DBResult-msg\"><a href=\"#DBResult-msg\" class=\"headerlink\" title=\"DBResult.msg\"></a>DBResult.msg</h4><p>底库检索结果。</p>\n<p>1、string db_type</p>\n<p>底库名称。</p>\n<p>2、string match_id</p>\n<p>匹配目标ID。</p>\n<p>3、float32 distance</p>\n<p>特征比对距离。</p>\n<p>4、float32 similarity</p>\n<p>特征比对相似度。</p>\n</div></details>\n\n\n\n<h3 id=\"构建和运行\"><a href=\"#构建和运行\" class=\"headerlink\" title=\"构建和运行\"></a>构建和运行</h3><p>编译</p>\n<p><code>colcon build --packages-select py_pubsub</code></p>\n<p>打开一个新终端，导航到 ，并获取安装文件：</p>\n<p><code>. install/setup.bash</code></p>\n<p>现在运行说话者节点：</p>\n<p><code>ros2 run py_pubsub listener</code></p>\n<h2 id=\"我的代码修改\"><a href=\"#我的代码修改\" class=\"headerlink\" title=\"我的代码修改\"></a>我的代码修改</h2><p>其实Python脚本代码可以直接运行，无需编译</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> rclpy</span><br><span class=\"line\"><span class=\"keyword\">from</span> rclpy.node <span class=\"keyword\">import</span> Node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ai_msgs.msg <span class=\"keyword\">import</span> PerceptionTargets</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinimalSubscriber</span>(<span class=\"title class_ inherited__\">Node</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&#x27;minimal_subscriber&#x27;</span>)</span><br><span class=\"line\">        self.subscription = self.create_subscription(</span><br><span class=\"line\">            PerceptionTargets,</span><br><span class=\"line\">            <span class=\"string\">&#x27;hobot_mono2d_body_detection&#x27;</span>,</span><br><span class=\"line\">            self.listener_callback,</span><br><span class=\"line\">            <span class=\"number\">10</span>)</span><br><span class=\"line\">        self.subscription  <span class=\"comment\"># prevent unused variable warning</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">listener_callback</span>(<span class=\"params\">self, msg</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(msg.targets) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.get_logger().info(<span class=\"string\">&#x27;I heard:&#x27;</span> + <span class=\"built_in\">str</span>(msg.targets[<span class=\"number\">0</span>].<span class=\"built_in\">type</span>) + <span class=\"built_in\">str</span>(msg.fps))<span class=\"comment\"># &quot;%s&quot;&#x27; % msg.data</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.get_logger().info(<span class=\"string\">&#x27;dont&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># https://c-gitlab.horizon.ai/HHP/box/hobot_msgs/-/tree/develop/ai_msgs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    rclpy.init(args=args)</span><br><span class=\"line\"></span><br><span class=\"line\">    minimal_subscriber = MinimalSubscriber()</span><br><span class=\"line\"></span><br><span class=\"line\">    rclpy.spin(minimal_subscriber)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Destroy the node explicitly</span></span><br><span class=\"line\">    <span class=\"comment\"># (optional - otherwise it will be done automatically</span></span><br><span class=\"line\">    <span class=\"comment\"># when the garbage collector destroys the node object)</span></span><br><span class=\"line\">    minimal_subscriber.destroy_node()</span><br><span class=\"line\">    rclpy.shutdown()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a>结果展示</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[INFO] [1672741631.264257258] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.295972687] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.327739324] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.363461421] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.392870207] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.429643377] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.465771636] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.496358035] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2><h3 id=\"软件平台\"><a href=\"#软件平台\" class=\"headerlink\" title=\"软件平台\"></a>软件平台</h3><blockquote>\n<p>The Robot Operating System (ROS) is a set of software libraries and tools that help you build robot applications. From drivers to state-of-the-art algorithms, and with powerful developer tools, ROS has what you need for your next robotics project. And it’s all open source.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>Robot操作系统(ROS)是一组软件库和工具，可帮助您构建机器人应用程序。从驱动程序到最先进的算法，再加上强大的开发工具，ROS为您的下一个机器人项目提供了所需的一切。而且这一切都是开源的。</p>\n</blockquote>\n<h3 id=\"硬件平台\"><a href=\"#硬件平台\" class=\"headerlink\" title=\"硬件平台\"></a>硬件平台</h3><p><img src=\"https://image.wxydejoy.top/utools/1672740244110_bzks31rh5v5r8w2j.png\" alt=\"x3\"></p>\n<blockquote>\n<p>地平线旭日®️X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops端侧推理与4核ARM A53处理能力。可同时多路Camera Sensor的输入并支持H.264&#x2F;H.265编解码。结合地平线的高性能AI工具链与机器人开发平台，助力开发者快速落地解决方案。</p>\n</blockquote>\n<h2 id=\"ROS-订阅机制\"><a href=\"#ROS-订阅机制\" class=\"headerlink\" title=\"ROS 订阅机制\"></a>ROS 订阅机制</h2><p>ROS 2将复杂的系统分解为许多模块化节点。 主题是 ROS 图的重要组成部分，充当节点交换消息的总线。</p>\n<p><img src=\"https://image.wxydejoy.top/utools/Topic-SinglePublisherandSingleSubscriber_rwqsdprhxyi1h02t.gif\" alt=\"Topic-SinglePublisherandSingleSubscriber\"></p>\n<p>一个节点可以将数据发布到任意数量的主题，同时订阅任意数量的主题。</p>\n<p><img src=\"https://image.wxydejoy.top/utools/Topic-MultiplePublisherandMultipleSubscriber_wcrylp7ekdu30y58.gif\" alt=\"Topic-MultiplePublishersandMultipleSubscribers\"></p>\n<p>主题是数据在节点之间移动的主要方式之一，因此也是在系统的不同部分之间移动的主要方式之一。</p>\n<p>(不得不说官方文档还是写的很不错的)</p>\n<h2 id=\"自定义订阅者\"><a href=\"#自定义订阅者\" class=\"headerlink\" title=\"自定义订阅者\"></a>自定义订阅者</h2><p>(这里参考了很多官方文档)</p>\n<h3 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><p>打开一个新终端并获取 ROS 2 安装，以便命令正常工作。<code>ros2</code></p>\n<p>导航到上一教程中创建的目录。<code>ros2_ws</code></p>\n<p>回想一下，包应该在目录中创建，而不是在工作区的根目录中创建。 因此，导航到 并运行包创建命令：<code>srcros2_ws/src</code></p>\n<p><code>ros2 pkg create --build-type ament_python py_pubsub</code></p>\n<p>您的终端将返回一条消息，验证您的软件包及其所有必要文件和文件夹的创建。</p>\n<h3 id=\"编写订阅节点\"><a href=\"#编写订阅节点\" class=\"headerlink\" title=\"编写订阅节点\"></a>编写订阅节点</h3><p>导航到 <code>py_pubsub</code> </p>\n<p>回想一下，此目录是一个 <code>Python</code> 包，与它嵌套的 ROS 2 包同名。<code>ros2_ws/src/py_pubsub/py_pubsub</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> rclpy</span><br><span class=\"line\"><span class=\"keyword\">from</span> rclpy.node <span class=\"keyword\">import</span> Node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> std_msgs.msg <span class=\"keyword\">import</span> String</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinimalSubscriber</span>(<span class=\"title class_ inherited__\">Node</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&#x27;minimal_subscriber&#x27;</span>)</span><br><span class=\"line\">        self.subscription = self.create_subscription(</span><br><span class=\"line\">            String,</span><br><span class=\"line\">            <span class=\"string\">&#x27;topic&#x27;</span>,</span><br><span class=\"line\">            self.listener_callback,</span><br><span class=\"line\">            <span class=\"number\">10</span>)</span><br><span class=\"line\">        self.subscription  <span class=\"comment\"># prevent unused variable warning</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">listener_callback</span>(<span class=\"params\">self, msg</span>):</span><br><span class=\"line\">        self.get_logger().info(<span class=\"string\">&#x27;I heard: &quot;%s&quot;&#x27;</span> % msg.data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    rclpy.init(args=args)</span><br><span class=\"line\"></span><br><span class=\"line\">    minimal_subscriber = MinimalSubscriber()</span><br><span class=\"line\"></span><br><span class=\"line\">    rclpy.spin(minimal_subscriber)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Destroy the node explicitly</span></span><br><span class=\"line\">    <span class=\"comment\"># (optional - otherwise it will be done automatically</span></span><br><span class=\"line\">    <span class=\"comment\"># when the garbage collector destroys the node object)</span></span><br><span class=\"line\">    minimal_subscriber.destroy_node()</span><br><span class=\"line\">    rclpy.shutdown()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>将一个级别导航回目录，其中已为您创建了目录和文件。<code>ros2_ws/src/py_pubsub</code> <code>setup.py</code> <code>setup.cfg</code> <code>package.xml</code></p>\n<p>使用文本编辑器打开。<code>package.xml</code></p>\n<p>如上一教程所述，请确保填写<code>&lt;description&gt;</code> <code>&lt;maintainer&gt;</code> <code>&lt;license&gt;</code>标记：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Examples of minimal publisher/subscriber using rclpy<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">maintainer</span> <span class=\"attr\">email</span>=<span class=\"string\">&quot;you@email.com&quot;</span>&gt;</span>Your Name<span class=\"tag\">&lt;/<span class=\"name\">maintainer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">license</span>&gt;</span>Apache License 2.0<span class=\"tag\">&lt;/<span class=\"name\">license</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上述行之后，添加与节点的导入语句对应的以下依赖项：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exec_depend</span>&gt;</span>rclpy<span class=\"tag\">&lt;/<span class=\"name\">exec_depend</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">exec_depend</span>&gt;</span>std_msgs<span class=\"tag\">&lt;/<span class=\"name\">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这声明了包的需求以及何时执行其代码</p>\n<h3 id=\"添加入口点\"><a href=\"#添加入口点\" class=\"headerlink\" title=\"添加入口点\"></a>添加入口点</h3><p>打开<code>setup.py</code>文件。 同样，将 、 和 字段与您的 ：maintainer maintainer_email description licensepackage.xml</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maintainer=<span class=\"string\">&#x27;YourName&#x27;</span>,</span><br><span class=\"line\">maintainer_email=<span class=\"string\">&#x27;you@email.com&#x27;</span>,</span><br><span class=\"line\">description=<span class=\"string\">&#x27;Examples of minimal publisher/subscriber using rclpy&#x27;</span>,</span><br><span class=\"line\">license=<span class=\"string\">&#x27;Apache License 2.0&#x27;</span>,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在字段的括号内添加以下行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry_points=&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;console_scripts&#x27;</span>: [</span><br><span class=\"line\">                <span class=\"string\">&#x27;talker = py_pubsub.publisher_member_function:main&#x27;</span>,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>不要忘记保存。</p>\n<h3 id=\"检查设置-cfg\"><a href=\"#检查设置-cfg\" class=\"headerlink\" title=\"检查设置.cfg\"></a>检查设置.cfg</h3><p>文件的内容应自动正确填充，如下所示：setup.cfg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[develop]</span><br><span class=\"line\">script-dir=$base/lib/py_pubsub</span><br><span class=\"line\">[install]</span><br><span class=\"line\">install-scripts=$base/lib/py_pubsub</span><br></pre></td></tr></table></figure>\n<p>这只是告诉设置工具将您的可执行文件放入 ，因为会在那里寻找它们。</p>\n<p>您现在可以构建软件包，获取本地安装文件并运行它，但让我们先创建订阅者节点，以便您可以看到完整的系统在工作。</p>\n<h3 id=\"消息格式\"><a href=\"#消息格式\" class=\"headerlink\" title=\"消息格式\"></a>消息格式</h3><p><a href=\"https://c-gitlab.horizon.ai/HHP/box/hobot_msgs/-/tree/develop/ai_msgs\">参考旭日x3的ai_msgs</a></p>\n<details ><summary>消息格式</summary><div class=\"fold-content\"><h4 id=\"ai-msgs\"><a href=\"#ai-msgs\" class=\"headerlink\" title=\"ai_msgs\"></a>ai_msgs</h4><p>自定义的ai msg，包括人&#x2F;物&#x2F;车等检测框roi，跟踪track id，抓拍，特征，手势识别等结果。用于算法模型推理后，发布推理结果。</p>\n<p>message详细说明如下：</p>\n<h4 id=\"PerceptionTargets-msg\"><a href=\"#PerceptionTargets-msg\" class=\"headerlink\" title=\"PerceptionTargets.msg\"></a>PerceptionTargets.msg</h4><p>感知结果的消息定义，一般每帧图像对应一个感知结果消息。消息包含：</p>\n<p>1、std_msgs&#x2F;Header header</p>\n<p>消息头，包含stamp和frame_id，和用于模型推理的图片header一致，用于表示此消息所对应的图片。</p>\n<p>2、int16 fps</p>\n<p>感知结果的输出帧率，即算法模型推理处理帧率，小于0无效。</p>\n<p>当fps小于sensor的图像输出帧率时，说明算法模型推理耗时比较长，需要对推理流程进行优化。</p>\n<p>3、Perf[] perfs</p>\n<p>性能统计信息，比如记录每个模型推理的耗时。</p>\n<p>当有多个模型时，可以通过记录每个模型的性能信息发现模型推理流程的性能瓶颈。同时当发生推理异常导致无ai消息输出时，也能够根据性能统计信息中的模型名，判断是哪个模型没有输出，实现快速缩小排查范围。</p>\n<p>4、Target[] targets</p>\n<p>感知目标集合。</p>\n<p>5、Target[] disappeared_targets</p>\n<p>消失目标集合。</p>\n<h4 id=\"CaptureTargets-msg\"><a href=\"#CaptureTargets-msg\" class=\"headerlink\" title=\"CaptureTargets.msg\"></a>CaptureTargets.msg</h4><p>抓拍结果的消息定义。消息包含：</p>\n<p>1、std_msgs&#x2F;Header header</p>\n<p>消息头，包含stamp和frame_id，和用于模型推理的图片header一致，用于表示此消息所对应的图片。</p>\n<p>2、Perf.msg</p>\n<p>性能统计信息，比如记录每个模型推理的耗时</p>\n<p>4、Target[] targets</p>\n<p>抓拍目标集合。</p>\n<h4 id=\"Perf-msg\"><a href=\"#Perf-msg\" class=\"headerlink\" title=\"Perf.msg\"></a>Perf.msg</h4><p>性能统计信息。</p>\n<p>1、string type</p>\n<p>类型，用于表示处理模块。例如type为模型名时，表示对此模型推理的性能统计。</p>\n<p>2、builtin_interfaces&#x2F;Time stamp_start</p>\n<p>开始处理的时间戳。</p>\n<p>3、builtin_interfaces&#x2F;Time stamp_end</p>\n<p>处理完成的时间戳。</p>\n<h4 id=\"Target-msg\"><a href=\"#Target-msg\" class=\"headerlink\" title=\"Target.msg\"></a>Target.msg</h4><p>目标消息。</p>\n<p>1、string type</p>\n<p>目标类型名称，如：人、车、动物、物体，具体值可以定义为为person&#x2F;car&#x2F;object&#x2F;animal</p>\n<p>2、uint64 track_id</p>\n<p>目标跟踪ID号。</p>\n<p>3、Roi[] rois</p>\n<p>目标的检测框。一个目标可能包含多个检测框，如同时具有人体、人头和人脸检测框。</p>\n<p>4、Attribute[] attributes</p>\n<p>属性。一个目标可能包含多个属性信息，如同时具有年龄、性别和手势结果。</p>\n<p>5、Point[] points</p>\n<p>关键点。一个目标可能包含多个关键点信息，如同时具有人脸关键点、人体骨骼点、人手关键点</p>\n<p>6、Capture[] captures</p>\n<p>跟踪目标抓拍图信息，包含抓拍图、特征、特征的底库检索结果信息。</p>\n<h4 id=\"Roi-msg\"><a href=\"#Roi-msg\" class=\"headerlink\" title=\"Roi.msg\"></a>Roi.msg</h4><p>roi感知消息，如：人体检测框、人头检测框、人脸检测框、人手检测框。</p>\n<p>1、string type</p>\n<p>roi类型，如body&#x2F;head&#x2F;face&#x2F;hand。</p>\n<p>2、sensor_msgs&#x2F;RegionOfInterest rect</p>\n<p>检测框。</p>\n<p>3、float32 score</p>\n<p>检测结果的置信度。</p>\n<h4 id=\"Attribute-msg\"><a href=\"#Attribute-msg\" class=\"headerlink\" title=\"Attribute.msg\"></a>Attribute.msg</h4><p>属性感知消息，如：年龄、性别、手势、眼镜、口罩、活体信息、车辆类型、车辆颜色、车辆速度、车辆所在车道等信息。</p>\n<p>1、string type</p>\n<p>属性类型，如年龄：age，性别：gender， 手势：gesture。</p>\n<p>2、float32 value</p>\n<p>属性数值。</p>\n<p>如age数值定义举例：</p>\n<p>​\tval为实际年龄数值</p>\n<p>gender数值定义举例：</p>\n<p>​\t“1”: “男”, “-1”: “女”</p>\n<p>gesture数值定义举例：</p>\n<p>​\t0: Background,  &#x2F;&#x2F; 无手势</p>\n<p>​\t1: FingerHeart,  &#x2F;&#x2F; 比心</p>\n<p>​\t2: ThumbUp,  &#x2F;&#x2F; 大拇指向上</p>\n<p>​\t3: Victory, &#x2F;&#x2F; V手势</p>\n<p>​\t4: Mute,  &#x2F;&#x2F; 嘘</p>\n<p>​\t10: Palm,  &#x2F;&#x2F; 手掌</p>\n<p>​\t11: Okay,  &#x2F;&#x2F;  OK手势</p>\n<p>​\t12: ThumbRight,  &#x2F;&#x2F;  大拇指向右</p>\n<p>​\t13: ThumbLeft,  &#x2F;&#x2F;  大拇指向左</p>\n<p>​\t14: Awesome,  &#x2F;&#x2F;  666手势</p>\n<p>3、float32 confidence</p>\n<p>属性结果的置信度。</p>\n<h4 id=\"Point-msg\"><a href=\"#Point-msg\" class=\"headerlink\" title=\"Point.msg\"></a>Point.msg</h4><p>关键点感知结果，如：人脸关键点、人体骨骼点、人手关键点。</p>\n<p>1、string type</p>\n<p>类型，如body_kps&#x2F;face_kps&#x2F;hand_kps。</p>\n<p>2、geometry_msgs&#x2F;Point32[] point</p>\n<p>关键点数值。</p>\n<p>3、float32[] confidence</p>\n<p>每个关键点的置信度，维度和关键点数值相同。</p>\n<h4 id=\"Capture-msg\"><a href=\"#Capture-msg\" class=\"headerlink\" title=\"Capture.msg\"></a>Capture.msg</h4><p>抓拍信息。</p>\n<p>1、std_msgs&#x2F;Header header</p>\n<p>抓拍图对应原视频帧的timestamp和frame_id。</p>\n<p>2、sensor_msgs&#x2F;Image img</p>\n<p>抓拍图。</p>\n<p>3、float32[] features</p>\n<p>抓拍图对应的特征数据，数据长度为0时表示无特征。</p>\n<p>4、DBResult db_result</p>\n<p>特征的底库检索结果。只有当有特征时底库检索结果有效。</p>\n<h4 id=\"DBResult-msg\"><a href=\"#DBResult-msg\" class=\"headerlink\" title=\"DBResult.msg\"></a>DBResult.msg</h4><p>底库检索结果。</p>\n<p>1、string db_type</p>\n<p>底库名称。</p>\n<p>2、string match_id</p>\n<p>匹配目标ID。</p>\n<p>3、float32 distance</p>\n<p>特征比对距离。</p>\n<p>4、float32 similarity</p>\n<p>特征比对相似度。</p>\n</div></details>\n\n\n\n<h3 id=\"构建和运行\"><a href=\"#构建和运行\" class=\"headerlink\" title=\"构建和运行\"></a>构建和运行</h3><p>编译</p>\n<p><code>colcon build --packages-select py_pubsub</code></p>\n<p>打开一个新终端，导航到 ，并获取安装文件：</p>\n<p><code>. install/setup.bash</code></p>\n<p>现在运行说话者节点：</p>\n<p><code>ros2 run py_pubsub listener</code></p>\n<h2 id=\"我的代码修改\"><a href=\"#我的代码修改\" class=\"headerlink\" title=\"我的代码修改\"></a>我的代码修改</h2><p>其实Python脚本代码可以直接运行，无需编译</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> rclpy</span><br><span class=\"line\"><span class=\"keyword\">from</span> rclpy.node <span class=\"keyword\">import</span> Node</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> ai_msgs.msg <span class=\"keyword\">import</span> PerceptionTargets</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinimalSubscriber</span>(<span class=\"title class_ inherited__\">Node</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&#x27;minimal_subscriber&#x27;</span>)</span><br><span class=\"line\">        self.subscription = self.create_subscription(</span><br><span class=\"line\">            PerceptionTargets,</span><br><span class=\"line\">            <span class=\"string\">&#x27;hobot_mono2d_body_detection&#x27;</span>,</span><br><span class=\"line\">            self.listener_callback,</span><br><span class=\"line\">            <span class=\"number\">10</span>)</span><br><span class=\"line\">        self.subscription  <span class=\"comment\"># prevent unused variable warning</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">listener_callback</span>(<span class=\"params\">self, msg</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(msg.targets) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            self.get_logger().info(<span class=\"string\">&#x27;I heard:&#x27;</span> + <span class=\"built_in\">str</span>(msg.targets[<span class=\"number\">0</span>].<span class=\"built_in\">type</span>) + <span class=\"built_in\">str</span>(msg.fps))<span class=\"comment\"># &quot;%s&quot;&#x27; % msg.data</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.get_logger().info(<span class=\"string\">&#x27;dont&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># https://c-gitlab.horizon.ai/HHP/box/hobot_msgs/-/tree/develop/ai_msgs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    rclpy.init(args=args)</span><br><span class=\"line\"></span><br><span class=\"line\">    minimal_subscriber = MinimalSubscriber()</span><br><span class=\"line\"></span><br><span class=\"line\">    rclpy.spin(minimal_subscriber)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Destroy the node explicitly</span></span><br><span class=\"line\">    <span class=\"comment\"># (optional - otherwise it will be done automatically</span></span><br><span class=\"line\">    <span class=\"comment\"># when the garbage collector destroys the node object)</span></span><br><span class=\"line\">    minimal_subscriber.destroy_node()</span><br><span class=\"line\">    rclpy.shutdown()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a>结果展示</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[INFO] [1672741631.264257258] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.295972687] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.327739324] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.363461421] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.392870207] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.429643377] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.465771636] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\">[INFO] [1672741631.496358035] [minimal_subscriber]: I heard:person30</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":[],"tags":[{"name":"ROS","path":"api/tags/ROS.json"}]}