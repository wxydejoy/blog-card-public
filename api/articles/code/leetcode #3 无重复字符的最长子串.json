{"title":"leetcode 刷题记录（倒序）","slug":"code/leetcode #3 无重复字符的最长子串","date":"2023-06-08T00:06:00.000Z","updated":"2023-06-08T00:06:00.000Z","comments":true,"path":"api/articles/code/leetcode #3 无重复字符的最长子串.json","excerpt":null,"covers":null,"content":"<!--\n * @Author: weiekko weiekko@gmail.com\n * @Date: 2023-06-08 08:23:40\n * @LastEditors: weiekko weiekko@gmail.com\n * @LastEditTime: 2023-06-08 09:10:03\n * @FilePath: \\blog\\source\\_posts\\leetcode #3 无重复字符的最长子串.md\n * @Description: \n * \n * Copyright (c) 2023 by weiekko weiekko@gmail.com, All Rights Reserved. \n-->\n<h2 id=\"15-三数之和\"><a href=\"#15-三数之和\" class=\"headerlink\" title=\"15. 三数之和\"></a>15. 三数之和</h2><p>复制粘贴</p>\n<h2 id=\"25-K-个一组翻转链表\"><a href=\"#25-K-个一组翻转链表\" class=\"headerlink\" title=\"25. K 个一组翻转链表\"></a>25. K 个一组翻转链表</h2><p>复制粘贴</p>\n<h2 id=\"215-数组中的第K个最大元素\"><a href=\"#215-数组中的第K个最大元素\" class=\"headerlink\" title=\"215. 数组中的第K个最大元素\"></a>215. 数组中的第K个最大元素</h2><p>复制粘贴</p>\n<h2 id=\"LRU-缓存机制\"><a href=\"#LRU-缓存机制\" class=\"headerlink\" title=\"LRU 缓存机制\"></a>LRU 缓存机制</h2><h3 id=\"提交记录\"><a href=\"#提交记录\" class=\"headerlink\" title=\"提交记录\"></a>提交记录</h3><p>是先去b站看了解析视频然后自己写的，很多cpp的内容还是不熟悉，要继续。</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>日期</th>\n<th>语言</th>\n<th>时间</th>\n<th>空间</th>\n<th>优化</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.7 MB</td>\n<td>官方题解</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.4 MB</td>\n<td>ai 优化</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>476 ms</td>\n<td>170.7 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>488 ms</td>\n<td>170.8 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"自己的最终代码\"><a href=\"#自己的最终代码\" class=\"headerlink\" title=\"自己的最终代码\"></a>自己的最终代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) &#123;</span><br><span class=\"line\">        __cap = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//key = 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = hashmap [key]-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> (kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> kv.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"comment\">// 满了吗？</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__cap == hashmap.<span class=\"built_in\">size</span> ())&#123;</span><br><span class=\"line\">                hashmap.<span class=\"built_in\">erase</span> ( value_list.<span class=\"built_in\">back</span> ().key);</span><br><span class=\"line\">                value_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 找到了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除并添加到头</span></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> __cap;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">key_value</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\">        <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> key_value&amp; kv)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key == kv.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, list&lt;key_value&gt;::iterator&gt; hashmap;</span><br><span class=\"line\">    list&lt;key_value&gt; value_list;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ai优化\"><a href=\"#ai优化\" class=\"headerlink\" title=\"ai优化\"></a>ai优化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) : <span class=\"built_in\">capacity</span> (capacity) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将键值对移到链表头部表示最近使用</span></span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache_map [key]-&gt;second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">size</span> () &gt;= capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 缓存已满，删除最久未使用的项目</span></span><br><span class=\"line\">                <span class=\"type\">int</span> lru_key = lru_list.<span class=\"built_in\">back</span> ().first;</span><br><span class=\"line\">                cache_map.<span class=\"built_in\">erase</span> (lru_key);</span><br><span class=\"line\">                lru_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加新项目到链表头部</span></span><br><span class=\"line\">            lru_list.<span class=\"built_in\">push_front</span> (std::<span class=\"built_in\">make_pair</span> (key, value));</span><br><span class=\"line\">            cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 更新已存在的键值对的值，然后移到链表头部表示最近使用</span></span><br><span class=\"line\">            cache_map [key]-&gt;second = value;</span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">    std::unordered_map&lt;<span class=\"type\">int</span>, std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;::iterator&gt; cache_map;</span><br><span class=\"line\">    std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; lru_list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将键值对移到链表头部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveToFront</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = cache_map [key];</span><br><span class=\"line\">        lru_list.<span class=\"built_in\">splice</span> (lru_list.<span class=\"built_in\">begin</span> (), lru_list, it);</span><br><span class=\"line\">        cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><p>看了下提交记录，应该是复制粘贴，主要是cpp不熟，改天重写一遍</p>\n<p>这里就记录一下官方答案吧</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* ret = <span class=\"built_in\">reverseList</span>(head-&gt;next);</span><br><span class=\"line\">        head-&gt;next-&gt;next = head;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"3-无重复字符的最长子串\"><a href=\"#3-无重复字符的最长子串\" class=\"headerlink\" title=\"3 无重复字符的最长子串\"></a>3 无重复字符的最长子串</h2><p>独立编写</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string temp;</span><br><span class=\"line\">    <span class=\"type\">int</span> ftemp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = s.<span class=\"built_in\">length</span>(); i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) &gt; temp.<span class=\"built_in\">length</span>()) <span class=\"comment\">// 无重复  temp.find(s[s.length() - i]) == -1 但会很大 所以</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无重复</span></span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有重复</span></span><br><span class=\"line\">            i += (temp.<span class=\"built_in\">length</span>() - temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ftemp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用到的函数\"><a href=\"#使用到的函数\" class=\"headerlink\" title=\"使用到的函数\"></a>使用到的函数</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string::<span class=\"built_in\">find</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 返回c在string中的位置 无则返回string::npos</span></span><br><span class=\"line\">string::<span class=\"built_in\">length</span>() <span class=\"comment\">// 返回string的长度</span></span><br><span class=\"line\">string::<span class=\"built_in\">push_back</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 在string的末尾添加c</span></span><br><span class=\"line\">string::<span class=\"built_in\">clear</span>() <span class=\"comment\">// 清空string</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>刚开始看错了题</p>\n<p>做完去看评论 发现这个题的思路是滑动窗口 然鹅我不知道那是什么东东 只是大概理解字面意思</p>\n<blockquote>\n<p>这道题主要用到思路是：滑动窗口</p>\n</blockquote>\n<blockquote>\n<p>什么是滑动窗口？</p>\n</blockquote>\n<blockquote>\n<p>其实就是一个队列,比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p>\n</blockquote>\n<blockquote>\n<p>如何移动？</p>\n</blockquote>\n<blockquote>\n<p>我们只要把队列的左边的元素移出就行了，直到满足题目要求！</p>\n</blockquote>\n<blockquote>\n<p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p>\n</blockquote>\n<blockquote>\n<p>时间复杂度：O(n)O(n)O(n)</p>\n</blockquote>\n<blockquote>\n<p>作者：powcai<br>链接：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/\">https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/</a></p>\n</blockquote>\n<blockquote>\n<p>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>c++ 很多特性还不会用 要继续学习</p>\n","more":"<!--\n * @Author: weiekko weiekko@gmail.com\n * @Date: 2023-06-08 08:23:40\n * @LastEditors: weiekko weiekko@gmail.com\n * @LastEditTime: 2023-06-08 09:10:03\n * @FilePath: \\blog\\source\\_posts\\leetcode #3 无重复字符的最长子串.md\n * @Description: \n * \n * Copyright (c) 2023 by weiekko weiekko@gmail.com, All Rights Reserved. \n-->\n<h2 id=\"15-三数之和\"><a href=\"#15-三数之和\" class=\"headerlink\" title=\"15. 三数之和\"></a>15. 三数之和</h2><p>复制粘贴</p>\n<h2 id=\"25-K-个一组翻转链表\"><a href=\"#25-K-个一组翻转链表\" class=\"headerlink\" title=\"25. K 个一组翻转链表\"></a>25. K 个一组翻转链表</h2><p>复制粘贴</p>\n<h2 id=\"215-数组中的第K个最大元素\"><a href=\"#215-数组中的第K个最大元素\" class=\"headerlink\" title=\"215. 数组中的第K个最大元素\"></a>215. 数组中的第K个最大元素</h2><p>复制粘贴</p>\n<h2 id=\"LRU-缓存机制\"><a href=\"#LRU-缓存机制\" class=\"headerlink\" title=\"LRU 缓存机制\"></a>LRU 缓存机制</h2><h3 id=\"提交记录\"><a href=\"#提交记录\" class=\"headerlink\" title=\"提交记录\"></a>提交记录</h3><p>是先去b站看了解析视频然后自己写的，很多cpp的内容还是不熟悉，要继续。</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>日期</th>\n<th>语言</th>\n<th>时间</th>\n<th>空间</th>\n<th>优化</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.7 MB</td>\n<td>官方题解</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>372 ms</td>\n<td>161.4 MB</td>\n<td>ai 优化</td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>476 ms</td>\n<td>170.7 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>通过</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>488 ms</td>\n<td>170.8 MB</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>超出时间限制</td>\n<td>2023.10.10</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n<tr>\n<td>执行出错</td>\n<td>2023.10.09</td>\n<td>C++</td>\n<td>N&#x2F;A</td>\n<td>N&#x2F;A</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"自己的最终代码\"><a href=\"#自己的最终代码\" class=\"headerlink\" title=\"自己的最终代码\"></a>自己的最终代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) &#123;</span><br><span class=\"line\">        __cap = capacity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//key = 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = hashmap [key]-&gt;value;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> (kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> kv.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashmap.<span class=\"built_in\">find</span> (key) == hashmap.<span class=\"built_in\">end</span> ())&#123; <span class=\"comment\">// 没找到</span></span><br><span class=\"line\">            <span class=\"comment\">// 满了吗？</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (__cap == hashmap.<span class=\"built_in\">size</span> ())&#123;</span><br><span class=\"line\">                hashmap.<span class=\"built_in\">erase</span> ( value_list.<span class=\"built_in\">back</span> ().key);</span><br><span class=\"line\">                value_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 找到了</span></span><br><span class=\"line\">            <span class=\"comment\">// 删除并添加到头</span></span><br><span class=\"line\"></span><br><span class=\"line\">            value_list.<span class=\"built_in\">erase</span> (hashmap [key]);</span><br><span class=\"line\">            <span class=\"comment\">// 添加</span></span><br><span class=\"line\">            key_value kv;</span><br><span class=\"line\">            kv.key = key;</span><br><span class=\"line\">            kv.value = value;</span><br><span class=\"line\">            value_list.<span class=\"built_in\">push_front</span> ( kv);</span><br><span class=\"line\">            hashmap [key] = value_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> __cap;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">key_value</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> key;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\">        <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> key_value&amp; kv)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> key == kv.key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, list&lt;key_value&gt;::iterator&gt; hashmap;</span><br><span class=\"line\">    list&lt;key_value&gt; value_list;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ai优化\"><a href=\"#ai优化\" class=\"headerlink\" title=\"ai优化\"></a>ai优化</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LRUCache</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">LRUCache</span> (<span class=\"type\">int</span> capacity) : <span class=\"built_in\">capacity</span> (capacity) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 未找到</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将键值对移到链表头部表示最近使用</span></span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cache_map [key]-&gt;second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">put</span> <span class=\"params\">(<span class=\"type\">int</span> key, <span class=\"type\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">find</span> (key) == cache_map.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache_map.<span class=\"built_in\">size</span> () &gt;= capacity) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 缓存已满，删除最久未使用的项目</span></span><br><span class=\"line\">                <span class=\"type\">int</span> lru_key = lru_list.<span class=\"built_in\">back</span> ().first;</span><br><span class=\"line\">                cache_map.<span class=\"built_in\">erase</span> (lru_key);</span><br><span class=\"line\">                lru_list.<span class=\"built_in\">pop_back</span> ();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 添加新项目到链表头部</span></span><br><span class=\"line\">            lru_list.<span class=\"built_in\">push_front</span> (std::<span class=\"built_in\">make_pair</span> (key, value));</span><br><span class=\"line\">            cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 更新已存在的键值对的值，然后移到链表头部表示最近使用</span></span><br><span class=\"line\">            cache_map [key]-&gt;second = value;</span><br><span class=\"line\">            <span class=\"built_in\">moveToFront</span> (key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">    std::unordered_map&lt;<span class=\"type\">int</span>, std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;::iterator&gt; cache_map;</span><br><span class=\"line\">    std::list&lt;std::pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt; lru_list;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将键值对移到链表头部</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">moveToFront</span> <span class=\"params\">(<span class=\"type\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = cache_map [key];</span><br><span class=\"line\">        lru_list.<span class=\"built_in\">splice</span> (lru_list.<span class=\"built_in\">begin</span> (), lru_list, it);</span><br><span class=\"line\">        cache_map [key] = lru_list.<span class=\"built_in\">begin</span> ();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"206-反转链表\"><a href=\"#206-反转链表\" class=\"headerlink\" title=\"206. 反转链表\"></a>206. 反转链表</h2><p>看了下提交记录，应该是复制粘贴，主要是cpp不熟，改天重写一遍</p>\n<p>这里就记录一下官方答案吧</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * struct ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode *next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">reverseList</span><span class=\"params\">(ListNode* head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ListNode* ret = <span class=\"built_in\">reverseList</span>(head-&gt;next);</span><br><span class=\"line\">        head-&gt;next-&gt;next = head;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"3-无重复字符的最长子串\"><a href=\"#3-无重复字符的最长子串\" class=\"headerlink\" title=\"3 无重复字符的最长子串\"></a>3 无重复字符的最长子串</h2><p>独立编写</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lengthOfLongestSubstring</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string temp;</span><br><span class=\"line\">    <span class=\"type\">int</span> ftemp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = s.<span class=\"built_in\">length</span>(); i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) &gt; temp.<span class=\"built_in\">length</span>()) <span class=\"comment\">// 无重复  temp.find(s[s.length() - i]) == -1 但会很大 所以</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 无重复</span></span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 有重复</span></span><br><span class=\"line\">            i += (temp.<span class=\"built_in\">length</span>() - temp.<span class=\"built_in\">find</span>(s[s.<span class=\"built_in\">length</span>() - i]) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            temp.<span class=\"built_in\">push_back</span>(s[s.<span class=\"built_in\">length</span>() - i]);</span><br><span class=\"line\">            ftemp = temp.<span class=\"built_in\">length</span>() &gt; ftemp ? temp.<span class=\"built_in\">length</span>() : ftemp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ftemp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用到的函数\"><a href=\"#使用到的函数\" class=\"headerlink\" title=\"使用到的函数\"></a>使用到的函数</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string::<span class=\"built_in\">find</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 返回c在string中的位置 无则返回string::npos</span></span><br><span class=\"line\">string::<span class=\"built_in\">length</span>() <span class=\"comment\">// 返回string的长度</span></span><br><span class=\"line\">string::<span class=\"built_in\">push_back</span>(<span class=\"type\">char</span> c) <span class=\"comment\">// 在string的末尾添加c</span></span><br><span class=\"line\">string::<span class=\"built_in\">clear</span>() <span class=\"comment\">// 清空string</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>刚开始看错了题</p>\n<p>做完去看评论 发现这个题的思路是滑动窗口 然鹅我不知道那是什么东东 只是大概理解字面意思</p>\n<blockquote>\n<p>这道题主要用到思路是：滑动窗口</p>\n</blockquote>\n<blockquote>\n<p>什么是滑动窗口？</p>\n</blockquote>\n<blockquote>\n<p>其实就是一个队列,比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p>\n</blockquote>\n<blockquote>\n<p>如何移动？</p>\n</blockquote>\n<blockquote>\n<p>我们只要把队列的左边的元素移出就行了，直到满足题目要求！</p>\n</blockquote>\n<blockquote>\n<p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p>\n</blockquote>\n<blockquote>\n<p>时间复杂度：O(n)O(n)O(n)</p>\n</blockquote>\n<blockquote>\n<p>作者：powcai<br>链接：<a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/\">https://leetcode.cn/problems/longest-substring-without-repeating-characters/solutions/3982/hua-dong-chuang-kou-by-powcai/</a></p>\n</blockquote>\n<blockquote>\n<p>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>c++ 很多特性还不会用 要继续学习</p>\n","categories":[],"tags":[{"name":"😄leetcode","path":"api/tags/😄leetcode.json"}]}