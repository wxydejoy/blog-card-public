[{"title":"博主近况","date":"2021-11-02T08:05:00.000Z","url":"/posts/undefined/","tags":[["🌄","/tags/%F0%9F%8C%84/"]],"categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":"目前正在备战考研 目标本校，难度一般，不过我的目标是400分（去年复试线是327），满分500。 目标专业 02(机械（航天工程、船舶工程、机器人工程）) 1(全日制) 综合性比较强的专业。 就这样"},{"title":"胡思乱想和那些未来要填的坑","date":"2021-08-18T07:36:15.000Z","url":"/posts/e32/","categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":"%% tip home%%我是一个偶尔胡思乱想的人，偶尔有一些好点子还是很不错的。%% endtip%% 胡思乱想感情是很宝贵的东西，但也是很廉价的东西–庆余年 除了吃喝拉撒这种生物本能，世上没有什么天经地义的事情，那些都是古往今来圣贤哲学家构建出来的。–徐涛 形而上学，不行下学中国的部分软弱男明星可能是国外的阴谋 填坑%% checkbox fluent search 软件介绍%%%% checkbox 学学js%% %% checkbox 正则表达式%% 想写的文章80分万岁"},{"title":"关于小米的一些个人看法","date":"2021-08-05T13:05:00.000Z","url":"/posts/744f/","tags":[["📱 小米","/tags/%F0%9F%93%B1-%E5%B0%8F%E7%B1%B3/"]],"categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":"%%% tip home %%%-仅仅是个人看法,不喜勿喷,不想吵架.%%% endtip %%%- 我的手机 在miui+上面的截图,懒得手机截图了 刷的乌龟官改包,至于为什么不用原版,乌龟有个工具包,挺好用的. 工具包截图 乌龟的好像是开发板改的,基本跟原版差不多吧 目前感觉还不错流畅度 动画比之前是好多了 还不错的感觉 偶尔卡顿 感受不明显续航 我的小米⑨ 我换过中电的电池 好像是3800左右 一天一两充的样子 ,亮屏玩不了多久 只能说 够用发热 平常不打游戏 打游戏也问题不大 感觉还好 满分5分 给个4分应该不过分 毕竟是老机器了 而且最近一直有新功能在更新,感觉还不错 网上的言论网上说什么的都有,个人感觉喷子居多 我觉得有些点是被舆论放大很多,其实有些是小问题 至于某些型号发热 比如 火龙888 这个我觉得大概率是真的 毕竟那么多人喷 也不可能空穴来风 而且888也是一头火龙 小米的调校本来就一般 这些都不是我在意的点,重点在下面 近期关键问题小米社区屏蔽关键词 发热 掉帧 等等讲真我刚开始看到这个觉得不可能,小米那么开放,肯定不是真的 但我去搜索 真的被屏蔽了 被网友发现之前 被网友骂了之后 有些词还是被屏蔽,没用 到这里其实也还好吧,为了压制舆论,我也理解,勉强接受 小米直面会耍猴就这个,看过的应该都想喷,果核剥壳也发推送讲这个真的太耍猴了,预告说讲讲近期问题,mix4什么的,还有粉丝关注的问题巴拉巴拉 结果 放完广告就没了 我刚开始以为是线路出问题了 结果 没了 没了 真耍猴 然后各种推迟 小米你的信用哪去了 内测规则改动虽然我没进入内测区 但我好歹在开发板区里面 来看看规则吧 这不是 强行打工么 真拿米粉当屌丝 结语我之前喜欢魅族,现在依旧喜欢,虽然魅族管理也是瞎搞,但手机颜值和flyme真的没得说,从pro7的智慧屏开始凉凉,之后就没好过 那天跟室友开玩笑说,魅族从后屏开始凉凉,小米会不会也这样 没想到 一语成谶 就看小米后面的动作了 如果 只是 如果 如果mix4让粉丝伤心 那小米真的要走下坡路了 至少数码圈子不行了 就像当年的魅族 慢慢的慢慢的 没了没了 没了 但 如果 mix4 惊艳粉丝 凭一己之力 力压群雄,称霸数码圈 那 小米的未来可期 超越苹果 也不是没有可能 但是 但是 但是 如果 小米用惊艳 mix4 配上 miui 版本 小米的未来 我看不到 至少 无法 超越 苹果 就这 希望 MIX4 能 足够惊艳 小米 未来可期"},{"title":"I2C接口及其应用","date":"2021-08-04T19:45:46.000Z","url":"/posts/218/","categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"I2C接口及其应用总线(Bus)是计算机世界的关键概念，数据总线、地址总线、控制总线(统称三总线)等用于MCU片内的CPU、存储器和I/O功能单元之间互联，我们熟悉的USB、Ethernet等通讯总线常用于系统间通讯(将在第9章了解这些总线)， 还有一些我们不熟悉但用来连接嵌入式系统内部组件的重要总线，过去我们通常把MCU片上的三总线延伸到片外用于连接系统内组件，这种伪共享型并行总线不仅占用很多I/O引脚， 还使得MCU的片外功能组件占用很大的PCB面积，除了高带宽和大数据量的视觉传感器、大屏幕高分辨率的点阵显示器等组件仍在使用此类总线外，现今的大多数嵌入式系统内组件都使用少信号线的通讯总线。 嵌入式系统内部(组件之间)的数字通讯总线接口主要包括1-Wire(单总线)、2-Wire(即I2C)、SPI(3-/4-Wire)、I2S(IC之间音频总线)和TTL异步串口等。除了I2S和异步串口之外，其他通讯接口所使用的信号线个数如其名称。I2S与I2C一样都由Philips电子部门提出，I2S专门用于PCM(脉冲编码调制)等音频数据传输，一般使用3或4根信号线即可传输单声道或立体声音频数据。 异步串口不仅用于嵌入式系统内部的组件之间也用于嵌入式系统之间通讯，譬如我们使用该接口实现BlueFi与电脑之间传输数据，双工的异步串口使用独立的数据发送和接收信号线，单工通讯则只需要其中一根信号线即可，我们将在第7章详细了解该接口。SPI接口是一种多组件伪共享的总线，但每个从组件必须有额外独立的片选(Chip Select)，第6章将会详细探讨该接口。I2C(集成电路互联接口)和单总线都是真正的多组件共享总线，分别使用2根和1根信号线即可连接上百个嵌入式系统组件。 本章将详细了解I2C主从设备的接口单元结构组成和工作原理、通讯时序和协议、主/从模式的工作流程和编程控制，并以BlueFi板载的温湿度、加速度和陀螺仪等传感器为例掌握I2C类组件的接口应用和编程。 通讯接口相关的基础概念： 双工，允许通讯双方之间互相传输数据。按通讯收发机制又分为全双工和半双工 全双工，允许通讯双方同时互相发送和接收数据，这意味着通讯接口拥有2各独立的信息收发通道 半双工，允许通讯双方互相传输数据，但任意时刻仅允许一个发送者(另一个则为接收者) 单工，只允许单方向传输数据，通讯双发的角色是固定的：一个发送者，一个接收者 并行通讯，传统的三总线是典型的并行通讯，每一个时钟周期能够传输半字节/整字节/多字节(由数据总线宽度决定)信息 串行通讯，每一个时钟周期只能传输单个二进制位，将待传输的数据按MSB(最高位)到LSB(最低位)或反之的顺序逐位传输 同步串行通讯，使用独立的数据线和同步时钟线的串行通讯接口，每一个数据位时钟与一个时钟对齐 异步串行通讯，无同步时钟线，仅用一根数据线的串行通讯接口，仅使用一个或若干个特殊同步位来对齐字节数据 5.1 I2C通讯接口I2C是一种典型的同步串行通讯接口，单个接口支持单主多从、多主多从(但任何时刻仅有一个主机)等模态的多组件间半双工通讯。虽然I2C协议支持多主多从的模态，但实际应用中绝大多数几乎都是单主多从模态，本章仅限这种常见的I2C模态。 上世纪80年代Philips电子部门定义I2C(Inter-Integrated Circuit的缩写)通讯总线的主要目的是用于连接计算机周边的音频和视频等低速设备，最初定义的通讯时钟速度是100KHz(那个时候的音视频数据流极地)，I2C发展到今天已经支持100KHz、400KHz、1MHz、3.4MHz和5MHz等多种时钟速度。现存很多种派生型I2C接口，最著名的是Intel提出的SMBus(系统管理总线)，目前仍用于计算机周边设备接口的配置等领域，譬如现在所开发的音视频设备、视觉传感器和点阵图形显示器接口中常用I2C或SMBus作为这些设备的参数配置通讯接口。 随着嵌入式计算机系统和物联网的飞速发展，I2C逐步成为系统内各功能组件之间最常见的互联总线之一，仅占用MCU的2个I/O引脚就可以将系统内的最高达128个组件连接起来。I2C是真正的多组件共享总线，不仅占用极少的MCU资源，嵌入式系统PCB板的布局和走线也非常简单。图5.1是BlueFi开源板上的4种传感器与主控制器之间的连接示意图。 图5.1 BlueFi开源板上4种传感器的接口电路 理论上，单个I2C接口能够连接高达128个组件。这需要每一个组件拥有一个惟一的7位地址码，称之为I2C从地址，图5.1中的每种I2C接口传感器拥有惟一的从地址。这意味着，同一个型号的I2C接口组件不能同时连接到单个I2C接口上，除非他的I2C从地址是可配置的。譬如，NXP的16通道PWM控制器——PCA9685采用I2C接口且具有3个从地址配置输入引脚，意味着他可以配置为8种不同从地址，单个I2C接口总线上允许最多连接8个PCA9685器件(其基地址为0x40，可配置的从地址为0x40~0x47)。也有很多I2C器件的从地址是不可配置的，譬如抗疫期间常用的一种24x32阵列红外温度传感器(IR array thermal sensors)——Melexis的MLX90640，其惟一的从地址为0x33，单个I2C接口上只能连接一个这种传感器，如果想要在一个热成像系统内同时使用多个这种阵列传感器以成倍地提升成像的像素数，如何设计传感器接口才能满足需求呢？本章的学习将会帮助我们实现这一目标。 I2C接口的两个信号分别称作SCL和SDA，SCL是主设备输出的同步时钟信号，SDA是双向的串行数据信号。虽然SCL是单方向的信号，只能从主设备输出，但为支持多主多从模态，实际的I2C接口单元的SCL信号仍被定义成双向的。I2C能够实现真正的多组件共享总线应归功于独特的“线与(wire-AND)”接口设计，如图5.1所示。 图5.2 共享总线的“线与”接口电路 上图中两个“线与”接口信号的外部上拉电阻是必须的，上拉电阻的阻值选择与该接口的互联设备数量、传输线长度、分布电容和通讯速度等有关，一般在2K~47K欧之间。图中使用MOS仅是原理性示意的目的，实际I2C接口组件的硬件实现又多种选择，譬如使用三态门电路。当主机发送-从机接收数据位流时，数据位流的“1”/“0”被转换为“高”/“低”电平随着同步时钟信号SCL而顺序地出现在SDA上，SCL和SDA两个信号都由I2C主机驱动，I2C从机根据SCL信号同步地逐位锁存数据位流信号并形成字节数据。当从机发送-主机接收数据位流时，I2C主机输出同步时钟信号SCL给工作中的从机，I2C从机根据SCL信号同步地将待传输的数据位流逐位地发送到SDA上，同时I2C主机同步地接收数据位流。 虽然同步发送和接收数据位流的描述有点拗口，但具体的实现却非常简单，如果你能记起数字电路课程所掌握的“移位寄存器”的概念。I2C接口的移位寄存器仅有8位宽度，这是因为I2C接口采用单字节的数据帧格式。I2C支持多字节连续读或写操作，但始终保持单字节帧，相邻的字节帧之间必须有一个接收者的应答位(ACK)。按通讯领域的规则，这个接收者的ACK位是帧同步的目的。 为了更好地理解通讯协议中的“同步”，需要对I2C接口传输数据帧(字节)的时序稍作了解，如图5.3所示，(a)给出单帧/单字节的数据传输时序，(b)给出2(或更多)帧/字节的数据传输时序。 图5.3 I2C接口传输数据的时序(/协议) 对于I2C通讯接口的数据帧传输，不必刻意区分时序和通讯协议，虽然时序仅规定总线上信号之间时空关系，通讯协议却是更宽泛的概念。I2C接口的每一次数据传输必须以“START”时序开始并以“STOP”时序终止，由于I2C接口仅支持单字节的数据帧，每帧/字节数据必须以数据接收者的“ACK”为结束。“START”、“STOP”、“ACK”的作用都是为了“同步”目的，对比单字节和两字节传输时序时会发现“ACK”尤为重要，完全可以把“ACK”理解为字节同步位。正是这些特殊的同步状态才让I2C通讯接口更加可靠、稳定。 值得注意的是，I2C通讯接口传输数据位的顺序按最高位(MSB)先发送、最低位(LSB)最后发送。这在上图中已明确标示。 I2C通讯接口的连续读/写操作是指，从I2C从机上读取某些连续地址的寄存器内容时，或者向I2C从机上某些连续地址的寄存器顺序地写入内容时，I2C主机首先传输给从机一个待读/待写的寄存器起始地址(仍可以是8/16/32位地址信息)，然后读取/写入第一个字节，接收者给出“ACK”，接着继续读取/写入下一个字节，接收者给出“ACK”，如此重复直到连续读/写操作完毕，期间不必再指定读取/写入的寄存器地址，因为每读/写一个字节之后，下一个寄存器地址默认是前一个操作的地址自增1。 高效率的批量读/写操作的支持，源于I2C通讯接口组件的RAM型寄存器映射机制。从图5.3可以看出，单字节或连续多字节的数据传输期间，要求主机和从机都是“Ready”状态，不允许任何“Wating”状态迫使暂停传输，这就要求主机读操作期间从机上的待读数据是全部“Ready”状态，主机写操作期间从机上的待写入寄存器也全部“Ready”状态。显然，这就要求主机和从机上所有的I2C通讯接口的寄存器具有RAM的操作特性。现今的半导体技术，满足这一要求是非常容易的。对于I2C通讯接口单元的硬件实现，目前普遍采用有限状态机(FSM)和RAM型寄存器的组合，这样设计不仅将传输控制和数据流分离(更容易实现)，允许I2C接口的功能组件内部单元也采用存储器映射机制(在第2章已探讨过)。譬如，一个I2C接口的数字湿度传感器，湿度信号转换(成电信号)、采集(ADC)和滤波等过程由湿度采样控制的状态机按照设定的采样周期自治地工作，并将每次采样结果自动保存在特定地址的寄存器内，当I2C主机需要读取湿度信息时，湿度传感器直接输出最新更新的湿度值，I2C主机无需启动再等待数百毫秒后读取湿度结果。 如图5.4，I2C通讯接口的主机，通常可以理解为MCU的片上I2C接口功能单元；I2C通讯接口从机的片内功能单元的配置、数据/状态等都被映射到寄存器区；主机通过读/写寄存器实现对从机的控制和数据/状态的获取。 图5.4 I2C通讯接口的主机和从机的结构组成 现在我们可以来回答“I2C从地址为什么是7位？” 当主机需要访问某个从机的某个/某些寄存器时，首先发出7位从地址和1位“R/W”组成的“读/写指定从地址”的指令帧，当“R/W=1”时为读，反之为写。与从地址匹配的从机被选择，即被选中的从机的传输控制状态机被激活。 接着主机发出寄存器地址信息帧，根据从机上寄存器资源(和从机的功能)的多少，或许超过1个字节就需要使用批量传输模式，被选中的从机将会把接收到的地址信息传入地址译码器，于是对应地址的寄存器被选择。现在我们的I2C接口主机已经选择指定的从机及其内部的寄存器。 最后，主机和从机的传输控制状态机将会根据第一帧的“R/W”位信息完成进一步操作。如果“R/W=1”，主机驱动SCL输出同步时钟信号，从机上被选择的寄存器内容自动填入输出移位寄存器，并随着SCL同步时钟逐位顺序地输出到SDA线上，主机驱动SCL的同时会在SCL下降沿出采样SDA线并移入输出移位寄存器。如果“R/W=0”，主机驱动SCL输出同步时钟信号，同时在SCL低电平期间将输出移位寄存器的内容逐位顺序地输出到SDA线上，同时从机随着SCL同步时钟信号采样SDA线并移入输入移位寄存器，一个字节传输完毕后，将输入移位寄存器的字节内容保存到被选择寄存器中。 简而言之，一次I2C通讯接口操作包括三步，主机使用7位从机地址和读/写控制位选中I2C总线上的从机，然后指定从机的寄存器(起始)地址，最后读/写从机的寄存器。使用从机惟一地址编码的寻址方法，与传统三总线接口、SPI接口等伪共享总线相比，I2C接口没有专用的从机选择信号线，既节约MCU的I/O引脚又能简化PCB布板。当我们认识到真正的共享总线型I2C通讯接口带来的方便时，或许也会遇到另外一些困难(好坏总是相伴而来)，譬如一个系统内I2C组件的电平电压、时钟速度等不一致。 遇到接口两端的电平电压不一致时，通常会想到使用电平转换逻辑门(Level shifter)来解决，但在I2C通讯接口的总线上使用的电平转换必须支持双向传输!一种简易的支持双向传输的电平转换接口可用于I2C总线 [2]_ ，如图5.5所示。 图5.5 使用电平转换电路让I2C通讯接口支持不同电平电压 如果设计系统时遇到多个从机的时钟速度不一致的问题，留给你来解决。前面我们已经初步了解I2C通讯接口的硬件和时序，包括总线架构、线与和移位寄存器结构、时序/协议、RAM型存储器映射及访问、电平匹配等。I2C通讯接口软件如何实现呢？尤其面对一个系统或单个I2C接口上连接着很多个I2C接口的功能组件时，合理封装接口软件是非常重要的。我们仍然使用分层抽象的思想来封装I2C接口软件，如图5.6所示。 图5.6 I2C通讯接口软件分层封装 I2C接口的硬件层，除了硬件电路设计前需查阅具体的MCU那些I/O引脚可用于I2C接口，以及系统所用的I2C组件的电平电压是否一致外，其他工作几乎都是软件接口设计，根据MCU片上功能单元的存储器映射机制，可以想象这些软件的工作就是访问存储器单元配置I2C接口(包括时钟速度、引脚、数据发送和接收中断等)、使能和禁止I2C接口，以及中断服务程序等底层操作。凡涉及存储器访问的操作都是很繁琐的，而且几乎都是没有可移植性代码。幸运的是，我们无须编写这些代码，源文件都由半导体厂商提供。 I2C接口的硬件抽象层具有承上启下的作用，封装合理的I2C接口硬件抽象层是系统内所有I2C功能组件的共享代码。向下访问MCU硬件层接口(那些具体的MCU的存储器资源访问)实现I2C接口的基本协议，包括启动时序“beginTransmission”、停止时序“endTransmission”、字节帧批量输出“write()”、输入“requestFrom()”和“read()”等，以及数据接收中断“onReceive()”(仅从机模式)、主机请求中断“onRequest()”(仅从机模式)等中断服务程序。向上提供I2C通讯协议的实现接口。 对于任意的I2C组件的操作，我们只需要访问其寄存器即可实现目标功能，譬如读数字湿度传感器的湿度寄存器到变量(根据湿度的分辨率或许需要连续地读多个寄存器)。一个系统内使用的每一种I2C组件的从地址、寄存器列表等都是固定的(常量)，调用硬件抽象层的接口访问寄存器实现I2C组件的功能封装，这部分工作属于BSP的一部分。我们已经在前一章中多次实施BSP代码，本章后续内容将会实施I2C组件的BSP。I2C接口软件的BSP部分的基本实施规则就是，隐藏寄存器及其访问操作，按照I2C组件的功能封装参数配置和功能操作接口，譬如设置温湿度传感器分辨率、获取当前的环境湿度或当前温度、配置加速度传感器的量程、读取当加速度的3分量等。 用户层调用特定开源板的BSP接口实现传感器应用，如环境温度或湿度测量及处理(滤波、显示、存储到本地或云端)、根据加速度和陀螺仪的分量值估算姿态、根据当前姿态角调整飞控系统驱动马达转速等。 以BlueFi开源板和兼容Arduino的nrf52开源软件包为例，硬件层源码位于“../Hardware/nrf52/版本号/cores/nordic/hal/”文件夹，硬件抽象层源码位于“../Hardware/nrf52/版本号/libraries/Wire/”，I2C通讯接口的BSP与其他接口的BSP都在一个文件夹中，下一节开始实施I2C接口部分的BSP编码。 I2C接口协议的规范和实现方法 [3]_ 并不复杂，接口硬件方面仅仅是数字电路领域的基础知识(线与、同步时钟和锁存、移位寄存器等)，接口协议方面只涉及通讯领域的字节同步基本概念，接口软件方面我们仍采用分层抽象的思想来封装。 下一节将以主机的角色深入了解MCU片上的I2C功能单元的结构和数据传输操作流程，硬件层和硬件抽象层的接口，以及BSP层软件封装。如何使用I2C通讯接口连接两个MCU实现双向通讯，这是再下一节的核心内容。 参考文献：:: [1]  [2]  [3]  5.2 I2C主机模式主机(Master)模式是MCU片上I2C功能单元的缺省工作模式，MCU仅使用2个I/O引脚就可以通过从机（Slave)寻址方式与上百个I2C从机通讯(或称作会话)。按照I2C协议规范，SCL信号由主机驱动(主机输出的同步时钟信号)，SDA信号是双向驱动的。主机与任一从机之间的通讯都必须以“Start时序”作为开始，然后主机发送的第一帧数据必须是由“(7位从地址&lt;&lt;1) | R/W位”组成的寻址帧，被寻址的从机被选中并给向主机发送“ACK时序”确认，后续两者之间的通讯始终以主机发出的同步时钟信号为节拍，并以8位数据和1位接收者“ACK时序”为一个数据帧，当主机发出“Stop时序”后结束本次通讯，主机和从机双方都暂时释放I2C总线。很显然，I2C总线的主从机之间的每次会话都以“Start时序”和“Stop时序”为界定，即使与同一个从机之间的多次会话也都遵循这一原则。 当MCU片上I2C功能单元工作在主机模式时，I2C接口的存储器(譬如小容量EEPROM非易失性数据存储器)、传感器、执行器和显示器等功能组件为从机，我们编程控制MCU片上I2C功能单元访问这些片外I2C组件上的寄存器以实现他们的功能，前一节我们已经给出分层的I2C通讯接口软件的框架，参见图5.6。绝大多数嵌入式系统软件开发平台都包含有硬件层和硬件抽象层的接口库，硬件层是通过访问I2C功能单元映射的存储器实现I2C通讯接口的硬件控制，硬件抽象层是I2C协议的实现。在Arduino开源平台上，这两个层次的接口库都是以源码形式提供给系统开发者，其中硬件层由半导体厂商提供，软件抽象层则是由开源社区的贡献者按照Arduino开源平台的“Wire”库的接口规范所编写的特定系列MCU的I2C接口的兼容库，Arduino标准的“Wire”库共有10种接口(包含主机模式的和从机模式的接口)，详见页面 [1]_ ，对应的源代码见“../Hardware/nrf52/版本号/libraries/Wire/Wire.h”文件，使用该I2C通讯接口前必须用“#include &lt;Wire.h&gt;”语句来引用这些接口。 值得注意的是，Arduino的I2C通讯接口的硬件抽象层不仅支持主机模式，同时还支持从机模式。关于MCU片上I2C工作在从机模式的情形，将在下一节探讨。 .. Note:: I2C硬件抽象层接口(仅主机模式的接口) **begin()**，将I2C通讯接口配置为主机模式，并配置SCL和SDA的I/O引脚、SCL时钟速度(使用默认的设置)、中断等。注意，只能在初始化时调用一次 **setClock(clockFrequency)**，重置I2C通讯接口的SCL时钟速度，参数clockFrequency以Hz为单位，譬如400,000 **beginTransmission(slave_addr)**，产生“Start时序”，并将后续会话的从地址参数配置为slave_addr(7位地址!!)，直到“endTransmission()”执行后 **endTransmission(stop)**，(如果发送缓冲区不为空)将发送缓冲区中的数据传送给指定的从机；参数“stop”的有效值是“true”或“false”，该参数指定本次传输结束时是否产生“Stop时序”释放I2C总线 **write(val)/**，向从机写数据，必须在“beginTransmission(slave_addr)”和“endTransmission()”之间调用该接口。这个接口还有另外两种形式：write(val[], len)和write(string) **requestFrom(slave_addr, quantity, stop)**，向指定地址(slave_addr)的从机请求(读取)指定个数(quantity)的数据，然后使用“available()”和“read()”检查并读取数据；”stop”参数的有效值是”true”或”false”，用于指定本次请求操作结束时是否发送STOP时序 **available()**，返回接收缓冲区中有效的/可读取的字节数据个数，在调用“requestFrom(slave_addr, quantity)”后使用该接口检查请求回来的有效数据 **read()**，从接收缓冲区读取请求到的有效数据 基于这些I2C通讯协议的实现(即I2C硬件抽象层)接口，对于给定的嵌入式系统的I2C硬件层，我们可以就可以定义系统内I2C接口的功能组件的BSP接口。按照图5.6所示的软件架构，每一个I2C功能组件的BSP层有4个基本接口：begin(i2cBus)、readRegister(regAddr)、readRegisters(regAddr, rBuf[], num)、writeRegisters(regAddr, wBuf[], num)。其中“begin(i2cBus)”是IC通讯接口初始化，另外3个接口的功能与名称一致。使用这些基本接口，我们就可以直接访问I2C功能组件上的寄存器实现其特设的功能，譬如获取温湿度或加速度值、配置采样率等。 此外，每一个I2C功能组件的BSP层接口最好的封装形式是类(class)的形式，这样就可以把该组件的从地址、寄存器列表及其4个基本接口等定义为私有的变量和(内部)接口以避免与其他I2C功能组件的接口混淆。 现在我们以BlueFi开源板上的6DoF惯性测量单元(IMU)——LSM6DS33为例，使用Arduino开源平台的(nRF52)I2C硬件层和硬件抽象层接口实现加速度传感器的用户接口，即BlueFi开源板的BSP层的加速度传感器的代码实现。具体的实现代码由以下两个文件组成： (BlueFi_LSM6DS3.h) 注意，这个版本仅是I2C通讯接口的示例目的，并不是完整的IMU功能接口。所有外部接口都在LSM6DS3类的“public”域，私有的/内部的接口在“private”域。读单个/多个寄存器、写单个/多个寄存器等操作是每一种I2C功能组件的最基本的4种内部接口实现。此外，连接该组件所用的硬件抽象层的I2C类接口，使用指针型的内部私有变量“__wire”来保存。 (BlueFi_LSM6DS3.cpp) 上面的LSM6DS3类接口主要包括，初始化(begin)、读取3-DoF加速度(/陀螺仪)的三坐标分量值、检查LSM6DS3内部状态寄存器(LSM6DS3_STATUS_REG)确定是否有数据可读等。完成这个LSM6DS3类接口的代码编写后，将两个源文件(BlueFi_LSM6DS3.h和BlueFi_LSM6DS3.cpp)保存到“../Documents/Arduino/libraries/BlueFi/src/utility/”文件夹，然后打开“../Documents/Arduino/libraries/BlueFi/src/”文件夹中的BlueFi.h文件，并在BlueFi类的“public”域增加“LSM6DS3 imu = LSM6DS3(Wire1, 0x6A);”语句，定义一个名叫“imu”的LSM6DS3类接口；打开该文件夹中的“BlueFi.cpp”文件，为begin()接口函数增加“imu.begin();”语句，当BlueFi开源板初始化时调用LSM6DS3类接口——begin()对“imu”对象初始化。现在，我们的BlueFi开源板的BSP已具有读取加速度/陀螺仪原始数据的接口。注意，初始化LSM6DS3类对象“imu”时，将加速度/陀螺仪的采样率设置为104Hz。 为了更好地了解LSM6DS3的用法，详见 [2]_ 。 下面的简单示例代码可能演示LSM6DS3类接口的用法： (LSM6DS3_accelerometer_simplest.ino) 现在你可以使用Arduino IDE编译并下载上面这个简单示例，当程序下载到BlueFi开源板上之后，打开串口监视器(或串口绘图器)就可以看到加速度传感器三分量的原始数据(或三色折线图)，保持USB数据线完好连接到电脑，再通过摇晃、移动、旋转BlueFi开源板，观察加速度三分量的值与你的操作之间存在什么样的关联关系。在这个示例代码运行期间，我们使用Arduino IDE的串口绘图器绘制的加速度三分量的折线图，参考图5.7所示。 图5.7 使用加速度传感器原始数据绘制的图形 将上面示例代码稍作修改就可以使用LSM6DS3类接口读取3DoF陀螺仪三分量的原始数据，示例代码如下： (LSM6DS3_gyroscope_simplest.ino) IMU用于运动物体的姿态和位置估算，譬如飞行器和汽车等姿态稳定和导航定位(无GPS信号期间的短距离定位)。加速度、陀螺仪和地磁传感器(电子罗盘)是IMU的基本测量传感器，基于这些传感器的原始数据(9个分量)并使用姿态和位置估算算法即可确定飞行器和汽车等运动物体的当前姿态和位置。我们将在后续的内容中给出完整的IMU接口及其算法，本节仅仅是作为I2C通讯接口的示例使用。 接着，我们以BlueFi开源板上的数字环境温湿度传感器——SHT30-DIS为例，使用Arduino开源平台的(nRF52)I2C硬件层和硬件抽象层接口实现温湿度传感器的用户接口，即BlueFi开源板的BSP层的温湿度传感器的代码实现。具体的实现代码由以下两个文件组成： (BlueFi_SHT30.h) 这个SHT30类温湿度传感器接口主要包括，初始化(begin)和温湿度测量和数据处理的状态机(RHT_FSM)，以及3个成员变量：状态机的温湿度结果是否可用(isReady)、当前温度(temperature，摄氏度为单位)、当前相对湿度(humidity)。此外，SHT30类还有一些辅助功能接口，包括传感器状态读回(readStatus)、传感器复位(reset)、传感器内部加热器的控制(heater)和状态查询(isHeaterEnabled)。SHT30类的内部/私有接口包括写命令字(writeCommand)、读多个寄存器(readRegisters)和写多个寄存器(writeRegisters)，私有成员变量包括硬件抽象层的I2C类接口指针、从机地址等。 (BlueFi_SHT30.cpp) 可以从以下几个方面对比LSM6DS3和SHT30-DIS两种I2C传感器的接口： 接口封装的结构 寄存器的读写 两种传感器接口的封装都是采用C/C++的类结构。“public”域是外部接口，“private”域是内部接口。接口类型不仅有类成员函数，也有成员变量。因此，C/C++的类相关的概念和用法在这里完全通用。 两种传感器的寄存器读写接口虽然都是私有的，但区别较大。这是因为，LSM6DS3内部功能单元采用RAM型存储器映射的模式，但SHT30-DIS采用写入不同命令字来控制内部功能单元。SHT30-DIS没有存储器映射机制，对传感器内部功能单元的每一次操作都必须先写入命令字(16位无符号型)，譬如启动温湿度测量、启动/停止内部加热器等，然后再执行多字节读操作获取传感器的测量结果、查询内部状态等。此外，从SHT30-DIS读回的数据(温湿度和状态)也都是固定3字节格式：2字节数据和1字节CRC(循环冗余校验)。SHT30-DIS使用8位CRC算法，算法所使用的多项式、初始值都在其数据页 [3]_ 第14页给出描述。 我们用一个示例来演示如何使用SHT30类温湿度传感器接口。本示例首先初始化BlueFi开源板上所以资源(含温湿度传感器及其接口)，在主循环中调用bluefi.rht.RHT_FSM()执行温湿度测量的状态机更新温湿度数据到变量bluefi.rht.temperature和bluefi.rht.humidity，当状态机完成一次温湿度数据更新时bluefi.rht.isReady被置位为true，主循环测试该状态并将当前温湿度结果打印到串口控制台。示例代码如下： (SHT30_simplest.ino) 将上面示例代码复制-粘贴到Arduino IDE并编译-下载到BlueFi开源板上，当BlueFi执行示例程序期间，打开Arduin IDE的串口监视器，我们将会看到主循环程序输出到串口控制台(print)的文本格式的当前温湿度信息，参考图5.8所示。 图5.8 使用SHT30类接口读取当前温湿度并输出到字符控制台的效果 现在你可以使用SHT30类接口来监测本地的环境温湿度，确定本地区最舒适的温湿度是什么季节？对应的具体环境温湿度是多少呢？标定是正确使用传感器的基本要求。如何标定温湿度传感器呢？ 在Python解释器环境如何使用I2C通讯接口的主机模式进行编程呢？请参考第4.1节末尾的步骤，下载BlueFi的Python解释器固件，并双击BlueFi的复位按钮，并将固件拖放到BLUEFIBOOT磁盘，将BlueFi恢复到执行Python解释器模式，我们的电脑资源管理器中将会出现名为“CIRCUITPY”磁盘。 .. Note:: Python解释器的安全模式 单击BlueFi的复位按钮，当第1颗彩灯(靠近复位按钮)显示黄色状态时，再次按下复位按钮，迫使BlueFi终止执行用户脚本程序，并进入安全模式，此时第一颗彩灯呈黄色呼吸灯效果 当Python解释器在执行某些脚本程序时，可能会导致不出现“CIRCUITPY”磁盘，可以通过强制进入Python解释器的安全模式来终止脚本执行 在Python解释器的安全模式，仍可以修改“CIRCUITPY”磁盘上任一文件，但Python解释器不会立即执行更新后的code.py程序 只能通过按复位按钮才能退出Python解释器的安全模式 “CIRCUITPY/hiibot_bluefi/sensors.py”是BlueFi板上所有传感器的Python接口库模块，在我们的Python脚本程序中直接导入(import)这个模块就可以访问BlueFi的传感器。将下面的示例代码保存到“/CIRCUITPY/code.py”文件，在BlueFi执行程序期间，我们可以使用任意串口字符控制台(MU编辑器的串口、Arduino IDE的串口监视器等)查看输出，Python解释器的所有字符输出也都会同步地显示在BlueFi的LCD显示屏上。 这个示例输出的文本字符的参考效果，如“T: 30.9388Â°C, RH: 52.6817%”，这显然由第5行“print()”函数中的“format”的作用。示例程序的第2行脚本语句的执行效果是，从“CIRCUITPY/hiibot_bluefi/sensors.py”文件中导入“Sensors类”模块。第3行将“Sensors类”实例化一个名叫“sensor”的对象，并在第5行将该对象的temperature和humidity属性值按指定的字符格式输出到字符控制台。 加速度和陀螺仪传感器——LSM6DS3也有相似的用法，示例代码如下： 这个示例代码的初始化部分与前一个示例完全相同。主循环程序中，首先将加速度和陀螺仪的三分量分别赋给6个变量，然后使用“format”转换成指定格式的字符串输出到字符控制台。其中“{:.2f}”.format(var)是将变量var以浮点数输出且只保留小数点后两位。 事实上，BlueFi开源板上共有4种I2C接口的传感器组件，即温湿度传感器(SHT30-DIS)、加速度和陀螺仪(LSM6DS3)、地磁传感器(LIS3MDL)和集成光学传感器(APDS-9960，含颜色感知、接近感知、手势感知和光强度感知等)。其中加速度、陀螺仪和地磁传感器能组合实现9-DoF惯性测量单元的传感器。这些传感器的Python库模块在“CIRCUITPY/hiibot_bluefi/sensors.py”文件中，你可以直接打开这个Python脚本源文件了解具体的Python接口。 为了便于测试，请先删除“../Documents/Arduino/libraries/BlueFi”文件夹中的全部文件，然后下载下面的压缩文件包，并解压到“../Documents/Arduino/libraries/BlueFi”文件夹中， . :download:本节内容所用到的BlueFi的BSP源文件 &lt;../_static/dl_files/bluefi_ch5_2/BlueFi_bsp_ch5_2.zip&gt; 本节所增加的加速度和陀螺仪传感器、温湿度传感器的接口代码实现和示例程序都已在这个压缩包中。解压到指定文件夹后，直接用Arduino IDE打开对应示例程序即可编译-下载到BlueFi开源板。 在I2C总线上，每一从机都有惟一的7位地址，主机通过寻址从机实现一对一的半双工通讯，包括读写从机上的寄存器或者控制/查询从机上的功能单元。本节以MCU片上功能单元工作在主机模式时，如何通过编程访问各种从机，譬如加速度和陀螺仪传感器、温湿度传感器等。为了能够掌握I2C主机端软件的设计和实现思路，我们采用分层抽象的思想将I2C功能组件相关的接口分层封装，并以加速度和陀螺仪、温湿度传感器为例分别给出软件的实现，方便我们通过对比和总结。虽然我们仅仅是C/C++类封装为例，Python语言的类封装和接口设计并无本质区别，查看“CIRCUITPY/hiibot_bluefi/sensors.py”文件并与上面的C/C++语言的类封装进行对比，有利于理解I2C主机接口的编程和实现。 参考文献：:: [1]  [2]  [3]  ===========================5.3 I2C从机模式=========================== 绝大多数情况，嵌入式系统的MCU都是系统的主控制器，MCU片上I2C功能单元都工作在主机模式与系统内的I2C接口的传感器、执行器或显示器等外设互联。但也有少数情况MCU片上I2C功能单元工作在从机模式，譬如通过I2C接口升级MCU固件，或者通过I2C接口协同工作的两个MCU组成的系统中一个MCU做主机另一个做从机。本节主要了解MCU片上I2C功能单元工作在从机模式下的编程控制。注意，并不是所有MCU片上I2C功能单元都支持主机模式和从机模式，有些MCU仅支持主机模式的I2C接口。 当我们把MCU片上I2C功能单元配置为从机模式时，其内部结构组成如图5.7所示。 图5.7 从机模式的MCU片上I2C功能单元的结构组成 在从机模式下，MCU的I2C接口所使用的I/O引脚中，连接SCL信号的是输入引脚，SDA信号的是双向引脚。根据I2C通讯接口的要求，任一从机都必须有惟一的从机地址，当我们将MCU片上I2C功能单元配置为从机模式时，必须指定本机的7位惟一地址。相对于主机，从机始终是被动的，主机何时寻址本机、读或写操作均有主机发起。因此，从机模式需要配置一定RAM空间用于缓存接收数据，并开启中断，当从模式的I2C接口识别到本机被寻址，并接收到主机的数据时，向CPU发起中断请求并响应主机请求。 Arduino的I2C通讯接口的硬件抽象层不仅支持主机模式，也支持从机模式。从机模式的I2C硬件抽象层接口共有7各，具体接口如下： .. Note:: I2C硬件抽象层接口(仅从机模式的接口) **begin(slave_addr)**，将I2C通讯接口配置为从机模式，并配置惟一的7位从机地址、SCL和SDA的I/O引脚、SCL时钟速度(使用默认的设置)、中断等。注意，只能在初始化时调用一次 **onReceive(cb_rev)**，注册“onReceive”事件的回调函数，当“onReceive”事件发生后需要执行的代码，譬如调用“available()”检查可读数据个数、调用“read()”读取接收缓冲区的数据并处理 **onRequest(cb_req)**，注册“OnRequest”事件的回调函数，当“OnRequest”事件发生后需要执行的代码，譬如调用“write()”发送数据给主机 **write(val)/**，向主机写/发送数据(当主机请求数据时，即“OnRequest”事件发生后)。这个接口还有另外两种形式：write(val[], len)和write(string) **available()**，返回接收缓冲区中有效的/可读取的字节数据个数，即“onReceive”事件发生后使用该接口检查接收缓冲区的有效数据字节数 **read()**，从接收缓冲区读取有效数据 注意，Arduino平台的I2C硬件抽象层的主机模式和从机模式的接口都被封装在“TwoWire类”中，详见页面 [1]_ ，从机模式的接口仅有这6种(具体种类还与Arduino内核的版本有关)，主机模式共8种接口(见前一节)，其中部分接口是主机模式和从机模式共用的，如“write()”、“read()”、“available()”等，部分接口是各自专用的，譬如注册事件的回调函数是从机模式专用的接口，而“beginTransmission()”、“endTransmission()”和“setClock()”是主机模式专用的接口。 使用I2C硬件抽象层的主机模式接口和从机模式接口，两个MCU之间的通讯流程参见图5.8所示。 图5.8 两个MCU之间使用I2C通讯的工作流程(使用硬件抽象层接口) 图中的实线框内的操作是软件部分，实线框外的操作由I2C功能单元的硬件自动完成。除了图中的“主机写-从机读”和“主机读(请求)-从机写”的I2C接口数据传输流程外，还有“主机写-从机读-主机请求-从机写”(简单理解为“主机写后读”)的数据传输流程，这个流程要求主机“write(val)”后调用“endTransmission(false)”执行数据发送且发送完毕后不发起“STOP时序”，即不释放I2C总线，继续向从机请求数据，当从机数据发送完毕后，主机才发起“STOP时序”释放I2C总线。请参照图5.8的流程自行设计“主机写后读”的操作流程。 下面我们找来两个BlueFi，并使用一根型号为“SH1.0mm-4P”双头同向的信号线将他们连接起来。BlueFi开源板带有一个专用的4脚I2C扩展插座，在复位按钮旁边，该插座的4各信号分别为3.3V、GND、SDA、SCL，并顺序排列。使用I2C接口连接两个BlueFi的方法如图5.9所示。 图5.9 使用I2C接口连接两个BlueFi的方法 请注意4芯连接线的型号、脚间距，并确保引脚是同向一一对应的，即两个BlueFi开源板的i2C专用插座的4个脚分别一一对应连接。 现在我们可以参考图5.8所示的流程，分别编写“主机写”和“从机接收”的程序对儿，并分别编译下载到一个BlueFi上执行，使用USB数据线将工作在从机模式的BlueFi连接到电脑，打开Arduino IDE串口监视器可以看到主机写给从机的数据。程序代码如下： (master_write.ino文件，编译并下载到一个BlueFi开源板，他是I2C接口的Master设备) 在这个“主机写”的程序中，首先声明一个TwoWire型指针“__wire”，并在初始化时将这个指针指向BlueFi的I2C接口0，即“Wire”，并使用指针访问这个I2C接口，在初始化阶段将这个I2C接口初始化为主机模式(使用无参数的“begin()”初始化接口)。在主循环中每隔1秒从这个I2C接口写出写字符串“x is 12”，其中字符串中的数值是可变的，根据“static uint8_t x=0;”语句，以及每写出一次后执行“x++;”语句，这个字符串的变化规律是怎么样的呢？ (slaver_receive.ino文件，编译并下载到一个BlueFi开源板，他是I2C接口的Slave设备) “从机接收”程序中，同样使用指针“__wire”指向I2C接口0，即Wire。初始化时使用“__wire-&gt;begin(0x72)”将I2C接口0配置为从机模式，且从地址为114，并使用“__wire-&gt;onReceive(cb_rev);”语句注册“当接收到主机发送的数据”事件的回调函数——“cb_rev(int num)”。定义这个回调函数时，监测I2C接口0是否有数据可读，如果有效数据个数大于1个则读出1个数据并打印到串口字符控制台，最后一个数据作为整数打印到控制台。 注意，从机的程序中使用的回调函数“void cb_rev(int num)”带有的输入参数“int num”是“onReceive”接口指定的，用于传递发生“onReceive”事件时接收缓冲区内有效的数据个数，此示例中未使用这个参数。 最后，根据图5.8的流程，实现“主机请求读”和“从机写”的程序对儿。示例代码如下： (master_request.ino文件，编译并下载到一个BlueFi开源板，他是I2C接口的Master设备) 在这个主机程序中，初始化部分与前一个“主机写”程序完全一样，但是主循环中的程序完全不同。主主循环程序中，每秒从I2C接口0向地址为114的从机请求6字节数据，然后监测接收缓冲区是否有数据可读，如果有则逐个读出并打印到串口字符控制台。 (slaver_send.ino文件，编译并下载到一个BlueFi开源板，他是I2C接口的Slave设备) 在这个“从机写”的程序中，首先初始化I2C接口0，并注册“当主机请求读数据”事件的回调函数“cb_req”。在回调函数“cb_req”中仅发生6个字符给主机。 上面的两对示例程序中，我们仅仅使用I2C硬件抽象层的接口实现两个BlueFi之间通讯，虽然表面上看两对程序各自实现的数据传输都是单工的，即“主机写”和“从机读”、“主机请求”和“从机发送”，实际的输出协议都是双向的。 两个MCU如何使用I2C接口实现双向数据通讯呢？我们可以采用“存储器映射”方案。从机端的数据信息按特定的数据结构(如数组)顺序地存储，主机端首先向从机“写”数据的顺序号来指定数据单元，然后通过请求读取该数据单元，该方法的主机和从机的具体流程参见图5.10所示。 图5.10 使用I2C接口实现两个MCU双向通讯的主机和从机流程(存储器映射) 请根据上图的流程并参考前面的示例程序，分别编写对应的主机端和从机端的程序对儿，并使用两个BlueFi测试程序是否达到目标。 当然，图5.10中的主机流程仅仅是请求从机端指定的静态数据项，因为从机端并没有改变任何数据项。事实上，如果我们允许从机端程序改变图5.10中的数据项，这种改变必须十分的谨慎，因为正在修改数据项时或许会发生回调函数正好读取该数据项，这将引起“竞争”。避免这种竞争的方法之一就是使用“锁(lock)”，数据项操作方在操作前首先检查“锁”的状态，如果被上锁则等待解锁后方可操作，如果未被上锁则先上锁再操作数据项。 本节探讨如何使用I2C硬件抽象层的接口实现两个MCU之间通讯，对于主机端的软件操作和实现方法，与前一节所用的方法并无区别。由于I2C从机始终处于被动状态，I2C硬件抽象层为从机端提供专用的接口，包括“OnReceive”和“OnRequest”两种事件的回调函数，使用回调函数确保从机实时地响应主机的写和请求读操作，当然MCU片上I2C接口功能单元的硬件自动处理主机的寻址，以及事件触发，无需从机端软件干预。 参考文献：:: [1]  ===========================5.4 I2C接口应用设计=========================== I2C通讯接口作为一种真正的多个外设共享的总线，且只需要2根信号线(SCL和SDA)即可实现上百种外设连接，本节进一步探讨如何使用I2C总线拓展嵌入式系统的功能。图5.11是知名开源硬件供应商——SparkFun推出的Qwiic类开源硬件产品应用示例图 [1]_ ，该产品的主控制器带有I2C通讯接口且工作在主机模式，所有扩展功能模块都采用统一的Qwiic接口，并支持顺序串联联或菊花链等多种连接拓扑。目前SparkFun已推出数百种Qwiic接口的主控制器、传感器、显示器、执行器、I/O扩展等模块，几乎可以满足大多数产品原型开发阶段的功能验证和软件开发测试。 图5.11 Qwiic接口产品应用示例(SprakFun) Qwiic采用4根连接线和4脚的1.0mm间距的连接器，推荐使用的连接器内部带有键槽以防插错，4根连接线的信号分别为SCL、SDA、Vcc和GND，即2根电源线和2根I2C接口信号线。本质上，Qwiic接口就是带有电源线的I2C通讯接口。Qwiic接口与传统的4线USB、PS2等接口相似，不仅具有数据接口信号线还具有电源线，使用这样的接口时从机无需额外供电。 此外，另一家知名开源硬件供应商——Adafruit推出的STEMMA QT接口 [2]_ 与Qwiic几乎完全相同，两种接口的所用连接器的机械标准和电气标准完全兼容。这种接口为什么备受欢迎呢？主要原因是I2C接口的共享总线方便嵌入式系统扩展更多种(上百种)功能，以及扩展功能单元的模块化等。图5.12是Qwiic接口或STEMMA QT接口的电路模型。 图5.12 Qwiic/STEMMA QT接口的电路模型 上图中，我们给出4种典型的I2C接口的功能扩展模块的电路模型，左侧两种扩展单元都具有标准I2C通讯接口(从机)，右侧两种都是采用MCU(I2C从机模式)转换为标准I2C通讯接口。 许多集成型I2C接口的传感器，譬如SHT30-DIS、LSM6DS3、VL53L0X(TOF型激光测距传感器)等，以及显示器和RTC，譬如OLED点阵屏等，除了I2C接口和供电之外无需额外的元件和接口，这类传感器和显示器的I2C接口模块非常适合采用Qwiic/STEMMA QT接口，4芯连线就可以将这些模块串联起来并与主控制器的MCU连接起来。还有一些I2C接口的传感器、ADC和DAC，如MPR121(12通道人体触摸感知)、MCP9600(热电偶传感器)、ADS1115(8路ADC)、MCP4728(4路DAC)等，以及I2C接口的电机驱动和I/O扩展单元，譬如PCA9685、MCP23017等，除了I2C接口和供电之外还需要一些特殊连接器与目标传感器、电机等连接。 基于I2C通讯接口也可以实现分布式系统，这样的分布式系统不仅容易开发和维护，而且采用连接子系统的总线拓扑也十分灵活。仅有UART接口的GPS(全球定位系统)/BDS(北斗系统)等模块，可以使用MCU单独设计“I2C-UART”桥接单元将非I2C接口的功能单元连接到I2C总线。 下面用两种具体的设计示例来帮助我们了解上述的电路模型。第一个示例是Adafruit的TOF(Time-Of-Flight)激光测距模块 [3]_ ，该模块的采用ST公司的集成型TOF传感器VL53L0X，具体的电路原理图、PCB和实物参见图5.13。 图5.13 采用Qwiic/STEMMA QT接口的TOF激光测距传感器模块(Adafruit) 这个I2C接口的激光测距模块的有效量程和编程控制API请参阅页面 [4]_ ，该传感器非常适合于机器人避障、抗疫自动测温控制等应用场景。 第二个示例来自SparkFun [5]_ ，这是一种步进电机(或双直流电机)控制模块。该模块使用一颗小型ARM Cortex-M0系列MCU——CY8C4245控制一个步进电机驱动器，并使用I2C从机模式接入I2C总线。 图5.14 采用Qwiic/STEMMA QT接口的步进电机驱动模块(SparkFun) 很显然，上述两种示例都采用Qwiic/STEMMA QT接口，主控制器端用于控制这两种扩展模块的软件几乎相同，主控制器的I2C接口工作在主机模式，两种扩展模块都是I2C从机，他们都具有相同内惟一的I2C从机地址，主机使用惟一的从机地址分别寻址其中某个扩展模块并实现测控功能。请参考第5.2节编写这些扩展功能单元的软件实现，此处不在赘述。 本节使用知名开源硬件供应商推出的Qwiic/STEMMA QT接口类产品为例，详细地探讨基于I2C通讯接口的嵌入式系统原型设计方法和硬件模型。 在前几节的内容中我们已经了解MCU片上I2C功能单元的主机模式和从机模式及其接口和编程控制，现在你可以花一些时间完善BlueFi开源板上I2C接口传感器的BSP，完成这些工作需要参考第5.2节的温湿度传感器(SHT30-DIS)、加速度和陀螺仪传感器(LSM6DS33)的BSP实现，并查阅LSM3MDL和APDS-9960两种传感器的手册，以及github等开源代码库中搜索相关开源代码。 参考文献：:: [1]  [2]  [3]  [4]  [5]  ===========================5.5 本章总结=========================== I2C是一种同步通讯接口，通讯数据信号SDA和同步时钟信号SCL始终保持同步，两者之间的时空关系是I2C接口时序。 I2C是嵌入式系统中的一种真正的共享总线，仅使用2种信号即可实现上百种传感器、执行器、显示器等外设扩展。I2C总线的这种性能得益于I2C接口所采用的“线与”电路结构，以及I2C接口时序和数据传输协议。I2C通讯接口采用主从模式，支持一主多从和多主多从的灵活结构。一主多从的系统结构中，要求每一个从机都有惟一的7位从机地址，主机通过寻址某个指定的从机以实现一对一半双工通讯。多主多从的系统结构中，为实现多个主机同时抢占I2C总线需要每一个I2C主机单元都支持总线仲裁，发起抢占总线的主机根据总线仲裁结果确定是否抢占成功或失败，抢占失败的主机将进入等待，所以多主多从的系统结构的通讯接口操作存在不确定性和非实时性。本章内容中仅涉及最常用的一主多从结构。当单个I2C通讯总线上挂接多种从机时，逻辑电平的电压匹配非常重要，适合于I2C通讯接口电平匹配必须是双向的，我们在本章提供一种简易型电平转换电路(Level Shifter)单元，也可以采用专用的电平转换单元，专用的电平转换单元具有通讯速度高、漏电流小等特点。 嵌入式系统MCU的片上I2C通讯接口具有两种工作模式：主机模式和从机模式。主机模式的I2C接口可用于扩展系统内的各种I2C接口显示器、传感器、执行器等，从机模式下的I2C接口允许MCU作为另一个主控制器的子系统，两个MCU之间可以使用I2C总线实现半双工通讯。 本章中，我们分别以主机和从机两种模式讨论I2C通讯接口的软件封装，仍采用分层抽象的方法，将I2C通讯的软件接口分割为硬件层、硬件抽象层、中间层和用户层。其中，硬件层的接口软件由半导体厂商实现，主要是访问MCU片上I2C功能单元相关的寄存器；硬件抽象层是基于硬件层的软件接口为中间层分别提供I2C主机和从机两种模式的I2C协议实现的软件接口；中间层是针对特定的嵌入式系统内I2C总线上各个I2C功能组件的软件接口，基于硬件抽象层的I2C通讯协议接口访问I2C功能组件上的寄存器等；特定嵌入式系统的用户层直接调用BSP中的相关I2C功能组件接口，无需了解I2C协议和I2C功能组件内寄存器等细节即可使用I2C功能组件。 基于I2C总线的原型系统是较为流行的一种模块化的、快速的原型搭建系统，“如何将各种功能单元设计成具有标准的I2C接口的模块”是此类系统的设计关键，本章给出I2C接口应用设计的电路模型，以及主机和从机模式的软件实现。 通过本章学习，我们了解I2C通讯接口的原理、协议、软硬件应用的设计方法等。I2C通讯接口是现代MCU标配的片上功能单元，也是最常用的嵌入式系统内各组件之间的互联总线。本章内容属于嵌入式系统应用和开发的基础之一。 本章总结如下： 数字通讯相关的基础概念 I2C通讯接口的“线与”电路、时序、协议、寻址方法、通讯流程、电平转换方法等 MCU片上I2C功能单元工作在主机模式时，I2C接口软件的封装和实现 MCU片上I2C功能单元工作在从机模式时，I2C接口的通讯流程和软件实现 I2C总线的原型系统的模型和设计示例 =========================== 思考题=========================== 查阅“双向三态门”电路及其逻辑，并根据图5.2的“线与”接口电路，请试着使用双向三态门单元改进I2C接口单元的硬件接口电路，并分别描述主机发送-从机接收、从机发送-主机接收的两种工作模式的控制信号状态。 根据图5.5所示的双向电平电压转换电路，请简要分析其工作过程。 当你设计一个嵌入式系统时所用到的I2C功能组件通讯接口速度不一致，请给出合理的解决方案。 单主-多从结构的I2C通讯接口中仅使用7位宽从机地址即可连接上百个I2C功能组件，请说明7位从机地址的作用，并简述主机访问某个从机的过程。 当MCU片上I2C功能单元工作在主机模式时，以读取某I2C接口的传感器数据为例，简述SCL和SDA信号的输出方向和两者关系。 以I2C通讯接口软件的分层抽象为例，简述硬件层、硬件抽象层、BSP(或中间层)、用户层等各层的功能和作用，并总结分层抽象软件结构的优缺点。 在Arduino平台的I2C硬件抽象层中，为什么“beginTransmission()”、“endTransmission()”和“setClock()”是主机模式专用的接口？ 参照图5.8的流程，设计I2C接口的“主机写后读”的操作流程，即“主机写-从机读-(无STOP时序)-主机请求-从机写”的操作流程。 "},{"title":"SPI接口及其应用","date":"2021-08-04T19:45:46.000Z","url":"/posts/aacb/","categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"================================第6章 SPI接口及其应用================================ SPI(Serial Peripheral Interface)，即串行外设接口。SPI最早由Motolora半导体部门提出，最初出现在M68系列单片机上用于连接片外的EEPROM、ADC和DAC等外设。SPI是一种伪共享的全双工/半双工的同步串行通讯接口，仅支持单主多从的系统结构。伪共享的总线结构是受到并行总线的影响，要求主机必须为每一个从机提供一个片选信号(CS)，当某个从机的片选信号被主机置为有效电平时，主机和被选中的从机之间实现全双工/半双工的同步串行通讯。同步串行通讯，意味着SPI接口具有专用的同步时钟信号。全双工，意味着SPI接口拥有独立的“主机写-从机读”和“主机读-从机写”串行数据传输线。半双工只需要一根串行数据线双向传输数据。 SPI接口经历多次改进，目前不仅支持单个串行数据信号，也支持2位和4位宽度的串行数据信号，在同样的时钟频率条件下串行数据线越多数据吞吐量越大。QSPI(Quad SPI)接口的数据信号达4个，假设同步时钟信号的频率为32MHz，QSPI实际的位时钟频率达128MHz。高速的QSPI接口已经用于嵌入式系统内的大容量FlashROM、伪静态RAM等存储器扩展，借助于MCU片上Cache单元甚至可以直接从QSPI接口的FlashROM中执行(XIP)程序。显然，SPI接口是嵌入式系统内十分重要的一种扩展接口，与I2C接口一样，SPI也是绝大多数MCU标配的片上功能单元。 本章将了解SPI接口的信号、时序和协议规范，以及MCU片上SPI功能单元的主机模式和从机模式，并以SPI接口的显示器和协处理器、QSPI接口的FlashROM等为例讨论SPI接口的结构组成、接口电路和软件编程控制。 ===========================6.1 SPI通讯接口=========================== SPI通讯接口采用主从模式的结构，仅支持一个主机和一个或多个从机。标准的SPI通讯接口是4线的，包括同步时钟信号SCK、主输出从输入信号MOSI、主输入从输出信号MISO、片选信号NSS(Slave Select)。一对SPI通讯接口的主机和从机的内部结构如图6.1所示。 图6.1 SPI通讯接口的主机和从机内部结构 这里再次看到移位寄存器，他是SPI通讯接口的核心部组件。根据现代MCU的存储器映射规则，SPI通讯接口的接收和发送数据缓冲器都是MCU内部存储单元。当SPI通讯接口软件将待发送的数据写入发送数据缓冲器并启动数据发送过程(片选信号NSS被主机置为有效电平)，该数据将被自动装载到移位寄存器，并以最高位(MSB)先发送的规则随着同步时钟SCK顺序地将数据逐位从MOSI发出，同时从机SPI接口将随着同步时钟SCK逐位地将数据位移入移位寄存器。当主机需要从从机读取数据时，从机首先将待发送的数据写入发送数据缓冲器，当主机将片选信号NSS置为有效电平时自动将数据加载到从机的移位寄存器，随着同步时钟信号SCK仍遵循MSB先发送的规则将数据顺序地逐位从MISO发出，同时主机SPI接口将随着同步时钟SCK逐位地将数据移入移位寄存器，所有数据位移入完毕后，主机移位寄存器的数据自动被加载到接收数据缓冲器。 这两个方向的移位过程是可以同时进行，而且不会有接收和发送数据位重叠，两个移位寄存器被两个独立的串行数据线首尾串联成环形，譬如一个字节(8位)数据从主机移入从机的同时从机上的一个字节数据也正好移入主机。很显然，标准的SPI通讯接口支持全双工数据传输，即主机向从机写入数据的同时可以读取从机上的数据。事实上，为了提高数据传输效率，绝大多数现代SPI通讯接口的接收和发送数据缓冲器都采用FIFO(先进先出)结构、接收和发送完毕的中断机制。 有些SPI通讯接口的应用场景无需全双工的数据传输，譬如只需要半双工或单工，我们可以简化接口以减少信号线。图6.2给出全双工的和半双工的SPI通讯接口的对比。 图6.2 全双工的和半双工的SPI通讯接口 很多资料中提到4线的和3线的SPI接口正是上图所示的两种情况，4线的是标准SPI通讯接口，3线的是半双工的SPI通讯接口。在半双工的数据传输模式，主机的MOSI和从机的MISO相连，而且主从双方的这个接口信号都是双向的。为了防止信号名称的混淆，在上图中的主机侧仍使用NSS、SCK、MOSI和MISO等4个名称，而从机侧则使用SDI(从机数据输入信号)代替MOSI，SDO(从机数据输出信号或数据输入信号)代替MISO。其中，半双工模式，从机的SDO信号是双向的，主机的MOSI信号也是双向的。 半双工的SPI通讯接口节约一个接口信号连线，但并不是所有的SPI接口都支持半双工的模式。单工的SPI接口也可以节约一个接口信号，根据数据传输的方向需要确定去掉MOSI或MISO。譬如显示器是一种典型的输出外设，显示器的SPI接口可以采用单工的，仅需要NSS、SCK和MOSI三个信号即可。 前面讨论的都是一主一从的SPI通讯接口，多从机时的SPI接口是什么样的结构呢？如图6.3所示。 图6.3 一主多从的SPI通讯接口 上图中给出两种拓扑结构的一主多从的SPI通讯接口。图中(a)是常规的拓扑结构，SCK、MOSI和MISO等三个信号是SPI通讯接口的共享总线信号，所有的主机和从机使用这些共享总线连接在一起，但是每一个从机必须独占一个片选信号NSS，随着从机个数的增加，主机将开销更多的I/O引脚用作片选信号。很显然，图中(b)的菊花链拓扑结构中所需要主机的I/O引脚始终是4个，不受从机个数影响。对比两种拓扑，虽然菊花链结构节约I/O引脚但数据传输需要经过更多次移位，即消耗更多个同步时钟周期，意味着更低的数据通讯速率。此外，两种拓扑结构的接口软件区别较大，菊花链结构的某个从机与主机之间传输数据所耗费的时钟个数必须根据从机个数和顺序号来确定。 后面所用的SPI通讯接口都默认为常规的拓扑，除非特别说明。与I2C通讯接口使用的惟一从机地址的寻址方法完全不同，任一SPI从机是否被选中与SPI主机通讯，仅由其片选信号NSS的状态所决定。通常，SPI主机需要访问某个从机时，只需要将该从机的片选信号NSS置为有效电平，同时其他从机的片选信号都被置为无效电平，仅有一个从机被选中与主机通讯。这种通过惟一的片选信号选中某个从机的方法与传统的三总线(数据总线、地址总线和控制总线)的片选信号选中某个外设的方法几乎完全一致，传统的三总线是并行总线，现在仅适合MCU或MPU片上组件之间互联，主CPU通过控制地址译码器将某个组件的片选信号置为有效电平，此时主CPU与被选中的组件之间独占完整总线进行数据传输，期间其他组件(即未被选中的组件)处于空闲状态。当某个SPI从机的片选信号被主机置为有效电平时，SPI主机与被选中的从机之间独占SPI接口总线进行数据传输，其他未被选中的SPI从机处于空闲状态，忽略SPI总线的输入信号(SCK和MOSI)并释放输出信号(MISO)。 从SPI通讯接口的选中和非选中的访问方法看，任何时候仅有被选中的SPI从机与主机之间一对一通讯，因此SPI通讯接口的时序比I2C简单很多。如图6.4所示，SPI通讯接口仅以8位(字节)及其整数倍的二进制位对齐的移位操作，没有I2C通讯接口的START和STOP等特殊时序。 图6.4 SPI通讯接口的时序 上图中，SPI通讯接口的同步时钟信号SCK在总线空闲时的状态是低电平，并在SCK的第偶数次跳变沿对MOSI和MISO信号采样。事实上，标准的SPI接口规范中，总线空闲时SCK信号的状态CPOL(Clock POLarity)、数据线的采样时刻CPHA(Clock PHAse)、位序MSBFIRST(先发送MSB)和SCK信号频率等都是可配置的。这些配置也都是SPI软件接口的基本参数，详见第6.2节。关于CPOL和CPHA两个参数之间的关系如图6.5所示。 图6.5 SPI通讯接口时序的4种配置 根据CPOL和CPHA两个参数，SPI通讯接口时序共有4种不同的配置模式。MODE0，SPI总线空闲时SCK保持低电平，当NSS信号有效期间，SCK信号的第奇数次跳变沿采样MOSI和MISO信号，即SCK的上升沿时刻采样数据线。MODE2，SPI总线空闲时SCK保持高电平，当NSS信号有效期间，SCK信号的第奇数次跳变沿采样MOSI和MISO信号，即SCK的下降沿时刻采样数据线。根据上图所示，MODE1和MODE3的两种配置无须赘述。 必须注意，数据线被采样的时刻必须确保数据线状态是稳定的，即不允许信号驱动端改变数据线状态，SPI通讯接口的每一种时序配置的数据线切换时刻也是确定的，对于MODE0和MODE3的配置，允许SCK位低电平时改变MOSI和MISO的状态。 同步时钟信号SCK的频率是SPI通讯接口的波特率(Baudrate)，即二进制位的传输频率(或传输一个二进制位所消耗的时间)。当我们在配置SPI通讯接口的参数时，必须考虑SPI从机的能力，包括SCK信号支持的/允许的最大频率、模式、位序等。换个角度来看待这些可配置参数，他们都是为了适应SPI从机的目的，尤其是SPI从机是不可配置或不可编程的情况。 本质上，SPI通讯接口仅仅是一种同步串行数据移位操作的物理层接口，可配置接口参数的高灵活性和开源性使得SPI接口拥有很多种变化版本(Variant)。譬如，当前被广泛使用于FlashROM(主要是NOR结构闪存)接口的2位(Dual)/4位(Quad)宽度的串行数据线版本分别称作DSPI和QSPI，接口时序的读写操作示例如图6.6所示。 图6.6 DSPI和QSPI通讯接口的读写时序 上图中的SPI通讯接口配置参数采用MODE0。可以看出，为兼容标准4线SPI通讯接口，传输命令期间仍使用标准4线SPI接口时序，其后的地址和数据传输采用2位或4位宽度的串行数据线发送数据。很显然，DSPI和QSPI的波特率分别是标准SPI通讯接口波特率的2倍和4倍。 上图(c)是先写命令和地址信息然后再顺序地连续读取若干地址单元的数据的时序，该时序的写入和读出操作之间有4个SCK周期的Dummy(占位)，允许SPI从机在这个期间加载数据到发送缓冲区。DSPI和QSPI通讯接口的主机和从机信号如图6.7所示。 图6.7 DSPI和QSPI通讯接口的主从信号 DSPI和QSPI通讯接口及其应用详见 [2]_ 页面的介绍。 SD卡是一种NAND结构的大容量闪存，TF卡是外型尺寸更小的SD卡(即micro SD)。SD卡接口不仅兼容标准SPI接口，也有专用的SD卡接口规范。当SD卡的读写速度要求较低的场合，尤其嵌入式系统中可以使用标准SPI接口访问SD卡。即使SD卡的高速读写系统，SD卡上电后的初始化阶段，主机使用标准SPI接口向SD卡发送配置命令，然后SD卡根据配置命令进入SD卡接口模式实现高带宽的数据读写操作。有关SD卡的SPI模式详见文档 [1]_的第7章。SD卡、TF卡接口信号与SPI接口信号之间的关系如图6.8所示。 图6.8 SD卡、TF卡接口信号与SPI接口信号之间关系 SD卡模式使用6个信号，分别为CMD、SCK、DAT03。4位宽度的串行数据线DAT03是双向的，与QSPI相同。CMD是传输主机命令和SD卡应答信息的专用信号线，SD卡操作总是以命令帧(由1个字节命令、4个字节命令参数和1个字节CRC7校验和组成)开始，譬如CMD17和CMD24分别是单个数据块的读和写命令。 SDIO(Secure Digital Input and Output)接口是从SD接口衍生出来的一种高吞吐量的外设接口，向下兼容SD卡接口规范和标准SPI接口。SDIO接口不仅用于可插拔的存储卡，还用于WiFi无线网卡、蓝牙卡、摄像头、GPS等外设接口。SDIO的具体应用和规范可在页面 [3]_ 找到。 更多的SPI通讯接口的变种，请查阅维基百科的SPI说明()，如果无法打开该链接，请点击下面的链接下载PDF格式的文档： . :download:维基百科(wikipedia.org)对SPI通讯接口的介绍 &lt;../_static/dl_files/bluefi_ch6_1/Serial_Peripheral_Interface_Wikipedia.pdf&gt; 前面已初步了解半双工SPI接口(3线)、全双工的标准SPI接口(4线)、DSPI(4线)、QSPI(6线)、SD(6线)及其衍生的SDIO等通讯接口，这些接口常用于嵌入式系统主控制器与内部组件之间的总线接口，与I2C相比SPI接口的时序更简单、更容易实现、允许更高的波特率。 BlueFi开源板的主控制器与彩色LCD显示器、WiFi协处理器等都使用SPI通讯接口，并使用QSPI接口扩展片外的2MB闪存用于保存Python库、Python脚本程序、声音和图片等资源文件。此外，BlueFi开源板的40P金手指扩展接口的P13~P16可作为标准SPI接口。BlueFi开源板的SPI接口如图6.9所示。 图6.9 BlueFi开源板上的SPI接口外设 nRF52840具有1个QSPI接口和4个标准SPI接口(分别称作SPI0~3)，其中SPI0和SPI1分别与I2C0和I2C1共享存储器映射资源，即使用I2C0时SPI0将无法使用，使用I2C1时将无法使用SPI1。nRF52840的4个标准SPI接口都可编程作为SPI主机模式，其中3个还可编程作为SPI从机模式。此外，nRF52840的QSPI接口和4个标准SPI接口的最大波特率都高达32MHz。 根据上图可以看出，BlueFi开源板的彩色LCD显示器使用的是变种的SPI通讯接口，WiFi网络协处理器使用标准SPI接口，我们并未使用SPI支持的共享总线。考虑到I2C0、I2C1和SPI0、SPI1共享存储器资源的局限性，我们在后续的BlueFi开源板的BSP代码中使用SPI2和SPI3分别连接彩色LCD显示器和WiFi网络协处理器，前一章中我们已经使用I2C1作为BlueFi板上的温湿度、光学和运动传感器，BlueFi板的40P金手指扩展接口上的I2C和SPI接口分别使用I2C0和SPI0，意味着任何时候只能选择使用其中的一种接口。 BlueFi开源板的QSPI接口固定用于片外2MB闪存的扩展接口，按照nRF52840的QSPI接口协议，最大支持24位地址宽度，即支持最大16MB片外扩展的QSPI闪存。当然，根据QSPI接口规范，向下兼容DSPI和标准SPI等低速接口。BlueFi的片外2MB闪存主要用于Python文件系统，我们不再详细赘述 下一节将以BlueFi开源板的彩色LCD显示器的BSP实现为实例来了解SPI主机模式接口及其编程控制。 参考文献：:: [1]  [2]  [3]  ===========================6.2 SPI主机模式=========================== BlueFi开源板的彩色LCD显示器使用SPI通讯接口与nRF52840主控制器连接，显示器作为一种输出外设，我们将这个接口设计为半双工模式，仅使用NSS、SCK、MOSI等三个信号，同时引入第4个信号——数据/命令信号D/C，当MOSI输出命令信息时D/C信号为低电平，输出数据时则为高电平。引入D/C信号的SPI通讯接口的时序示例如图6.10所示。nRF52840的SPI通讯接口的主机模式支持D/C信号，每次发起SPI数据帧传输之前，通过配置数据帧中的命令字节数和数据字节数，SPI接口自动产生D/C信号的有效电平向SPI从机发送数据/指令标示信号。 图6.10 带有D/C信号的SPI通讯接口时序示例 BlueFi使用的彩色LCD显示器的驱动器为台湾矽创电子股份公司的ST7789V，支持262K(18位RGB颜色编码)种像素颜色，最大像素数达240x320。ST7789支持可配置的多种并行与同步串行通讯接口，包括8-/9-/16-/18-位并行接口、3线(无D/C信号)和4线(有D/C信号)SPI接口。我们使用的彩色LCD显示器由屏幕生产厂商将驱动IC、LCD玻璃屏、背光板等集成在一起，使用COG(Chip On Glass)工艺将驱动IC直接绑定在玻璃上，同时驱动IC的接口配置也被设定。 BlueFi开源板使用的彩色LCD显示器及其接口电路如图6.11所示。 图6.11 BlueFi开源板使用的彩色显示器及其接口电路 上图(a)的彩色LCD显示器示意图中浅灰色方形区是有效显示区域，右侧较宽的区域是COG工艺区和外部软排线接口区，实际使用时我们将软排线弯曲后焊在玻璃屏背面。上图(b)的接口电路采用4线(含D/C信号)的半双工SPI接口，MOSI信号是双向的，这个接口电路中nRF52840的SPI通讯接口是主机模式，SCK和D/C两个信号的方向是输出。此外，彩色LCD显示器作为一种非主动光源型显示器必须借助外界光源我们才能看到显示内容，背光板是此类显示器的必备组件，上图(b)的接口电路使用一个N型三极管控制背光板，主控制器不仅能够控制背光板的亮、灭和亮度，还能提高背光板所需的大电流(约10mA)。 简要分析BlueFi开源板的彩色显示器接口电路后，接着开始了解该显示器的软件接口的实现。SPI接口软件也可以使用前一章所掌握的I2C的分层抽象方法，硬件层仍使用Nordic半导体提供的SPI硬件驱动库，硬件抽象层则是Arduino开源平台的SPI类接口库，BlueFi的彩色LCD显示器接口软件(BSP)是基于硬件抽象层的实现(中间层)，这部分BSP为用户层提供显示器初始化、文本和图形等显示接口。整个显示器接口软件的架构如图6.12所示。 图6.12 基于SPI接口的彩色LCD显示器的软件架构(兼容Arduino平台) 在Arduino开源平台，对于任一种Arduino官方或第三方开源板系列，SPI通讯接口的硬件层和硬件抽象层的软件实现都是开源软件包的一部分。譬如，基于Nordic的nRF52系列MCU的开源板，我们在第3.5节安装的nRF52系列MCU的开源软件包中，SPI通讯接口的硬件抽象层的软件实现位于“../Arduino15/packages/adafruit/hardware/nrf52/版本号/libraries/SPI/”文件夹，硬件层的软件实现由Nordic半导体提供，位于“../Arduino15/packages/adafruit/hardware/nrf52/版本号/cores/nRF5/nordic/nrfx/”文件夹。 Arduino官网列出SPI通讯接口的硬件抽象层的软件接口 [2]_ ，可以看出这个硬件抽象层仅支持SPI主机模式！主要接口包括： SPISettings(clock, borOrder, dataMode)，SPI通讯接口的SCK频率、位序和数据线采样模式等参数配置接口 setBitOrder(MSBFIRST)，SPI通讯接口的位序单独地配置接口：MSBFIRST和LSBFIRST等2种参数 setClockDivider(diver)，SPI通讯接口的时钟分频器配置接口。该配置将影响SCK时钟频率，CPU内核时钟频率被分频后作为SCK的时钟 setDataMode(mode)，SPI通讯接口的数据线采样模式单独地配置接口：SPI_MODE0、SPI_MODE1、SPI_MODE2、SPI_MODE3等4种参数 begin()，初始化SPI通讯接口，并配置为主机模式，并配置SPI通讯接口的引脚、时钟速度、位序、数据线采样模式等 end()，取消SPI通讯接口的初始化，禁用该SPI接口 beginTransaction(SPISettings)，使用SPISettings接口的参数初始化SPI通讯接口 endTransaction()，停用SPI通讯接口 transfer(txBuf[], rxBuf[], len)，SPI通讯接口的(全双工)数据传输接口。该接口有另外三种形式：transfer(val)、transfer(val16)、transfer(buf[], len) usingInterrupt(numIRQ)，指定SPI通讯接口的中断号 除了参数配置和初始化接口之外，全双工数据传输接口“transfer(txBuf[], rxBuf[], len)”是最基本的接口，另外三种形式的“transfer()”(半双工)接口也是基于该接口。BlueFi开源板的彩色LCD显示器的BSP几乎仅仅使用Arduino开源平台SPI抽象层的“transfer()”接口，并根据该LCD的驱动器IC——ST7789V的接口规范(含命令和数据格式)，首先定义“tft_Write_x(d)”、“pushPixels(colors[], len)”、“pushBlock(color, len)”等3个LCD基本的中间层接口，分别实现8/16/24/32位数据写操作、连续写入若干个像素点的颜色值、连续填充(写入)若干像素位指定的颜色；基于这些基本的写入操作，接着定义单个像素(指定(x,y)坐标)颜色、绘制直线、绘制圆弧和圆等基本图形图案的显示操作，以及彩色文本显示(指定位置和字体)等。 基于BSP(中间层)的LCD接口，我们很容易将文本信息显示在BlueFi的彩色LCD显示器上，或者基于直线、圆弧和圆等基本图形的绘制接口实现复杂图案设计与显示。现在看起来LCD接口的功能较多，编写代码的工作量比较大。实施这些编码工作，我们无须从零开始，从“github”等开源社区的代码托管平台搜索“Arduino SPI ST7789”等关键词，或许会找到数十甚至上百个相关的开源项目代码，直接将合适的项目代码移植到我们的项目中即可。 我们已经修改“Adafruit TFT eSPI”开源项目的代码用于BlueFi开源板，点击下面链接下载这部分代码的独立压缩包： . :download:BlueFi_TFT_eSPI开源库 &lt;../_static/dl_files/bluefi_ch6_2/BlueFi_TFT_eSPI.zip&gt; 请将下载后的压缩包文件解压到“../Documents/Arduino/libraries/”文件夹，你将会看到“BlueFi_TFT_eSPI”子文件夹中的LCD显示器的全部接口。面向用户层的接口都在“../Documents/Arduino/libraries/BlueFi_TFT_eSPI/BlueFi_TFT_eSPI.h”文件中，只需要将该文件“include”到BlueFi开源板BSP的“BlueFi.h”文件并添加少许代码即可使用这些接口。打开“../Documents/Arduino/libraries/BlueFi/src/”文件夹中的“BlueFi.h”和“BlueFi.cpp”两个文件，将 两个语句添加到“BlueFi.h”文件中，并将下面的程序语句添加到“BlueFi.cpp”文件中的“void BlueFi::begin(bool LCDEnable, bool SerialEnable)”接口函数中： 这些代码是对BlueFi开源板的彩色LCD显示器初始化的操作，包括屏幕旋转、清屏和默认的内容显示等。 为了便于测试，请先删除“../Documents/Arduino/libraries/BlueFi”文件夹中的全部文件，然后下载下面的压缩文件包，并解压到“../Documents/Arduino/libraries/BlueFi”文件夹中， . :download:本节内容所用到的BlueFi的BSP源文件 &lt;../_static/dl_files/bluefi_ch6_2/BlueFi_bsp_ch6_2.zip&gt; 在这个BSP文件压缩包中已包含BlueFi开源板的彩色LCD显示器的BSP(中间层)接口，下面我们使用这些接口使用BlueFi的显示器。示例1的源程序如下： (../examples/TFT_LCD/hello_world.ino) 这个示例中，首先调用“bluefi.begin()”对BlueFi开源板的相关硬件进行初始化，包括LCD显示器的初始化在内；然后调整显示器的光标位置和所用字体大小，之后的显示将从当前光标位置开始；接着在屏幕上显示4行彩色文本信息，每一行文字的颜色分别位白色、红色、绿色和蓝色，用这些文本内容和颜色验证显示器的基本配置是否正确。在主循环中不再更新显示内容，仅仅保持BlueFi开源板的红色LED闪烁，表示我们的程序已经正确地执行。 显然，借助于BlueFi开源板的中间层LCD接口让BlueFi的LCD显示彩色文本，我们并不需要直接访问SPI接口相关的寄存器，也无须直接面对LCD驱动IC——ST7789V的SPI通讯协议。现在你可以打开“../Documents/Arduino/libraries/BlueFi_TFT_eSPI/BlueFi_TFT_eSPI.h”文件了解我们的彩色LCD显示器接口的名称、参数等，基于这些接口，我们可以实现各种显示效果。 下面我们来探索另外一个有趣的示例——康威生命游戏的模拟效果(取消gif格式动画)，如图6.13所示。 图6.13 康威(Conway)生命游戏的模拟 该游戏由英国数学家康威(Conway)于1970年设计的，使用2D网格模拟生物群落的生与死，每一个网格代表一个生命体(或元胞)，其生存法则为： 如果当前网格的元胞是活体，且周围活着的邻居数目(至多8个)为2个或3个时，保持原状态 如果当前网格的元胞是活体，且周围活着的邻居数目小于2个时，生物群落太小，该元胞死亡 如果当前网格的元胞是活体，且周围活着的邻居数目大于3个时，生物群落太大，该元胞死亡 如果当前网格的元胞是死亡的，且周围活着的邻居数目是3个，该元胞变为活体 如果当前网格的元胞是死亡的，且周围活着的邻居数目不是3个，保持原状态 这些生存法则是经过我们重新编辑的描述，目的是更容易演变成生命游戏的程序算法。该示例程序主要使用BlueFi的绘制填充颜色的方形图案的接口“fillRect(x, y, w, h, color)”绘制每个“细胞”的生与死状态，如果某个网格的“细胞”为死亡状态则保持该方形图案的颜色与背景的黑色相同，否则随机选择一种非黑的颜色显示该“细胞”。示例程序的源码如下： (../examples/TFT_LCD/game_life.ino) 这个示例程序仅初始化“setup()”的代码，主循环“loop()”部分无代码(仅仅是一个死循环)。初始化“setup()”的代码包括，BlueFi相关的接口和硬件初始化，并清除LCD屏幕、调用“initGrid()”和“drawGrid()”两个函数在显示屏上输出第一代“细胞”的模拟效果；然后设置代表生存代数的变量generations为0，调用函数“computeCA()”根据生存法则计算每一个网格中“细胞”的生与死的状态，如果没有任何“细胞”的状态变化该函数返回false，否则返回true；如果函数“computeCA()”的返回值为true则将当前的生存代数变量generations增加1并发送到串口控制台，调用函数“drawGrid()”绘制新一代的“细胞”状态，并将保存此代的状态，延迟若干ms后再次调用函数“computeCA()”；如果函数“computeCA()”的返回值为false则在显示屏上显示“Game Over!”并终止程序。 在BlueFi执行该示例程序前，能猜测出执行效果吗？我们能看到屏幕上显示“Game Over!”? 现在将示例程序编译并下载到BlueFi开源板上，观察该示例程序的运行效果与你所猜测的效果一样？ 我们为BlueFi设计的Python解释器默认使用彩色LCD作为字符控制台，用于输出Python解释器的状态，以及执行脚本语句“print()”时的信息输出。现在双击BlueFi开源板的复位按钮，然后将Python解释器拖放到“BLUEFIBOOT”磁盘，将BlueFi恢复到运行Python脚本的状态。每次BlueFi上电或复位时，你首先在LCD屏幕上左上角看到CIRCUITPYTHON的Logo——蟒蛇图案，当解释器开始执行“code.py”脚本程序前会在屏幕上显示“code.py output:”提示信息。 换句话说，在Python解释器的状态允许我们直接使用“print(info)”输出数值或文本信息到BlueFi的LCD显示器。如果我们需要在LCD上显示基本图形或其他形式的信息，那就需要相关的Python库或自建Python代码来实现。我们先让BlueFi的Python解释器运行下面的示例代码： 用文本编辑器或MU编辑器，复制上述代码覆盖“/CIRCUITPY/code.py”文件中的全部代码，你将会看到一种水平仪的模拟效果，显示屏上有多个彩色圆代表水平仪刻度，并用一个白色填充圆代表“气泡”。倾斜BlueFi板时BlueFi的LCD显示屏上的“气泡”的位置会随之改变，晃动BlueFi板时“气泡”也会随之晃动。 为什么会有这样显示效果呢？尤其是，为什么气泡位置的改变时不会影响其他元素的完整显示呢？该示例程序的前6行分别导入Screen、Sensors、displayio类模块，以及绘制圆和直线的Circle和Line类模块，并将Screen和Sensors分别实例化为screen和sensors，使用screen和sensors可以访问BlueFi的显示屏和传感器。在第14行语句中定义名叫bluefi_group的图形元素组(displayio.Group)且包含9个元素，其后的几行语句分别定义2条白色直线和6个彩色的圆形，调用“bluefi_group.append(element)”将定义好的这8个图形元素添加到bluefi_group的图形元素组中；然后再绘制一个白色填充圆代表气泡，这个圆的中心坐标由BlueFi的加速度传感器的x和y分量来确定，最后将图形元素组显示到LCD屏幕上。主循环程序中，读取加速度传感器的x和y分量，然后更新“气泡”的中心坐标。 这个示例程序中用到的Python库，displayio是BlueFi的Python解释器内建的模块，只需要导入即可使用，使用这个Python模块的接口，将我们需要在LCD屏幕上显示的若干文本信息、几何图形等分层设计和控制，甚至可以在BlueFi的LCD屏幕上实现动画效果，改变某个显示元素的位置时不会影响其他元素的完整性。譬如，冒泡排序算法的可视化 [4]_ ，程序代码如下： 这个冒泡排序算法的动画效果显示，将7个彩色方块根据高度升序排列到屏幕上。程序仍使用displayio模块的接口将7个随机高度的方块和2个原点看作是图形元素组中的基本图形元素，初始状态7个方块的颜色和高度都是随机生成的，高度是无序的，然后使用冒泡算法按他们的高度进行升序排列，当前正在比较和交换的两个方块的下方各用一个圆点来指示，交换过程的动画由方块的x坐标分量逐渐增加/减小来实现。 通过这个示例，我们不仅掌握如何使用Python语言控制BlueFi的显示屏显示图案和动画，还能帮助我们理解冒泡排序算法本身。你能修改上面代码来改变动画的速度吗？ 虽然SPI通讯接口的数据传输速度远高于I2C，而且接口的硬件实现较简单，但SPI通讯接口规范中并没有指定具体的通讯协议，反而允许主机端配置SCK的时钟频率、位序(MSBFIRST/LSBFIRST)、数据线采样模式等，因此SPI通讯接口协议存在较大差异，每一种SPI接口外设几乎都需要根据其接口协议订制接口软件，本节仅以SPI接口的彩色LCD显示器为例演示SPI主机模式的接口实现和应用示例。 参考文献：:: [1]  [2]  [3]  [4]  ===========================6.3 SPI从机模式=========================== MCU片上SPI通讯接口单元工作在从机模式的应用场景往往是双MCU或多MCU系统中，与普通的双核或多核处理器(Multi-Core Processor)组成的系统完全不同。多核处理器一般是指一颗CPU IC由多个内核组成，多核处理器的内核一般采用对等结构，使用片上高速总线互联，多个对等的内核都是总线的Master，由总线仲裁器管理他们对总线的访问，多核并行处理同一个任务的指令序列，仅仅是加速事务处理的速度。多MCU系统中，允许多种体系架构CPU内核(或许是多核的结构)，不同体系架构的多MCU系统是异构系统，每一个CPU内核需要单独编程(异构系统内的CPU指令集不同)。 .. Note:: 多核处理器和多处理器系统 多核处理器 (Multi-Core Processor)，A multi-core processor is a computer processor integrated circuit with two or more separate processing units, called cores, each of which reads and executes program instructions, as if the computer had several processors 多处理器系统 (Multi-Processor system)，It is the use of two or more central processing units (CPUs) within a single computer system. The term also refers to the ability of a system to support more than one processor or the ability to allocate tasks between them 主从多处理器系统(Master/Slave Multi-Processor system)是高性能嵌入式系统常用的架构，主MCU作为系统的主控制器，从MCU仅负责系统的特定任务，譬如网络访问或视频信号处理等任务，允许主从MCU完全不同(包括时钟速度、指令架构等)，两个MCU通过共享总线或私有总线、共享内存等方式建立通讯通路。BlueFi开源板是一种典型的主从多处理器系统，主控制器采用nRF52840，从控制器采用ESP32，主从控制器之间采用SPI通讯接口互联，如图6.14所示。 图6.14 BlueFi的双MCU结构 两个MCU之间使用标准4线的SPI通讯接口之外还增加2个额外的控制信号(或称握手信号)，一个是从MCU的复位控制信号，另一个从MCU的忙/空闲状态信号。BlueFi开源板使用这种双处理器协作系统，可以将WiFi联网、TCP/IP协议栈等网络事务与其他事务分开，主处理器只需要通过SPI通讯接口向网络协处理器发送网络处理指令，譬如扫描周围热点(Scan AP)、连接指定热点、连接指定域名的Web服务器等，网络协处理器根据指令及指令参数执行网络事务并通过SPI通讯接口返回执行结果。这就好比我们使用手机/电脑WiFi访问某个网站的过程，首先打开WiFi配置窗口查看周围热点，连接指定的热点，当WiFi连接到某个AP之后，打开浏览器并输入网址，即可查看该网页信息。当我们在手机/电脑上使用浏览器打开指定网址的过程中，虽然浏览器首先使用DNS(域名解析系统)获取指定网址的IP地址，然后使用TCP连接这个IP地址的服务器(还包含默认的TCP端口80)，发送HTTP请求，最后接收HTTP报文格式的网页信息并显示在浏览器上，我们所感知的只是打开一个网页，并不关心DNS、TCP连接和HTTP传输等细节。 下面先用一个示例来演示BlueFi开源板的这种双处理器系统架构的益处。运行示例之前，需要做些准备工作，首先点击下面链接下载本节内容用到的BlueFi的WiFi BSP源文件： . :download:BlueFi_WiFi_eSPI开源库 &lt;../_static/dl_files/bluefi_ch6_3/Bluefi_WiFi_eSPI.zip&gt; 下载后将压缩文件解压到“../Documents/Arduino/libraries/”文件夹中，子文件夹“BlueFi_WiFi_eSPI”是主控制器nRF52840通过SPI通讯接口访问网络协处理器的BSP源文件。本节内容所更新的BlueFi开源板的BSP源文件包的链接如下，请先删除“../Documents/Arduino/libraries/BlueFi”文件夹中的全部文件，然后下载下面的压缩文件包，并解压到“../Documents/Arduino/libraries/”文件夹中， . :download:本节内容所用到的BlueFi的BSP源文件 &lt;../_static/dl_files/bluefi_ch6_3/BlueFi_bsp_ch6_3.zip&gt; 准备工作并未完毕！以我们使用WiFi联网的经验，必须配置网络协处理器能够连接到某个可用的WiFi热点(AP)。我们的BSP源文件使用一个独立的仅有两行代码的.h文件保存AP名称和密码。使用文本编辑器修改并保存“../Documents/Arduino/libraries/BlueFi_WiFi_eSPI/scr/secrets_wifi.h”文件： 第1行双引号内输入你可用的WiFi AP名称代替原来的字符串，第2行双引号内输出这个WiFi AP的密码代替原来的字符串。 然后使用Arduino IDE编辑下面的示例代码，编译并下载到已与你电脑USB相连接BlueFi开源板上。 当BlueFi执行上面示例期间，点击Arduino IDE菜单栏的“工具–&gt;串口监视器”，打开窗口控制台，将在控制台窗口看到以下信息： 你或许在其他地方使用过“ping”命令来测试某个网址或网络设备的物理连通性和网络可达性，控制台输出的最后几行信息正是我们的示例程序执行“ping www.zjut.edu.cn”网址的结果，控制台的前几行提示信息分别是检查网络协处理器及其版本、连接到指定WiFi AP的信息、连接成功后本机IP地址的信息等。 在上面示例程序中，第9行语句“connectWiFi(true)”将“../Documents/Arduino/libraries/BlueFi_WiFi_eSPI/scr/secrets_wifi.h”文件中的AP名称和密码发送给网络协处理器，协处理器自动连接指定的AP，并通过控制台给出提示(即前4行的提示信息)，一旦连接上之后就给出已连接的AP名称和AP为BlueFi分配的IP地址。第14行语句“ WiFi.ping(hostName)”将目标网址字符串“hostName”(即“www.zjut.edu.cn”)通过SPI通讯接口发送给网络协处理器，网络协处理器立即执行“ping www.zjut.edu.cn”命令并返回结果。 “ping”命令是常用的一种网路测试工具，他是基于TCP/IP协议栈的网络层ICMP(Internet Control Message Protocol)协议来实现的。很显然，上述示例的程序中，主控制器仅仅通过SPI通讯接口将字符串“hostName”和“ping”命令发送给网络协处理器，具体的“ping”命令执行过程则有网络协处理器独立完成，查看“../Documents/Arduino/libraries/BlueFi_WiFi_eSPI/scr/”文件夹中的WiFi接口，你会发现这个WiFi的接口源文件中并没有涉及TCP/IP协议栈等。这里的主控制器所使用的WiFi接口完全兼容Arduino开源平台的WiFi接口库，页面 [1]_ 有这个WiFi接口库的详细说明和参考示例。 当你把前面的的BSP源文件下载并解压到指定文件夹后，我们已经为BlueFi主控制器准备好完整的WiFi联网接口，包括网络配置、TCP/IP应用层的客户端(client)、服务器端(server)、HTTP和UDP报文收发等接口。基于这些接口，我们只需要通过对主控制器编程即可实现Web访问和应用程序等。 那么，网络协处理器的固件是如何实现的呢？我们的协处理器采用上海乐鑫的Xtensa体系架构的WiFi SoC——ESP32，其固件是从“Arduino NINA-W102 firmware”移植过来的，固件的源码、编译工具、编译过程等详见 [2]_ 链接及其说明。 在网络协处理器的固件源码中，你将会发现“lwIP”(开源TCP/IP协议栈)和“freeRTOS”(开源RTOS)等被使用。当然这个ESP32的SPI通讯接口工作在从机模式，我们也能找到该接口的源码实现，即“../nina-fw/arduino/libraries/SPIS/src/”文件夹的“SPIS.h”和“SPIS.cpp”两个源文件。在“SPIS.h”和“SPIS.cpp”两个源文件中有该SPI通讯接口所使用的SPI端口号、I/O引脚及其配置等初始化接口“begin()”，“transfer(uint8_t out[], uint8_t in[], size_t len)”是SPI从模式关键接口，即双向数据传输的实现。除了第三方开源库(TCP/IP协议栈、RTOS等)、SPI通讯接口(从机模式数据传输接口)之外，协处理器固件的核心工作是SPI通讯接口的命令解析和处理，即接收、解析主控制器发送过来的命令和参数，然后执行该命令并给以应答。 在Python环境如何使用网络协处理器呢？这需要使用主控制器的WiFi接口的Python模块，包含“/CIRCUITPY/lib/hiibot_bluefi/wifi.py”主接口模块文件，以及“/CIRCUITPY/lib/adafruit_esp32spi/adafruit_esp32spi.py”模块，请打开页面链接 [3]_ 并根据页面说明下载最新版的BlueFi开源板的Python库文件，下载并解压后将“../lib/hiibot_bluefi/”和“../lib/adafruit_esp32spi/”两个文件夹复制到CIRCUITPY磁盘的“/lib/”文件夹中，我们就可以正常使用BlueFi开源板的WiFi接口编写Python代码实现网络处理。譬如，下面示例使用WiFi的“scan_networks()”接口扫描周围WiFi热点。该功能的示例代码如下： 复制这些代码并覆盖“/CIRCUITPY/code.py”文件，或者将上述代码复制-粘贴到MU编辑器的代码编辑区，并保存到“/CIRCUITPY/code.py”文件即可，打开MU编辑器的串口控制台，将会看到以下提示信息： 具体的WiFi热点名称和信号强度(RSSI)与周边的WiFi环境有关，上述提示仅作参考。在上面的示例程序中，前两行代码分别是导入WIFI模块及其实例化；第4行和第5行代码分别检查网络协处理器的有效性及错误提示；第7行代码将网络协处理器WiFi接口的MAC地址打印出来；第9行和第10行首先执行热点扫描(wifi.esp.scan_networks()接口将返回一个AP列表)，然后将AP的名称和信号强度打印到屏幕(或串口控制台)；最后两行程序分别将网络协处理器复位(降低系统功耗)和程序终止提示。 接下来我们编写Python代码控制网络协处理器联网，并使用NTP(Network Time Protocol)获取当地的网络时间，然后用BlueFi设计一个简易的电子表功能。具体的实现代码如下： 在执行这个示例程序之前，仍需要配置连接指定WiFi热点的名称和密码，与Arduino开源平台的思路一致，这些配置信息保存在一个文本文件中，即“/CIRCUITPY/secrets.py”，将该文件的“ssid”和“password”两项的值分别修改为你可用的WiFi热点名称和密码并保存。然后将上面的示例代码保存到“/CIRCUITPY/code.py”文件，BlueFi执行该程序时会提示是否正确地连接到WiFi热点，是否正确滴获取网络时间，最后在BlueFi的LCD屏幕上显示出日期、时间等信息。 根据注释语句，我们可以清晰地看到整个示例程序分为6个步骤：控制网络协处理器连接到WiFi热点；使用NTP服务获取本地日期和时间信息；关闭WiFi以节约功耗；解析NTP服务返回的JSON格式信息获取当前的年月日和时分秒信息，并使用这些信息更新本地RTC(日历时钟)单元；将当前日期和时间信息显示在LCD屏幕指定位置；在主循环中读取本地RTC单元获取最新的日期和时间并更新屏幕显示。 前面的4步仅是为了联网获取本地日期时间并校准本地RTC单元，最后两步才是电子表的设计和实现。这样示例程序在没有使用备用电池的情况下，每次开机首先联网获取当前时间校准RTC，然后在进入电子表模式。 本节给出一种双处理器系统设计，两个处理器使用SPI通讯接口实现协作事务处理。本节的协处理器是用于处理WiFi联网和网络处理，网络协处理器的固件需要单独编程，与主机通讯接口的SP单元工作在从机模式，负责从SPI端口接收并解析主控制器发出的命令及其参数，网络协处理器执行完毕后仍通过SPI通讯接口向主控制器发出应答信息。 SPI通讯接口支持多从机共享通讯总线，根据本节的示例我们很容易实现多处理器系统，只是主控制器需要开销更多个I/O引脚用于从机片选信号、主从握手信号等。异构型多处理器系统(不同体系架构的MCU组成的系统)能够以较低的成本实现多种事务协作处理，而且具有极高的灵活性，源于协处理器的可编程特性。 参考文献：:: [1]  [2]  [3]  ===========================6.4 SPI接口应用设计=========================== SPI通讯接口的扩展常用于高速的或大数据容量的功能外设拓展，譬如WiFi、Ethernet、SD/TF卡、大容量高速数据存储器等。与I2C通讯接口相比，虽然SPI通讯接口的拓扑需要占用更多个I/O引脚用于片选或握手信号，但SPI接口的时钟频率远高于I2C。此外，SPI通讯接口支持全双工通讯，但I2C是半双工的。我们直到SD/TF卡的存储器容量可以按千兆字节(即GB)来计量，而NOR结构型FlashROM的存储容量仅以MB计量，两者的存取速度相差很大(后者速度更快)，而且这两类存储器都采用SPI或QSPI等接口。大容量存储器不使用I2C通讯接口的另一个原因是，I2C的总线寻址和大容量存储器的地址管理会造成数据存取过程中地址信息的传输将占用大量时间，数据的存取效率极地。 某些小容量的存储器既有I2C接口的也有SPI的，譬如MRFRAM(Magnetic Relaxor Ferroelectric RAM, 磁性弛豫铁电RAM)，FRAM的容量仅有128B~512KB范围。这种存储器既有普通SRAM一样的存取速度和读写寿命(达万亿次)，又有普通FlashROM一样的不挥发性(即断电后数据仍能保持数十年不丢失)。FRAM常用于记录系统运行时的关键数据信息，即使没有后备电池系统突然断电也不必担心这些数据会丢失，而且在系统运行期间将数据写入FRAM操作的时间与RAM一样地快。譬如航空航天器控制系统内的数据采集和记录单元，当数据采集和记录的频次较高时(如每秒1K次)，使用普通FlashROM记录数据的写入速度无法满足要求，使用普通RAM记录数据如果突遇断电会丢失(未转移的)部分数据，FRAM能更好地满足此类需求。绝大多数FRAM产品都支持I2C或SPI通讯接口，I2C接口的时钟频率最高可达1MHz，而SPI接口的时钟频率达20MHz。我们该选择那种接口，需要根据使用FRAM类小容量存储器的目的和数据存取速度、频率来确定。 除了同步时钟频率外，基于SPI通讯接口的功能能外设扩展设计还需要考虑其他一些因素，如外设工作电压、逻辑电平转换、握手信号的有效电平和默认状态等。当SPI接口的外设工作电压、接口逻辑电平电压与主控制器I/O引脚的逻辑电平向匹配时，这些问题都非常简单，标准SPI通讯接口的SCK、MOSI和MISO都采用推挽型驱动电路，SPI外设的这些信号引脚直接与总线对应连接即可。当逻辑电平电压不匹配时，电平转换电路单元是接口设计中不可缺的，由于SPI总线的信号方向都是单向的，单向的和三态的电平转换IC非常多，OnSemi(安森美)、TI、NXP(或安世)等都有电平转换产品系列可选用。接口功能方面，握手信号与SPI接口的片选信号相似，使用主控制器的低速I/O引脚即可，当然逻辑电平电压的匹配也是需要考虑的，外设的片选信号的默认状态应该设为无效电平，握手信号也应按功能选择合适的默认电平状态，即系统复位后或接口未激活时的电平状态，一般使用上拉或下拉电阻来设置。 现在我们以硬件TCP/IP协议栈单元的扩展为例来说明SPI接口的通用扩展方法。硬件协议栈，顾名思义就是使用纯数字电路硬件实现TCP/IP协议。对于存储容量小、计算能力弱的MCU来说，硬件协议栈是实现IoT应用的最佳方案。前一节的双处理器系统的网络协处理器也有相似的作用，WiFi网络协处理器需要单独编程，使用软件结合WiFi MAC和PHY等硬件单元实现TCP/IP全栈功能。本节使用WIZnet的W5500硬件TCP/IP协议栈 [1]_ ，采用标准SPI通讯接口与BlueFi金手指拓展接口的P13~P16引脚连接，进而与BlueFi的主控制器——nRF52840实现主从通讯，为BlueFi拓展有线的Ethernet(以太网)功能接口。我们将在后续的内容中使用Ethernet接口，本节使用SPI通讯接口拓展的硬件TCP/IP协议栈不仅是一种SPI接口设计示例，也是一种Ethernet功能接口拓展方法。 硬件TCP/IP协议栈W5500的内部结构如图6.15所示。 图6.15 硬件TCP/IP协议栈——W5500的内部结构(来自WIZnet) TCP/IP协议栈的实现是W5500的核心，包含一个100BT的Ethernet PHY单元，外围只需一个网络隔离变压器和RJ45插座(或者使用内置网络隔离变压器的RJ45插座)即可让系统接入Ethernet网络；PHY通过标准的MII(介质无关的接口)与MAC层(数据链路层的关键协议，确保数据报文的可靠性和完整性)连接，网络层(包含IP、ARP和PPPoE等)、传输层(TCP和UDP等)等通过内部总线与下层协议单元相连接。W5500内部有一个32KB的Ethernet接收/发送缓存，主控制器可通过SPI通讯接口发送偏移地址访问这些缓存(即读写TCP/IP协议报文)。使用W5500扩展Ethernet功能接口的信号连接如图6.16所示。 图6.16 BlueFi拓展Ethernet功能接口的信号连接 具体的电路原理图如图6.17所示。 图6.17 使用BlueFi金手指拓展W5500的电路原理图 上图的左半部分是RJ45(内置网络隔离变压器)插座、BlueFi金手指拓展接口插座的电路原理，右半部分则是W5500及其外围的基本电路，W5500共有5个信号连接到BlueFi金手指拓展接口上，包括4个标准SPI通讯接口信号和一个中断请求信号。根据W5500的数据页(Datasheet)所列的电气接口信息，建议其工作电压和I/O接口逻辑电压为3.3V，正好与BlueFi的主控制器I/O逻辑电压一致，所以W5500的这些接口信号可以与BlueFi金手指拓展接口信号直连，并使用BlueFi金手指的3.3V电源输出为其供电，注意W5500的最大消耗电流约150mA。 W5500需要外置的25MHz晶体振荡器为其内部PLL单元提供低频时钟信号，其内部PHY单元的工作模式是通过3个引脚PHY_M2/M1/M0的逻辑电平的组合配置，上图中使用一个简表列举常用配置，这3个配置引脚内部带有上拉电阻，即默认为自动协商模式。W5500的片选信号和中断请求信号都设置有上拉电阻，当这个Ethernet功能接口未与主控制器连接时，即使接口信号都为悬空状态，W5500默认是未被选择的状态，即空闲状态。 W5500支持的SPI通讯接口协议如图6.18所示。完全兼容标准SPI通讯接口以字节整数倍来传输数据，且每一次传输数据至少4个字节，包含2字节的地址信息、1字节的控制字和至少1字节的数据。数据域的传输方向和模式由控制字的低3位来指定。W5500的数据传输模式分为4种，数据域个数可变的模式，或固定为1/2/4个字节的模式。 图6.18 W5500支持的SPI通讯接口协议 根据这个Ethernet功能接口电路原理图，以及WIZnet提供的接口库，我们可以实现其软件接口和Ethernet应用，如Web(HTTP)、e-mail(SMTP和POP3)、FTP等。Arduino开源平台的Ethernet库 [2]_ 支持W5500，或者使用其改进版的库 [3]_ ，基于这些开源库代码在Arduino开源平台上使用这里拓展的Ethernet功能接口是非常容易的。 Arduino开源平台的Ethernet库的接口及其应用示例参见 [4]_ 。参考Arduino官网的编写自定义开源库的向导 [5]_ 可自行实现Ethernet接口库，或者参考 [6]_ 页面的操作向导安装第三方的开源库。 上面基于BlueFi金手指拓展的Ethernet功能接口仍可以使用Python脚本编程来实现网络连接。首先将BlueFi插入电脑USB端口，双击BlueFi复位按钮，将BlueFi的Python解释器固件拖放到BLUEFIBOOT磁盘，即可使用Python脚本程序控制BlueFi。 使用标准Ethernet网线将BlueFi开源板及其Ethernet功能接口连接到可用的以太网内，打开电源，并将下面的示例程序代码保存到“/CIRCUITPY/code.py”文件，给BlueFi开源板通电。示例代码如下： 如果接入的以太网端口与广域网是连通的，我们将会看到从测试网页抓取到的文本信息。这个示例程序用到3种开源库：requests、WIZNET5K和socket，分别是HTTP请求、W5500的SPI通讯接口和网络套接字，运行该示例程序前请从BlueFi的Python库软件包中复制这三个库文件到“/CIRCUITPY/lib/”文件夹，否则Python解释器会提示错误。 与WiFi接口不同，Ethernet接口无须特殊配置即可连接到广域网，只要求所连接的网络设备(如路由器)能够连接到广域网。 参考文献：:: [1]  [2]  [3]  [4]  [5]  [6]  ===========================6.5 本章总结=========================== SPI是一种高速同步通讯接口，也是现代绝大多数MCU片上的一种基本功能单元，虽然仅支持主从通讯模式，但数据传输速度几乎是I2C的1000倍，SPI通讯接口已经成为一种最常用的系统内高速外设拓展接口，包括LCD显示器、SD/TF卡、闪存(FlashROM)、pSRAM(伪静态RAM)、网络等外设。 SPI通讯接口是一种伪共享通讯总线，共享总线仅有SCK、MISO和MOSI三个信号，但每一个SPI从机必须有惟一的片选信号和一些必要的握手信号，使用SPI接口连接多个从外设时需要开销更多个I/O引脚。 SPI通讯接口支持全双工数据传输模式，也支持半双工模式，而且半双工模式可以节约一个I/O引脚资源。SPI通讯接口的硬件仅仅是移位寄存器，通讯协议/时序仅规定以8位(单字节)的整数倍的数据传输格式和4种数据线采样模式之外，并没有更多的信息格式规定，这意味着每一种SPI从外设都有自定义的数据格式，因此SPI通讯接口外设没有统一的接口库。 本章中，我们首先了解SPI通讯接口的电路连接和基本时序/协议，包括总线拓扑、数据线的4种采样模式，并了解多种改进的SPI通讯接口。然后从SPI主机模式和从机模式两种角度了解SPI接口的硬件设计和软件编程，并以SPI接口的LCD显示器和网络协处理器等为例分别说明两种模式的接口。 通过本章学习，我们初步掌握SPI通讯接口的基本原理、接口设计方法、编程控制及应用。 本章总结如下： SPI通讯接口主机和从机的移位寄存器结构、全双工和半双工连接方式、2种总线拓扑，SPI接口的基本时序、数据线的4种采样模式 改进的SPI通讯接口，如QSPI、SDIO等 SPI接口主机的接口设计，基于SPI接口的彩色LCD显示器的软硬件设计 SPI接口从机的接口设计，基于SPI接口的双处理器系统的软硬件设计，WiFi网络协处理器的编程应用 SPI接口的系统功能拓展设计及应用，基于SPI通讯接口的硬件TCP/IP协议栈的Ethernet功能拓展 =========================== 思考题=========================== 根据图6.1和图6.4，简述SPI通讯接口的主机向从机的0x1234地址单元写入数据0x5678的传输过程。 根据图6.3所示的两种SPI总线拓扑，分别简述两种总线拓扑的主机访问其中某个从机的过程。 BlueFi的彩色LCD显示器由240*240个像素组成的点阵显示器，每个像素大小和像素间距大小是固定的，像素和间距越小则显示效果越细腻。下图是5(列)7(行)点阵字符的示意图，请给出“0”～“9”十个数字字符的字模数据(含字符间隔)；当我们需要将这些字符放大2倍(10列14行)、4倍或2n倍显示时，请给出字模放大算法。 图形LCD显示器不仅可以显示几何图形、字符，也可以显示汉字等象形文字。假设使用16*16点阵(含字间距)显示单个汉字，请给出自己名字的汉字字模数据，并使用BlueFi将这些汉字显示在LCD屏幕上。 请列举多处理器系统的优缺点。 使用搜索引擎查阅FRAM存储器MB85RS16的Datasheet，并列举其他半导体公司的同类存储器。如果BlueFi需要使用此类存储器保存关键数据，请以BlueFi金手指拓展接口设计该存储器的软硬件接口。 "},{"title":"AHK脚本","date":"2021-07-28T20:00:05.000Z","url":"/posts/a583/","tags":[["⌨️ AHK","/tags/%E2%8C%A8%EF%B8%8F-AHK/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"关于ahk语言请百度，这里只是记录常用改键代码。 AHK按键参考表鼠标概述ttLButton 鼠标左键RButton 鼠标右键MButton 鼠标中键或滚轮高级XButton1 鼠标的第四个按钮 一般和 Browser_Back 执行相同功能XButton2 鼠标的第五个按钮 一般和 Browser_Forward 执行相同功能WheelWheelDown 向下转动鼠标滚轮（向您的方向）WheelUp 向上转动鼠标滚轮（远离您的方向）WheelLeftWheelRight 向左或向右滚动 需要 Windows Vista 或更高版本 这可以用在某些（但并非所有）带第二个滚轮或支持左右滚动的鼠标热键注意: 字母和数字按键的名称和单个字母或数字相同. 例如: b 表示 “b” 键而 5 表示 “5” 键. CapsLock 大小写锁定键Space 空格键Tab Tab 键Enter (或 Return) 回车键Escape (或 Esc) 退出键Backspace (或 BS) 退格键 ScrollLock 滚动锁定键Delete (或 Del) 删除键Insert (或 Ins) 插入改写切换键Home Home 键End End 键PgUp 向上翻页键PgDn 向下翻页键Up 向上方向键Down 向下方向键Left 向左方向键Right 向右方向键 F1 - F24 在大多数键盘顶部的 12 个或更多的功能键 按键修饰符LWin 左边的 Windows 徽标键 对应的热键前缀为 &lt;#RWin 右边的 Windows 徽标键 对应的热键前缀为 &gt;#注意：与 Control/Alt/Shift 不同，没有一般的/中性的“Win”键，因为操作系统不支持 不过含 # 修饰符的热键可以被任何一个 Win 键触发 Control ^ Alt ! Shift +LControl（或 LCtrl） &lt;^RControl（或 RCtrl） &gt;^LShift 左 Shift 键 对应的热键前缀为 &lt;+RShift 右 Shift 键 对应的热键前缀为 &gt;+LAlt 左 Alt 键 对应的热键前缀为 &lt;!RAlt 右 Alt 键 对应的热键前缀为 &gt;! Browser_Back 后退Browser_Forward 前进Browser_Refresh 刷新Browser_Stop 停止Browser_Search 搜索Browser_Favorites 收藏夹Browser_Home 主页Volume_Mute 静音Volume_Down 调低音量Volume_Up 增加音量Media_Next 下一首Media_Prev 上一首Media_Stop 停止Media_Play_Pause Play/PauseLaunch_Mail 打开默认的电子邮件程序Launch_Media 打开默认的媒体播放器Launch_App1 打开我的电脑Launch_App2 打开计算器注：上面列出的每个按键的功能可以通过修改 Windows 注册表进行替换 这个表格中显示的是在 Windows 系统的大多数版本中每个按键的默认功能特别AppsKey 菜单键 这是调用右键上下文菜单的按键PrintScreen 捕获屏幕CtrlBreak暂停 暂停键中断 中断键 由于此键和 Pause 含义相同，所以在热键中请使用 ^CtrlBreak 代替 ^Pause 或^Break帮助 帮助键 此键可能在大多数键盘上不存在 它通常和 F1 不同.Sleep 休眠键 注意在一些键盘上的 sleep 键可能不是休眠功能SCnnn 请在 nnn 中指定按键的扫描码 识别上面没有提到的罕见的按键 请参阅特殊按键了解详情VKnn 请在 nn 中指定十六进制的虚拟按键码 这种极少用的方法还可以避免某些类型的热键需要安装键盘钩子 例如，后面的热键不使用键盘钩子，但副作用是它会在按下 Home 或 NumpadHome 的其中一个时触发：^VK24::MsgBox You pressed Home or NumpadHome while holding down Control.已知限制：强制使用键盘钩子的 VK 热键，例如 *VK24 或 ~VK24，只会触发其中一个热键，而不会触发两者（例如触发 NumpadHome 但不触发 Home） 关于 VKnn 方法的更多细节，请参阅特殊按键 "},{"title":"看板罗小黑-live2d","date":"2021-07-24T15:20:55.000Z","url":"/posts/bc41/","tags":[["💻 Hexo","/tags/%F0%9F%92%BB-Hexo/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"最终效果 左下角就有 安装插件 主题配置打开站点配置文件，插入 推荐配置 这是我调整好的效果，如果想自定义，请按注释配置 安装罗小黑皮肤 一键三连 记得去给up主一键三连 桌面版仓库zenghongtu/PPet: 👻在你的桌面放一个萌妹子，多一点趣味😏~（支持Mac、Win和Linux） (github.com) 导入模型即可（模型去up主视频下面下载） 猫形态-人形态变换 因为没有能力自建API，所以只能咯咯咯 相关资料在这里 fghrsh/live2d_api: Live2D 看板娘插件 () 上使用的后端 API (github.com) stevenjoezhang/live2d-widget: 把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform (github.com) 如果有大佬建了api,请踢我一脚（评论区留言） 其他刚才百度，还发现了其他的模型，牛！ 【罗小黑战记】比丢live 2d+facerig演示_哔哩哔哩_bilibili 「罗小黑战记」哪吒live2d互动壁纸展示,游戏,RPG游戏,好看视频 (baidu.com) 把罗小黑官方宣传海报动画化！肝爆的live2d动态海报制作！_哔哩哔哩_bilibili 不过都没链接，可能得去软件里面扒。 关于api折腾半天，也没成功，大佬记得踢我一脚。 %%% tip home %%%-感谢b站宝藏up主我把罗小黑做成了Live2D虚拟主播！_哔哩哔哩_bilibili提供的罗小黑live2d模型、EYHN/hexo-helper-live2d插件、Live2d Widget | Akilar の糖果屋 %%% endtip %%%-"},{"title":"Icosahedron-Geometry 背景","date":"2021-07-21T15:20:55.000Z","url":"/posts/c6bd/","tags":[["💻 Hexo","/tags/%F0%9F%92%BB-Hexo/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"%%% tip home %%%- 首先感谢大佬的开源项目 %%% ghcard teachtyler/Icosahedron-Geometry %%%- 还有店长的教程糖果屋微调合集 | Akilarの糖果屋 Custom Beautify | Akilarの糖果屋 %%% span red, 未实现：冰球跟随音乐振动 %%%- 希望有大佬来解决这个问题，我这个小菜鸡实在搞不定。 有建议请评论区留言，欢迎！！ 7.27更新：关闭移动端并根据屏幕大小判断是否引入并开启 %%% endtip %%%- 最终效果 引入js只针对butterfly主题，其他主题请自己根据情况调整 icebg.js代码在最下面 在_config.butterfly.yml中inject的bottom:插入代码 建议修改合适后再通过jsd加速插入，因为每个人需求不一样，如果你想要本站一样的效果就改成这样,如果需要自定义请接着看。 当然，建议读者把代码存到自己仓库 如果只需要当背景，而不是头图，到这里就够了，如果想要跟本站一样，参考店长头图透明教程在costom.css文件中加入 注意：因为butterfly版本迭代，店长教程中的配置手机 PC 页面白天黑夜共四个背景图的第一步请按diff代码块配置。因为我就掉坑了 店长教程点这里Custom Beautify | Akilarの糖果屋,建议配合糖果屋微调合集 | Akilarの糖果屋配置手机 PC 页面白天黑夜共四个背景图食用，效果更佳。 然后 然后就没了，就这，对，就这。 自定义建议有一定基础的朋友进行自定义修改，比如把球改到侧边栏 icebg.js我放在了source博客根目录，方便调试，读者可以根据情况修改。 自定义只需要修改icebg.js内的代码就可以了，代码还是挺长的，其他的我也不会了，大家看着办吧，有大佬改记得评论区告诉我一下。 "},{"title":"词云图","date":"2021-07-18T21:20:55.000Z","url":"/posts/40a1/","tags":[["test","/tags/test/"]],"categories":[[" ",""]],"content":"微词云 微词云 · 简单强大的文字云艺术生成器 (weiciyun.com) %%% folding green, 共享账号、来自吾爱破解论坛 %%%- 15838146089 wang@6089 %%% endfolding %%%- 图悦图悦-在线词频分析工具-词云图制作软件 (picdata.cn) 优词云能用且免费，但不是很好看，有广告但可以跳过。 优词云|词云|标签云|专业强大的在线词云制作工具|在线标签云制作 (uciyun.com) WordItOut EdWordle比较适用于英文文章，中文可以但不好用。 Create word clouds – WordItOut EdWordle WordArt.com很慢，慢到我还没用过 Edit word art - WordArt.com"},{"title":"创业的前提","date":"2021-07-18T21:20:55.000Z","url":"/posts/1598/","categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":"讲座笔记 创业的前提 个人观点1.物质基础，说白了就是要有钱。2.可以承受创业失败，或者一定程度上的失败，毕竟大部分创业是有可能失败的，不能赌上自己的全部身家，就像我们之前教股票的老师讲的一样:不能拿自己吃饭的钱去炒股。3.然后就是接下来要讲的有老师讲的，也有个人观点，混杂。 产品擅长与其说是擅长，不如说是优点，或者是解决了什么痛点。一个产品要有足够的竞争力，这是一个团队或者一个企业的核心，也是创业前提中很重要的一点。 趋势产品就像人一样，人不会选择在没有前途的行业发展，产品也不能在没有前景的行业内发展，如果行业整体发展力不足，再好的产品也无济于事，除非你的产品可以改变这种现状。 蓝海蓝海:就是行业市场还很广，同行业公司有但不多。红海:行业市场内部竞争大，内卷严重，巨头争霸。那肯定不能在红海，个人感觉红海也可以理解为血流成河的海。 大众大众不如说是受众产品的受众要广，让100个人各拿1块钱，总是比让1个人拿100块要容易的多，当然这话不能说绝对，但一般是这样，而且你要有找到100个人的能力，现在腾讯和网易的游戏就很好的论证了这句话，懂得都懂。 创新这个点跟上面的擅长类似，其实都是讲要有足够的竞争力，创新是必要条件，但不是充分条件，毕竟不是所有创新都是有意义的。 兴趣创业肯定要做自己感兴趣的事情，这没什么好讲的，虽然创业是为了钱，但也不能只为了钱。 团队创业初期团队很重要，当然如果选择单干也没问题，一个良好的团队要有分工，有管理，还有最重要的信任。关键字:信任，互补，匹配，稳定 资金这个前面讲了，不再细说，讲一个老师提到的点，签合同注意惩罚条款，对赌协议之类的。启动资金要足够，这个前面讲到了接受投资不能太多，要明确需要多少，掌握公式主权。关键字:启动，少量，及时，投入 销售要有好的销售渠道，这个讲的不多，但也很重要人脉要广:例如讲座老师的5个微信号，每个5000人客服最好自己把握，企业与客户之间加强沟通成本控住，成本也是核心竞争力之一机密保住，保不住公司就没了，就是这么现实。扩张:要有远见，买商标要买全关键词:人脉，客服，成本，机密，扩张"},{"title":"使用又拍云加速后的HTTPS访问和DNS设置","date":"2021-07-16T15:20:55.000Z","url":"/posts/ce44/","tags":[["💻 Hexo","/tags/%F0%9F%92%BB-Hexo/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"%%% tip home %%%-https折腾好久，就是搞不定，最后是自己配置有问题，所以来写个教程 域名以我自己的为例 wxydejoy.top 注：本教程适用于有一定折腾基础的朋友，主要是裸域名的访问，有建议可以评论。 %%% endtip %%%- 最终效果记得cmdipconfig /flushdns 记得cmdipconfig /flushdns 记得cmdipconfig /flushdns 记得cmdipconfig /flushdns 怎么样，不错吧 Gitpage设置其实之前有的就不用修改，只是确认一下 Page设置这个其实是用来检测你的其他设置有没有问题 CNAME文件 DNS解析这里答案不唯一，多种方案都行，推荐设置，此处感谢 @哔(bì)哗(huá) 大佬的帮助 尽量照抄。 原理(不一定对，但能用) DNS设置 又拍云CDN加速CDN怎么开启这里不讲了，只讲关键配置 服务名称随意 裸域名的CDN配置 www域名的CDN配置 建议不得不说我现在typora配合picgo和又拍云写教程很香，之前GitHub图床上传超慢，现在秒上传 可以开个存储仓库用来做图床，很香。 另外设置好cdn加速之后，可以打开静态资源加速，很不错。 SSL证书申请这一步最为关键，我这里是阿里的ssl免费证书，哪家都可以，建议在自己购买域名的地方申请，可以一键设置dns解析，方便快捷。 到这里就可以点击验证，当然如果是其他地方申请的参照各个服务商的设置。 域名验证成功，域名验证记录在证书签发后再删除，否则会因没有解析记录导致证书签发失败。 这里可以看到证书对www.wxydejoy.top和wxydejoy.top是都可用的，接下来会提到。 签发后等一下可以删掉 别忘了在申请证书那地方下载证书 又拍云的HTTPS访问设置然后到又拍云 填入刚才下好的证书（文本格式），全部复制就好，全部复制！！！ %%% tip home %%%-一定要记得两个域名(www和裸域名)都要打开强制https，不然www是打不开的 %%% endtip %%%- 到这里就结束了 记得把签发验证的dns解析删掉，不删也问题不大 检验建议用手机开流量访问测试，电脑延迟还是蛮久的，或者重启(有路由器的重启路由器，尤其是闪讯) 记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns记得cmdipconfig /flushdns"},{"title":"emoji大全","date":"2021-07-02T21:20:55.000Z","url":"/posts/6bdd/","tags":[["🙃 HPP","/tags/%F0%9F%99%83-HPP/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":" 🚩23 🌹🍀🍎💰📱🌙🍁🍂🍃🌷💎🔪🔫🏀⚽⚡👄👍🔥emoji表情😀😃😄😁😆😅🤣😂🙂🙃😉😊😇🥰😍🤩😘😗☺️😚😙🥲😋😛😜🤪😝🤑🤗🤭🤫🤔🤐🤨😐😑😶😏😒🙄😬🤥😌😔😪🤤😴😷🤒🤕🤢🤮🤧🥵🥶🥴😵🤯🤠🥳😎🤓🧐😕😟🙁☹️😮😯😲😳🥺😦😧😨😰😥😢😭😱😖😣😞😓😩😫🥱😤😡😠🤬emoji人物👶🧒👦👧🧑👱👨🧔👨‍🦰👨‍🦱👨‍🦳👨‍🦲👩👩‍🦰🧑‍🦰👩‍🦱🧑‍🦱👩‍🦳🧑‍🦳👩‍🦲🧑‍🦲👱‍♀️👱‍♂️🧓👴👵🙍🙍‍♂️🙍‍♀️🙎🙎‍♂️🙎‍♀️🙅🙅‍♂️🙅‍♀️🙆🙆‍♂️🙆‍♀️💁💁‍♂️💁‍♀️🙋🙋‍♂️🙋‍♀️🧏🧏‍♂️🧏‍♀️🙇🙇‍♂️🙇‍♀️🤦🤦‍♂️🤦‍♀️🤷🤷‍♂️🤷‍♀️🧑‍⚕️👨‍⚕️👩‍⚕️🧑‍🎓👨‍🎓👩‍🎓🧑‍🏫👨‍🏫👩‍🏫🧑‍⚖️👨‍⚖️👩‍⚖️🧑‍🌾👨‍🌾👩‍🌾🧑‍🍳👨‍🍳👩‍🍳🧑‍🔧👨‍🔧👩‍🔧🧑‍🏭👨‍🏭👩‍🏭🧑‍💼👨‍💼👩‍💼🧑‍🔬👨‍🔬👩‍🔬🧑‍💻👨‍💻👩‍💻🧑‍🎤👨‍🎤👩‍🎤🧑‍🎨👨‍🎨👩‍🎨🧑‍✈️👨‍✈️👩‍✈️🧑‍🚀👨‍🚀👩‍🚀🧑‍🚒👨‍🚒👩‍🚒👮👮‍♂️👮‍♀️🕵️🕵️‍♂️🕵️‍♀️💂💂‍♂️💂‍♀️🥷👷👷‍♂️👷‍♀️🤴👸👳👳‍♂️👳‍♀️👲🧕🤵🤵‍♂️🤵‍♀️👰👰‍♂️👰‍♀️🤰🤱👩‍🍼👨‍🍼🧑‍🍼👼🎅🤶🧑‍🎄🦸🦸‍♂️🦸‍♀️🦹🦹‍♂️🦹‍♀️🧙🧙‍♂️🧙‍♀️🧚🧚‍♂️🧚‍♀️🧛🧛‍♂️🧛‍♀️🧜🧜‍♂️🧜‍♀️🧝🧝‍♂️🧝‍♀️🧞🧞‍♂️🧞‍♀️🧟🧟‍♂️🧟‍♀️💆💆‍♂️💆‍♀️💇💇‍♂️💇‍♀️🚶🚶‍♂️🚶‍♀️🧍🧍‍♂️🧍‍♀️🧎🧎‍♂️🧎‍♀️🧑‍🦯👨‍🦯👩‍🦯🧑‍🦼👨‍🦼👩‍🦼🧑‍🦽👨‍🦽👩‍🦽🏃🏃‍♂️🏃‍♀️💃🕺🕴️👯👯‍♂️👯‍♀️🧖🧖‍♂️🧖‍♀️🧘🧑‍🤝‍🧑👭👫👬💏👩‍❤️‍💋‍👨👨‍❤️‍💋‍👨👩‍❤️‍💋‍👩💑👩‍❤️‍👨👨‍❤️‍👨👩‍❤️‍👩👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧👨‍👦👨‍👦‍👦👨‍👧👨‍👧‍👦👨‍👧‍👧👩‍👦👩‍👦‍👦👩‍👧👩‍👧‍👦👩‍👧‍👧🗣️👤👥🫂emoji手势👋🤚🖐️✋🖖👌🤌🤏✌️🤞🤟🤘🤙👈👉👆🖕👇☝️👍👎✊👊🤛🤜👏🙌👐🤲🤝🙏✍️💅🤳💪emoji日常👣👀👁️👄💋👂🦻👃👅🧠🦷🦴💪🦾🦿🦵🦶👓🕶️🥽🥼🦺👔👕👖🧣🧤🧥🧦👗👘🥻🩱🩲🩳👙👚👛👜👝🎒👞👟🥾🥿👠👡🩰👢👑👒🎩🎓🧢⛑️💄💅💍💼🌂☂️💈🛀🛌💥💫💦💨emoji手机📱📲📶📳📴☎📞📟📠🤳emoji公共♻🏧🚮🚰♿🚹🚺🚻🚼🚾⚠🚸⛔🚫🚳🚭🚯🚱🚷🔞💈emoji动物🙈🙉🙊💥💫💦💨🐵🐒🦍🦧🐶🐕🦮🐕‍🦺🐩🐺🦊🦝🐱🐈🐈‍⬛🦁🐯🐅🐆🐴🐎🦄🦓🦌🐮🐂🐃🐄🐷🐖🐗🐽🐏🐑🐐🐪🐫🦙🦒🐘🦏🦛🐭🐁🐀🐹🐰🐇🐿️🦔🦇🐻🐻‍❄️🐨🐼🦥🦦🦨🦘🦡🐾🦃🐔🐓🐣🐤🐥🐦🐧🕊️🦅🦆🦢🦉🦩🦚🦜🐸🐊🐢🦎🐍🐲🐉🦕🦖🐳🐋🐬🐟🐠🐡🦈🐙🐚🐌🦋🐛🐜🐝🐞🦗🕷️🕸️🦂🦟🦠🦀🦞🦐🦑emoji植物💐🌸💮🏵️🌹🥀🌺🌻🌼🌷🌱🌲🌳🌴🌵🌾🌿☘️🍀🍁🍂🍃emoji自然🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜☀️🌝🌞⭐🌟🌠☁️⛅⛈️🌤️🌥️🌦️🌧️🌨️🌩️🌪️🌫️🌬️🌈☂️☔⚡❄️☃️⛄☄️🔥💧🌊emoji饮食🍇🍈🍉🍊🍋🍌🍍🥭🍎🍏🍐🍑🍒🍓🥝🍅🥥🥑🍆🥔🥕🌽🌶️🥒🥬🥦🧄🧅🍄🥜🌰🍞🥐🥖🫓🥨🥯🥞🧇🧀🍖🍗🥩🥓🍔🍟🍕🌭🥪🌮🌯🥙🧆🥚🍳🥘🍲🥣🥗🍿🧈🧂🥫🍱🍘🍙🍚🍛🍜🍝🍠🍢🍣🍤🍥🥮🍡🥟🥠🥡🦪🍦🍧🍨🍩🍪🎂🍰🧁🥧🍫🍬🍭🍮🍯🍼🥛☕🍵🍶🍾🍷🍸🍹🍺🍻🥂🥃🥤🧋🧃🧉🧊🥢🍽️🍴🥄emoji文体🧗🧗‍♂️🧗‍♀️🤺🏇⛷️🏂🏌️🏌️‍♂️🏌️‍♀️🏄🏄‍♂️🏄‍♀️🚣🚣‍♂️🚣‍♀️🏊🏊‍♂️🏊‍♀️⛹️⛹️‍♂️⛹️‍♀️🏋️🏋️‍♂️🏋️‍♀️🚴🚴‍♂️🚴‍♀️🚵🚵‍♂️🚵‍♀️🤸🤸‍♂️🤸‍♀️🤼🤼‍♂️🤼‍♀️🤽🤽‍♂️🤽‍♀️🤾🤾‍♂️🤾‍♀️🤹🤹‍♂️🤹‍♀️🧘🧘‍♂️🧘‍♀️🎪🛹🛼🛶🎗️🎟️🎫🎖️🏆🏅🥇🥈🥉⚽⚾🥎🏀🏐🏈🏉🎾🥏🎳🏏🏑🏒🥍🏓🏸🥊🥋🥅⛳⛸️🎣🎽🎿🛷🥌🎯🎱🎮🎰🎲🧩♟️🎭🎨🧵🧶🎼🎤🎧🎷🪗🎸🎹🎺🎻🥁🎬🏹emoji恐怖😈👿👹👺💀☠👻👽👾💣emoji旅游👣🎠🎡🎢🚣🏔️⛰️🌋🗻🏕️🏖️🏜️🏝️🏞️🏟️🏛️🏗️🏘️🏚️🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪🕌🛕🕍⛩🕋⛲⛺🌁🌃🏙️🌄🌅🌆🌇🌉🎠🎡🎢🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚐🚑🚒🚓🚔🚕🚖🚗🚘🚙🛻🚚🚛🚜🏎️🏍️🛵🛺🚲🛴🚏🛣️🛤️⛽🚨🚥🚦🚧⚓⛵🚤🛳️⛴️🛥️🚢✈️🛩️🛫🛬🪂💺🚁🚟🚠🚡🛰️🚀🛸🪐🌠🌌⛱️🎆🎇🎑💴💵💶💷🗿🛂🛃🛄🛅🧭emoji物品💌💎🔪💈🚪🚽🚿🛁⌛⏳⌚⏰🎈🎉🎊🎎🎏🎐🎀🎁📯📻📱📲☎📞📟📠🔋🔌💻💽💾💿📀🎥📺📷📹📼🔍🔎🔬🔭📡💡🔦🏮📔📕📖📗📘📙📚📓📃📜📄📰📑🔖💰💴💵💶💷💸💳✉📧📨📩📤📥📦📫📪📬📭📮✏✒📝📁📂📅📆📇📈📉📊📋📌📍📎📏📐✂🔒🔓🔏🔐🔑🔨🔫🔧🔩🔗💉💊🚬🔮🚩🎌💦💨emoji标志♠️♥️♦️♣️🃏🀄🎴🔇🔈🔉🔊📢📣📯🔔🔕🎵🎶💹🛗🏧🚮🚰♿🚹🚺🚻🚼🚾⚠️🚸⛔🚫🚳🚭🚯🚱🚷📵🔞☢️☣️⬆️↗️➡️↘️⬇️↙️⬅️↖️↕️↔️↩️↪️⤴️⤵️🔃🔄🔙🔚🔛🔜🔝🛐⚛️🕉️✡️☸️☯️✝️☦️☪️☮️🕎🔯♈♉♊♋♌♍♎♏♐♑♒♓⛎🔀🔁🔂▶️⏩⏭️⏯️◀️⏪⏮️🔼⏫🔽⏬⏸️⏹️⏺️⏏️🎦🔅🔆📶📳📴♀️♂️✖️➕➖➗♾️‼️⁉️❓❔❕❗〰️💱💲⚕️♻️⚜️🔱📛🔰⭕✅☑️✔️❌❎➰➿ 〽️✳️✴️❇️©️®️™️#️⃣*️⃣0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🔟🔠🔡🔢🔣🔤🅰️🆎🅱️🆑🆒🆓ℹ️🆔Ⓜ️🆕🆖🅾️🆗🅿️🆘🆙🆚🈁🈂️🈷️🈶🈯🉐🈹🈚🈲🉑🈸🈴🈳㊗️㊙️🈺🈵🔴🟠🟡🟢🔵🟣🟤⚫⚪🟥🟧🟨🟩🟦🟪🟫⬛⬜◼️◻️◾◽▪️▫️🔶🔷🔸🔹🔺🔻💠🔘🔳🔲🏁🚩🎌🏴🏳️🏳️‍🌈🏳️‍⚧️🏴‍☠️emoji生肖🐁🐂🐅🐇🐉🐍🐎🐐🐒🐓🐕🐖emoji星座♈♉♊♋♌♍♎♏♐♑♒♓⛎emoji钟表🕛🕧🕐🕜🕑🕝🕒🕞🕓🕟🕔🕠🕕🕡🕖🕢🕗🕣🕘🕤🕙🕥🕚🕦⌛⏳⌚⏰⏱⏲🕰emoji心形💘❤💓💔💕💖💗💙💚💛💜💝💞💟❣emoji花草💐🌸💮🏵️🌹🥀🌺🌻🌼🌷🌱🌿☘️🍀emoji树叶🌿☘️🍀🍁🍂🍃emoji月亮🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝emoji水果🍇🍈🍉🍊🍋🍌🍍🍎🍏🍐🍑🍒🍓🥝emoji钱币💴💵💶💷💰💸💳emoji交通🚂🚃🚄🚅🚆🚇🚈🚉🚊🚝🚞🚋🚌🚍🚎🚏🚐🚑🚒🚓🚔🚕🚖🚗🚘🚚🚛🚜🚲⛽🚨🚥🚦🚧⚓⛵🚣🚤🚢✈💺🚁🚟🚠🚡🚀emoji建筑🏟️🏛️🏗️🛖🏘️🏚️🏠🏡🏢🏣🏤🏥🏦🏨🏩🏪🏫🏬🏭🏯🏰💒🗼🗽⛪🕌🛕🕍⛩️🕋⛲⛺🌁🌃🏙️🌄🌅🌆🌇🌉emoji办公📱📲☎️📞📟📠🔋🔌💻🖥️🖨️⌨️🖱️🖲️💽💾💿📀🧮🎥🎞️📽️📺📷📸📹📼🔍🔎🕯️💡🔦🏮🪔📔📕📖📗📘📙📚📓📒📃📜📄📰🗞️📑🔖🏷️💰🪙💴💵💶💷💸💳🧾✉️📧📨📩📤📥📦📫📪📬📭📮🗳️✏️✒️🖋️🖊️🖌️🖍️📝📁📂🗂️📅📆🗒️🗓️📇📈📉📊📋📌📍📎🖇️📏📐✂️🗃️🗄️🗑️🔒🔓🔏🔐🔑🗝️emoji箭头⬆↗➡↘⬇↙⬅↖↕↔↩↪⤴⤵🔃🔄🔙🔚🔛🔜🔝"},{"title":"智能大反攻","date":"2021-06-22T20:04:05.000Z","url":"/posts/b586/","tags":[["📽️ Movies","/tags/%F0%9F%93%BD%EF%B8%8F-Movies/"]],"categories":[["📽️ Movies","/categories/%F0%9F%93%BD%EF%B8%8F-Movies/"]],"content":" 导演: 迈克尔·里安达 / 杰夫·罗韦编剧: 迈克尔·里安达 / 杰夫·罗韦主演: 奥利维娅·科尔曼 / 埃里克·安德烈 / 玛娅·鲁道夫 / 查琳·易 / 丹尼·麦克布莱德 / 更多…类型: 喜剧 / 科幻 / 动画 / 冒险制片国家/地区: 美国 / 加拿大 / 中国香港语言: 🔠 英语上映日期: 2021-04-30(美国网络)片长: 113分钟又名: 一家人大战机械人(港) / 一家断线救地球(港) / 米家大战机器人(台) / 无线之战(台) / 米歇尔大战机器人 / 米歇尔一家大战机器人 / 米切尔一家大战机器人 / ConnectedIMDb: tt7979580 Your browser does not support the video tag. 开头是机器人，但是莫名其妙的进入了家庭教育，好吧一开始就是家庭教育的一幕 讲青年教育，讲家庭关系，讲相处 妈妈教育了一下爸爸，然后爸爸开始看纪录片，开始回忆，后面应该就是鸡汤之类的吧 让我看看他怎么修复 直呼666，不上大学，去玩吧。 然后就是一路翻车 恶心心 场面感觉不错 新人换旧人 然后老板就凉凉了 开始了开始了，正片开始 机器人大反攻开始 关进小黑屋 老剧情了 又扯上家庭了 后面就是一堆碾压 也还行"},{"title":"于和伟","date":"2021-06-21T20:05:05.000Z","url":"/posts/e0eb/","tags":[["⛄ 演员","/tags/%E2%9B%84-%E6%BC%94%E5%91%98/"]],"categories":[["📽️ Movies","/categories/%F0%9F%93%BD%EF%B8%8F-Movies/"]],"content":"于和伟 于和伟，1971年5月4日出生于辽宁省抚顺市东洲区，中国内地影视男 ⛄ 演员，毕业于上海戏剧学院1996届表演本科班。 1999年，参演个人首部电视剧《曹操》，从而正式进入演艺圈。2003年，参演高希希执导的抗战剧《历史的天空》 [1] 。2004年，在情感剧《搭错车》中饰演苏民生。2009年，在古装剧《三国》中饰演刘备 [2] 。2011年，搭档主演电视剧《青盲》 [3] 。2011年，凭借电视剧《幸福在路上》获得南方盛典最佳男 ⛄ 演员奖 [4] 。2012年5月22日，获得MSN星月年度最具价值男 ⛄ 演员奖。2014年，主演都市情感剧《下一站婚姻》 [5] ，并凭借该剧获得第17届华鼎奖当代题材最佳男 ⛄ 演员奖 [6] 。 2015年8月9日，凭借电视剧《下一站婚姻》获得第17届华鼎奖最佳男 ⛄ 演员奖 [6] 。2017年9月16日，凭借电影《我不是潘金莲》获得第31届中国电影金鸡奖最佳男配角 [7] 。2018年，于和伟凭借《大军师司马懿之军师联盟》获得第24届上海电视节“白玉兰奖”最佳男配角 [8] 。2019年，主演电视剧《巡回检察组》 [9] ；同年，获得第十七届电影表演艺术学会奖 [10] 。2021年6月10日，凭借《觉醒年代》获得第27届上海电视节-白玉兰奖最佳男主角奖。 [107] 还是来自百度百科"},{"title":"张译","date":"2021-06-21T20:04:05.000Z","url":"/posts/8659/","tags":[["⛄ 演员","/tags/%E2%9B%84-%E6%BC%94%E5%91%98/"]],"categories":[["📽️ Movies","/categories/%F0%9F%93%BD%EF%B8%8F-Movies/"]],"content":"张译 张译，1978年2月17日出生于黑龙江省哈尔滨市，中国内地男 ⛄ 演员。 1997年至2006年服役于北京军区政治部战友话剧团。2006年，主演军事励志题材电视剧《士兵突击》 [1] 。2009年，主演抗战剧《我的团长我的团》 [2] ，并凭借该角色获得2009中国电视榜“最深入人心电视形象”的荣誉 [3] ；2013年，主演都市情感剧《抹布女也有春天》 [8] ；同年，主演当代都市婚姻爱情剧《辣妈正传》 [9] 。2014年9月，主演打拐题材电影《亲爱的》 [10] ，并凭借饰演的韩德忠一角获得第30届中国电影金鸡奖最佳男配角奖 [11] 。2015年5月，主演家庭剧情片《山河故人》 [12] 。 2016年9月，主演黑色幽默悬疑片《追凶者也》，并凭借该片获得第八届中国电影导演协会年度男 ⛄ 演员奖 [13-14] ；2017年6月16日，凭借都市剧《鸡毛飞上天》获第23届上海电视节白玉兰奖最佳男主角奖 [16] 。2018年2月16日，主演中国首部现代化海军题材电影《红海行动》全国上映 [17-18] 。2019年1月，主演的剧情片《一秒钟》入围柏林电影节主竞赛单元 [19] ；9月30日，主演的剧情片《我和我的祖国》全国上映 [20] 。 2020年3月，主演并担任艺术总监的刑侦剧《重生》播出 [21] ；同年8月21日，主演的抗战电影《八佰》全国公映。9月，通过《光荣时代》荣获第四届网影盛典年度最佳剧集男 ⛄ 演员 [22] ；10月1日，出演的电影《我和我的家乡》上映 [66-67] ；10月23日，主演的抗美援朝题材电影《金刚川》上映 [68] ；11月27日，主演的《一秒钟》上映 [69] 。 2021年3月20日，主演网剧《重生之门》官宣 ；4月30日，领衔主演由张艺谋执导的谍战影片《悬崖之上》上映 以上来自百度百科 具体内容待我有空"},{"title":"日本🗨 漫画60年","date":"2021-06-19T20:04:05.000Z","url":"/posts/2ef9/","tags":[["🗺️ 漫画","/tags/%F0%9F%97%BA%EF%B8%8F-%E6%BC%AB%E7%94%BB/"]],"categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":" "},{"title":"74HC595 学习笔记","date":"2021-06-16T20:04:05.000Z","url":"/posts/2beb/","tags":[["📟 51单片机","/tags/%F0%9F%93%9F-51%E5%8D%95%E7%89%87%E6%9C%BA/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"芯片简述：74HC595是一个8位串行输入、串并行输出的位移缓存器：并行输出为三态输出。在SCK 的上升沿，串行数据由SER输入到内部的8位位移缓存器，并由QA~QH’输出，在SH_cp（移位寄存器时钟输入）的上升沿输入到移位寄存器中，在ST_cp（存储器时钟输入）的上升沿输入到存储寄存器中去。如果两个时钟连在一起，则移位寄存器总是比存储寄存器早一个脉冲。 8位串行输入/输出或者并行输出移位寄存器，具有高阻关断状态。三态。 芯片主要功能多用为：扩展端口，减小单片机芯片端口的压力。 图中7654321代表位数，学校校园网还是有点问题，github上不去，换个 shcp stcp就像两个看门的老大爷，一个管输入，一个管输出，都是上升沿有效，然后这里就可以写两个函数，参考网上的教程，以及课本（因为电路板连到了wr和rd口，没办法了，只能这样了）首先按照课本上的接线，用rxd和txd口发送 没想到卡在了电路层面，吐了，换个模拟元件就好了 黑色为1 倒叙 取反 倒序，回头写个带界面的小程序画图。今晚就到这，先睡觉"},{"title":"工业机器人-减速机构","date":"2021-06-13T21:20:55.000Z","url":"/posts/f772/","tags":[["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"]],"categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"谐波齿轮减速器由固定的内齿刚轮、柔轮、和使柔轮发生径向变形的波发生器组成，谐波齿轮减速机是齿轮减速机中的一种新型传动结构，它是利用柔性齿轮产生可控制的弹性变形波，引起刚轮与柔轮的齿间相对错齿来传递动力和运动。  RV(RotateVector)减速器是在摆线针轮传动的基础上发展起来的一种二级减速传动装置。近年来在工业机器人等精密传动领域得到了广泛的应用。  "},{"title":"AKKO3068说明书","date":"2021-06-10T21:20:55.000Z","url":"/posts/cd88/","tags":[["键盘⌨️","/tags/%E9%94%AE%E7%9B%98%E2%8C%A8%EF%B8%8F/"]],"categories":[[" ",""]],"content":" "},{"title":"建站的“心路历程”","date":"2021-06-10T21:20:55.000Z","url":"/posts/fa1d/","tags":[["test","/tags/test/"]],"categories":[[" ",""]],"content":"在听讲座，有点无聊，所以把昨天的感想写一写 太难了，踩过的坑都忘记了，这。。。。。。。 初衷建设这个网站的目的是为了记录自己学习过程、学习笔记，以便在未来能够复习、反思、回味。另外这还是一个可以释放压力，可以倾述的平台没人会看我叨叨的，甚至还可以看看自己收藏的电影 起因这学期做了一个项目[课程设计]，是视觉识别和机械臂的综合，所以就想存到GitHub上面，偶遇到了HEXO，第一个主题是Keep，也实现了自动部署，后面换了Butterfly也就是现在的主题，非常不错 搭建、域名购买、域名解析搭建是参考的知乎找的教程，但还是踩了很多，这里不再赘述，推荐店长教程。 主题选择主题选择有很多，萝卜青菜各有所爱，这里就不讲了 主题魔改魔改必须推店长，yyds，教程直接去店里翻，不会做就去加群。讲一讲我自己的魔改吧，首先我是不喜欢侧边栏的，虽然我开了，但是只是为了能有个目录，方便翻阅。魔改内容还是蛮多的，想到什么就讲什么吧！butterfly主题内置的就不再赘述了(pwa快把我折磨死了)先讲动效吧！加载动画是我自己魔改的，应该不会放出源码很简单的动效(就是那些会动的)，置顶轮播，分类，标签外挂(文章里面比较好玩的东西)这些都是店长或者冰老师的插件点这什么时候有空把源码放上来，需要请评论，没人会看的吧 服务器搭建、备案在国内建站，肯定是要备案的，还得买服务器一点都不合理，没办法，买三个月备份，肝!教程？教程是什么？百度一下，你就知道!哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈看教程要仔细，有些教程不全，那就去百度，或者干脆换一篇教程!耐心!仔细!认真![滑稽][菜狗]"},{"title":"工程师的社会责任","date":"2021-06-03T20:04:05.000Z","url":"/posts/eb7/","tags":[["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"],["📑 报告","/tags/%F0%9F%93%91-%E6%8A%A5%E5%91%8A/"]],"categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"工程师的社会责任背景介绍全球变暖、自然灾害频发等现象敲响了人类保护环境的警钟，节能减排、绿色环保、促进人与自然和谐发展逐渐成为人类生产和生活的主导意识。而机械制造业作为我国国民经济支柱的主导产业之一，在传统的制造工艺中融入绿色工艺技术成为今后机械制造业发展的重点。绿色制造技术在其本质以机械制造流程中都与传统的机械制造技术类似。然而在其制造理念中由于满足环境保护以及我国可持续性发展观念，因而在当下的机械制造领域具有着乐观的发展前景。绿色制造技术在其制造流程中，往往更加充分的对现代的先进科学技术加以利用，对资源的使用也更加科学有效。因此使用绿色切削加工技术生产出的机械设备更能满足我国在机械相关产业的实际需求，有利于对我国机械制造业的发展进行推动。 绿色切削技术绿色切削技术可以在机械制造加工工艺中做到降低能耗，减少排放的目标。因为加工切削机械产品操作当中所使用的切削液是存在污染的，所以绿色切削技术的应用就可以避免切削过程中污染的出现。干式切削、低温切削、绿色低温切削、绿色冷却润滑技术^[1]^是这种技术的几种主要方式和方法。 干式切削干式切削消除了传统湿切加工中切削油液的使用及其导致的车间环境污染及工人职业健康危害，是一种典型的绿色高效切削加工工艺^[2]^。随着干式切削技术的发展，干式切削必然会成为绿色切削加工的主流工艺。然而，由于缺少冷却油液的冷却、润滑、排屑等作用，干式切削工艺存在诸多难题亟需解决，如干切机床热变形、干切刀具热致磨损与崩刃、被加工表面质量、材料干式切削可加工性评价^[3]^等。 在切削加工过程中，改善切削界面的摩擦状况，是提高切削性能的关键要素之一。传统切削往往大量使用切削液实现冷却润滑，以起到降低切削力和切削温度，延长刀具的使用寿命等作用。而近年来，传统浇注式供给切削液带来的环境问题日益严峻：传统切削加工过程中往往采用大量冷却液浇注的方式对工件和刀具进行冷却降温，这种冷却方式虽然能够降低切削温度、改善工件质量和辅助排屑，但也导致了如工人健康受损、污染加工环境等一系列问题，浇注式切削需要建立一个复杂且昂贵的切削液循环系统，这无形中也增加了制造成本。据统计，在欧洲汽车制造业，刀具成本通常只占生产成本的2%～4%；而切削液相关成本已超过刀具成本，占到生产成本的7%～17%。在可持续发展的大环境下，制造业必须探索新型冷却润滑方式，创造绿色、安全、清洁的生产环境。 低温切削加工技术低温切削是利用低温流体如液态氮、液态二氧化碳和冷风等喷向加工系统的切削区域，造成切削区的局部低温或超低温状态，利用工件在低温条件下产生的低温脆性，提高工件的切削加工性、刀具寿命和工件表面质量。冷却是切削加工中重要的组成环节之一，主要用于抑制切削过程中工件的过快温升和降低刀具的磨损速度^[4]^。当前保护生态环境、可持续发展的观念早已深入人心。为了解决传统切削加工过程中冷却液浇注方式资源消耗巨大，对环境污染严重的问题，绿色切削技术具有巨大优势。 为了解决干式切削问题，实现加工过程中安全无污染的目的，各国学者通过寻求切削液的替代品或对刀具结构进行改进来实现绿色冷却，常见的冷却方式有最小微量润滑、低温冷却、内冷却和喷雾冷却等^[5]^。这些冷却方式在保证生产效率的基础上，能够有效节约生产加工所用资源，降低生产过程产生的污染，减少废液危害性，达到环保化生产。这些冷却方式中如喷雾冷却的冷却温度接近室温，对工件的内部结构热应力不会产生影响，能够充分证实绿色冷却切削技术的必要性和可行性。 绿色湿式切削绿色湿式切削是指使用高性能、长寿命、低污染、可降解的新型绿色切削液，最大限度地减少切削液的用量和废液的排放，增加切削液循环使用的次数^[6]^，并对其实施无害化处理，从而达到绿色环保要求的切削加工方式。目前绿色湿式切削的研究主要集中在高性能、长寿命、低污染切削液及其废液处理技术切削液性能的优劣、废液处理的难易、对操作者的危害和对环境的污染程度均取决于切削液中添加剂的种类及性能。作为未来的切削液添加剂，必须性能优良，对人体和环境无害。提高切削液质量的有效途径是研究开发新型高效无毒添加剂。目前国内外专家、学者研制出了一些新型的添加剂：硼酸酷类添加剂、钼酸盐系缓蚀剂、新型防腐杀菌剂等。为适应绿色制造技术的发展趋势，实现切削加工过程的洁净化，在研究开发干式切削加工技术的同时，还应重视传统切削液系统的优化改造，研制先进的切削液供给系统以及有利于环境保护和人类健康、加工性能优越的新型绿色切削液。同时，通过改进供液方法，优化供液参数、加强使用管理等措施，可延长切削液使用寿命，减少切削液使用量及废液排放量。 绿色冷却润滑技术微量润滑(Minimum quantity lubrication，MQL)切削技术也叫做最小量润滑，是一种典型的准干式切削方法，是指将压缩气体(空气、氮气、二氧化碳等)与极微量的润滑剂混合汽化，形成微米级的液滴，喷射到加工区进行有效润滑的一种切削加工方法。该技术最早由德国学者KLOCKE等在1997年提出。大量试验及工程应用证明，其具有切削液用量少，可有效减小刀具与工件、刀具与切屑界面摩擦，降低切削力，防止黏结，延长刀具寿命，提高工件表面质量等优点，在铝合金、钛合金、高温合金等多种金属材料的加工中得到应用。微量润滑技术作为一种新型的绿色冷却润滑方式，近年来逐渐受到科学界和产业界的重视。国内外学者在MQL切削加工工艺方面进行了大量的试验研究，针对传统车削、铣削、钻削和磨削工艺的绿色化改造，面向钛合金、高温合金、不锈钢、铝合金、镁合金、合金钢等典型材料，甚至CFRP复合材料，以切削力、表面完整性、刀具磨损、切屑形态等为指标，优化了MQL工艺参数，实现在试验条件下MQL技术达到甚至超过了传统方法的切削性能^[10]^。 低温微量润滑切削技术低温微量润滑切削技术是低温冷风切削技术和微量润滑切削技术的结合体^[7]^。为了进一步降低切削区温度，提高工件加工质量，提出了低温微量润滑切削技术。低温微量润滑切削技术将低温气体射流与微量润滑油通过雾化喷嘴喷射到切削加工区的一种高性能冷却润滑技术，低温微量润滑切削技术融合了低温冷风切削技术和微量润滑切削技术的优势，同时弥补了两种切削技术单独使用时存在的缺陷。 切削液的再利用技术废金属切削液中大约有15%左右的有效成分因加工变质而自然失效，其中大约有超过80%^[9]^的有效变质成分经加工能够被有效地回收并加以利用，如果我们能够将这些废金属切削液生产过程中的有效成分经加工回收并有效地加以变质和利用，不仅我们还可以有效减少对资源的消耗和浪费，为社会和国家经济发展节约了大量自然资源，还使我们能够有效降低这些废金属切削液对于环境的污染和危害。因此，研究各种废金属切削液的变质和回收循环利用的工艺，将对于资源的有效循环利用和对环境的保护都具有积极的重大意义^[11]^。 社会价值绿色工艺技术是遵循绿色健康理念为指导，在机械制造过程中从设计、生产、流通、回收等各个环节融入绿色施工理念的一种新型技术，是为了实现资源效益和经济效益的最大化，促进产品性能更加优化，达到保护环境，推动社会经济持续健康发展的目标。通过在机械制造中应用绿色工艺技术，使我国的机械制造业水平显著提升，促进了机械制造业长远发展目标的实现 综上所述，绿色制造技术作为现代化机械制造模式，应用重点在于大力提倡节能环保思想，这与机械制造行业的可持续发展战略要求不谋而合，因此为其拓宽了广阔发展与应用前景。绿色工艺技术是经济全球化、社会大发展的必然产物，也是实现机械化生产和可持续发展的技术支持和工艺保证。 工程师的社会责任当今世界很多工程领域都爆发出严重的伦理问题，残酷的现实呼唤伦理教育。工程师必须把公众的”安全、健康、福祉”放在首位。工程实践既是一种技艺，更是一种德行，工程师具有良好的”伦理认知、伦理判断、伦理决策”的能力尤为重要。工程伦理就是”以道驭技、道技合一”，弘扬理性精神。工程师应理解好”法理、情理、伦理”三者的关系，完成工程项目的时候尽力做到”人与人、人与社会、人与自然”和谐共生”，以人为本”，更要”以生命为本”。 协调人与自然关系的是”自然伦理”，协调人与人之间关系的是”人际伦理”，二者都得处理好个人利益与集体利益、当前利益与长远利益、局部利益与整体利益的关系。每一个工程项目对自然环境、社会环境、人文环境，都会带来巨大影响，工程师必须综合权衡和应对。 参考文献[1]杨明卓.浅谈机械制造过程中绿色制造技术的应用与发展[J].内燃机与配件,2019,290(14):246-247.[2]杨海军.基于绿色加工的PCD刀具干式切削铜合金的磨损研究[D].大连理工大学,2019.[3]袁松梅,朱光远,王莉.绿色切削微量润滑技术润滑剂特性研究进展[J].机械工程学报,2017,53(17):131-140.[4]赵翔.浅谈机械加工制造中的绿色制造工艺[Z].[5]张雨.内冷与喷雾复合冷却车刀设计及冷却性能研究[D].华东交通大学,2020.[6]陈致昊.绿色制造工艺技术在汽车制造业中应用研究[J].现代制造技术与装备,2020,56(9):127-128.[7]刘俊岩.水蒸汽作绿色冷却润滑剂的作用机理及切削试验研究[D].哈尔滨工业大学,2005.[8]Andrejczan,Michalsajgalik,Jozefholubjak,etal.IdentificationofTemperaturesinCuttingZoneWhenDryMachiningofNickelAlloyInconel718[J].ProcediaManufacturing,2017,14.[9]董玥彤,李慧,吴奕佳,等.一种切削废液循环利用环保装置设计[J].山东化工,2020,49(16):152-153,156.[10]凌天白.关于绿色制造技术在机床全生命周期中的应用[J].科技传播,2016,8(2):86,100.[11]李俊.绿色制造理念下机械制造工艺发展探究[J].中小企业管理与科技(上旬刊),2019(5):54-55."},{"title":"多机器人自动化产线方案设计调研报告及模型搭建","date":"2021-06-02T11:04:05.000Z","url":"/posts/bc7/","tags":[["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"],["📑 报告","/tags/%F0%9F%93%91-%E6%8A%A5%E5%91%8A/"]],"categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"多机器人自动化产线方案设计调研报告及模型搭建背景意义随着德国工业 4.0 的实施和规划，在 2014 年我国提出了中国制造 2025 战略，其目的是充分利用计算机技术和传统制造技术的深度融合，加快推动制造业整体水平提升，提高国家综合国力，掌握工业领域标准制定的话语权。 在发展国内制造业的方向和领域上，中国的”中国制造 2025”与德国的”工业 4.0”有异曲同工之处。其中，在智能制造工程的发展上，”中国制造 2025”计划强调实现制造智能化，着力发展智能产品和装备，开展新一代信息技术与制造装配融合的集成创新和工程应用，推进生产过程的数字化、网络化和智能化；同时依托优势企业，紧扣关键工序智能化、关键岗位机器人替代、生产过程智能优化控制、供应链优化，建设重点领域的智能工厂或数字化车间。这场以数字化、信息化、智能化技术为基础，以大规模定制和个性化制造为特点的工业革命，将从根本上解决传统制造技术下新产品开发周期、产能利用、生产成本、产品性能、个性化需求等关键产品维度之间的冲突，实现生产制造的综合优化和产品质量的大幅度提升。 数字化工厂作为智能制造工程发展的一个方向，其内涵丰富，涵盖了产品设计、生产工艺、三维仿真、信息管理等多方面技术，能够全方位地推动制造业智能化的发展进程，帮助我国制造业迅速向”中国制造 2025”第一步目标迈进。目前，国内很多制造厂商已经普遍使用计算机技术实现了产品设计数字化，然而，生产过程的数字化仿真的研究与应用仍然得不到推广，使数字化工厂技术的发展缺少了关键的一环。只有结合数字化工厂仿真技术，生产过程才能真正实现数字化。在生产过程中应用数字化仿真技术，可以在关键工位采用机器人工作，组建生产过程的信息采集系统，建立起智能化生产过程；可以在数字化环境中实现与生产线三维模型自由交互，实现设计模型的动态仿真，不仅可以提前掌握生产线的生产情况，还可以大大减少修改成本；可以进一步简化生产过程的设计，降低工业机器人应用系统开发的难度，推广智能化和网络化生产在实际生产过程中的应用。数字化工厂仿真技术是数字化工厂技术中的一个关键组成部分，它的使用与推广将有利于国内制造业的数字化实现，从根本上解决生产线系统开发的难题。 生产线是进行生产制造的第一场所，对企业的效益有着至关重要的作用。在传统制造领域中，一般采用基于经验的设计模式进行生产线规划与布局。随着制造产品的升级，生产流程趋于复杂，生产线规划需要考虑的要素变多，现有的生产线规划模式已经难以满足企业生产能力提升和工艺规划能力发展的需求。通过建立生产线仿真模型，在规划阶段对生产线整体布局进行仿真分析，从而在生产线投产前评估生产过程，验证工艺路线，衡量布局设计，这为生产线规划提供了一套有效的验证手段。 案例调研-空气开关装配生产线该文章^[1]^所选择的设计重点是大部分生产环节中比较常见的螺丝装配任务，在这个生产过程中采用机器人代替人工的生产方式和视觉识别、红外扫码等技术，实现整个装配过程的完全自动化和管理。在生产线的设计当中，设计内容只涉及到螺丝装配过程，而没有考虑到前面的零件生产过程和后续的产品打包过程，是因为螺丝装配过程在整个生产过程中具有一定的代表性，也因为目前的螺丝装配仍然离不开人的现状决定的。在可以预见的未来，无论大小型工厂都不再有工人围着生产线工作，而是由机器人配合各种检测设备进行生产，人类只需坐在计算机前给机器人下达命令、管理各项生产数据。 从大量统计数据可以看出，数字化工厂技术在分析工厂生产规划、把握工厂全局上具有决策的作用。这在世界未来的工业改革和国内传统型工厂的转型具有很好的推动作用，对全面实现自动化生产和实现机器人替代人工生产上具有积极的帮助，对我国打造”中国制造 2025”有着深远的意义。 案例调研-汽车门饰条生产线该文章^[2]^ 的目的是为客户设计一套汽车门饰条生产线自动化集成控制系统。通过分析门饰条人工生产线工艺流程及存在问题，提出了一种适合自动化生产的汽车门饰条生产工艺，并对生产线进行整体规划设计，根据生产线的工作流程，完成关键工站及设备的机械结构和气动系统设计，并对ＡＧＶ物料流转系统进行设计，接着对自动化生产线控制系统进行硬件选型和程序设计，最后对整个自动化集成系统进行模拟仿真与现场调试。 该文章完成了汽车门饰条自动化生产线总体方案设计、生产线的关键工站及设备的选取和设计。ＡＧＶ物料流转系统设计、控制系统设计、系统仿真调试和现场调试。 案例调研-航空发动机机匣生产线该文章^[3]^ 针对 A 公司机匣加工生产线进行研究，运用生产线平衡相关理论对生产线进行优化，得到优化后的生产线布局，通过 Visual Components 建模仿真软件对优化前和优化后生产线进行建模，然后进行软件相关功能开发，便于用户改变参数和查看数据，最终通过仿真数据报表对比验证此方案的可行性。 总结如下： （1）对优化前生产线进行工序和布局分析，发现其生产线存在的问题，采取三种方案对生产线进行优化。（2）使用 Visual Components 仿真软件中的模型和 UG 绘制的机匣模型创建机匣模型库。（3）对仿真软件进行功能开发。（4）使用仿真软件仿真 1600 小时，对优化前后生产线生成的报表进行分析，优化后的设备利用率和产量相对于优化前提高了很多。 案例调研-动力电池生产线该文章^[4]^以天津市Ａ企业的动力电池生产系统为研究对象，通过调研研究，确立了仿真的目标，建立了动力电池生产系统的仿真模型，对模型的实体元素的属性进行数据的输入，通过对比现实的生产系统验证了仿真模型的有效性和可行性。针对调研和仿真中发现的该动力电池存在的问题，运用工业工程改进的方法进行了改进设计，并进行了优化仿真。 通过上述研究工作，将主要解决Ａ企业动力电池生产系统整体产能低下、运行效率不高、缓存区排队等待时间过长、生产系统不平衡、设备利用率不平衡等问题。从而改善该企业的动力电池生产系统的整体流动性，提高系统生产线平衡率，缩短产品的生产周期，减少在制品库存和等待时间。对同类型的企业生产系统的改善也具有借鉴意义。 案例调研-保险杠生产线该文章^[5]^ 通过深入学习并掌握生产物流系统理论和AnyLogic多方法建模技术，研究汽车塑料保险杠生产制造中的特征问题，依托 AnyLogic 仿真软件，运用敏感性分析法和仿真方法 利用 AnyLogic 多方法建模技术，运用流程建模方法构建 CAP 仿真模型和Agent 建模技术构建 ALS 仿真模型，完整建立能够反映保险杠生产制造特征的仿真模型。引入最小缓存区总容量的概念，建立空间一定、容量有一定变化范围的 CAP模型，开发与设计敏感性分析优化算法，为其提供一种新的求解思路和理论方法。通过该方法，得到产量最大化下的最小缓存区总容量，提高生产效率和降低布局成本。考虑缓存区，构建 ALS 模型。开发与设计投产序列的编程语言，实现 ALS仿真，为 AnyLogic 仿真在 ALS 问题的应用研究提供技术支持。运用最小生产循环MPS 优化算法，以最小完工时间为优化目标，并且与枚举法和 AnyLogic 仿真相结合求解出最优投产序列，从而提高生产物流系统的运作效率和保险杠制造企业的经济效益。通过敏感性分析，探讨到达时间 AT 对 ALS 优化后系统产量的影响，总结其中的规律，为生产运作提供方案。 案例仿真-保险杠生产线通过AnyLogic建模，因为模型较为复杂，所以通过修改示例程序达成目标。 模型构成 主程序 CNC加工部分 3D模型 数据统计 流程图 运行过程 参考文献 [1] 徐道帆. 空气开关装配生产线的三维模型设计及仿真研究[D]. 华南理工大学, 2016. [2] 段铭哲. 汽车门饰条生产线自动化集成系统关键部分的设计[D]. 北京化工大学, 2020. [3] 季钰坤. 航空发动机机匣生产线平衡仿真研究[D]. 大连理工大学, 2019. [4] 仝丽兵. 基于ANYLOGIC的动力电池生产系统仿真及优化研究[D]. 天津工业大学, 2018. [5] 车恒庆. 基于AnyLogic的保险杠生产制造仿真建模与优化研究[D]. 西南交通大学, 2018."},{"title":"精益弧焊机器人","date":"2021-06-02T10:04:05.000Z","url":"/posts/5c42/","tags":[["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"],["PPT","/tags/PPT/"]],"categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"精益弧焊机器人 "},{"title":"轴的简单ANSYS分析","date":"2021-05-30T20:04:05.000Z","url":"/posts/d5be/","tags":[["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"],["📑 报告","/tags/%F0%9F%93%91-%E6%8A%A5%E5%91%8A/"],["Ansys","/tags/Ansys/"],["🔠 有限元分析","/tags/%F0%9F%94%A0-%E6%9C%89%E9%99%90%E5%85%83%E5%88%86%E6%9E%90/"]],"categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"轴的简单ANSYS分析一定要看完再自己做（因为这里面有我做错的部分）先花几分钟建个模，SolidWorks，UG都可 记得导出到 .x_t 文件 这熟悉的界面 ，好久不见，朋友 废话不多说，先导入 最好路径、文件不要有中文 先看下有几个体，只有一个的话就没事了，有多个就得去布尔运算一下，这里不再细说 时间久了，记不清怎么显示立体模型了，先这样做吧！ 创建模型 注：如果是薄板，有厚度需要定义 我这个当然没有，先不说 定义材料参数，我记得是弹性模量，泊松比分别是2e11,0.3密度也可以定义一下子 然后就是去加力 先尝试一下，懒得翻说明书了 差点忘了加约束 稳妥起见就all吧 solve果然报错 靠靠靠要先划分网格再加力啊 真是傻了，删掉所有力，去画网格 自己一顿瞎捣鼓，反正画出来了 不过三角的不是我想要的（可能是因为阶梯轴，画不出来方的，够用就行），但是今天这么晚了就先将就一下吧 加约束，力，去计算 欧耶 虽然结果很奇怪（力太大了），但是还阔以 今天到此结束，先睡觉，力的大小，约束的位置，受力点，材料属性这些都要仔细思考 有变形太严重的话可以关掉变形 最后是效果图 "},{"title":"python tkinter gui学习笔记","date":"2021-05-25T00:00:00.000Z","url":"/posts/e778/","tags":[["📄 Python","/tags/%F0%9F%93%84-Python/"],["💻 Gui","/tags/%F0%9F%92%BB-Gui/"],["💻 Tkinter","/tags/%F0%9F%92%BB-Tkinter/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"Python gui 设计之 Tkinter 学习笔记（二）前言最近薅了京东的羊毛，换了新的键盘，JD yysd ！ 如图，akko 的 3068 V2 嗯 V2 我曾经的外号 这两天也给自己放放假，所以来看看python，学学tkinter，试试新键盘 老规矩，有目标的学才学的舒服，这次写个 改键的小程序，比较困难，再议"},{"title":"python tkinter gui学习笔记","date":"2021-05-25T00:00:00.000Z","url":"/posts/e778/","tags":[["📄 Python","/tags/%F0%9F%93%84-Python/"],["💻 Gui","/tags/%F0%9F%92%BB-Gui/"],["💻 Tkinter","/tags/%F0%9F%92%BB-Tkinter/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"Python gui 设计之 Tkinter 学习笔记前言其实我之前有用过QT写gui 比如这样 找这玩意花了一小会，很久之前的视觉作业，整体来说还是很方便的，但是QT打包起来会很大，不知道是因为QT，还是因为opencv，估计是后者，但是我还是想学一下这个tkinter，至少了解一下，恰好在图书馆又看到了这本书 还有csdn的一个博主就下面这个的学习笔记，可以复制！！！所以我来了，有空fork一下，防止丢失。 注：本文代码部分来自敲代码的小风 这本书我之前想自学 Python 的时候看过电子版虽然看的不多，感觉还行作者洪锦魁 所以我来学习啦！！！！！！！ 第一章 这两行缺一不可，不知道为什么书上就写了一个，注释掉了另一个 红黄绿真是亮瞎眼，不知道还有没有其他颜色（可以使用RGB，随便试试） 先去存一下文档，fork一下 因为各种事耽误了10分钟，咕咕咕，有空改改caplos 明天今天展示一下我的ansys技能，可能已经忘干净了，[点这里](轴的简单ANSYS分析 | WXY_JOY (wxydejoy.top)) 第二章噔噔噔！！ 大概看了看，太困了 来了来了，按照目录学有点没动力，那就先找点事情，有目的的学 比如 给之前的那个markdown改格式的代码加个界面，go 就是这个，一个很简单的代码 先改图标 不知道为什么就是改不成 最后搬来了珍藏的图标 首先需要几个文本 目标界面 到点了，改天再说来了来了，昨天睡觉，趁今天不怎么想学习写一会 这里要用到前几章的知识Label, Button,Entry,还有窗口管理员 先来Label 其实有点不很懂，但先这样 然后加入按钮和文本框 到这里，界面基本完成 下面才是重点 不是很熟悉这些函数，所以搞得有点慢，这书也不好用，东西不给全，还是靠百度 多行 自动排序 源代码 完成"},{"title":"一秒钟","date":"2021-05-22T20:04:05.000Z","url":"/posts/5482/","tags":[["📽️ Movies","/tags/%F0%9F%93%BD%EF%B8%8F-Movies/"]],"categories":[["📽️ Movies","/categories/%F0%9F%93%BD%EF%B8%8F-Movies/"]],"content":" Your browser does not support the video tag. %%% video 一秒钟.mp4 %%%- 一秒钟 (2020)一秒钟导演: 张艺谋编剧: 张艺谋 / 邹静之主演: 张译 / 刘浩存 / 范伟 / 余皑磊 / 张邵勃 / 更多…类型: 剧情制片国家/地区: 中国大陆语言: 汉语普通话上映日期: 2020-11-27片长: 104分钟又名: One Second"},{"title":"激光课程测验答案","date":"2021-05-22T20:04:05.000Z","url":"/posts/d804/","tags":[["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"]],"categories":[["📚️ Study","/categories/%F0%9F%93%9A%EF%B8%8F-Study/"]],"content":"第一章 满分只有50，因为填空题没分，需要老师批改 6.(自己写的，尽量别直接copy) 中国激光产业市场起步较晚，但随着中国装备制造业的迅猛发展，近年来，中国激光产业获得了飞速的发展。中国是活跃的制造业市场及工业激光设备的主要市场，受宏观经济发展、制造业产业升级、国家政策支持等因素影响，中国工业激光产业成为受高度关注的产业之一，市场发展迅速。2015年，中国取代欧洲，首次成为激光器最大的消费市场，市场规模增长至28亿美元左右，约占全球市场规模的29%。 7.节约材料,节省时间,效率高,质量高,个性化定制 第二章 满分100 第三章 满分只有80，因为填空题没分，需要老师批改 9.(来自百度) ​ 1.金相法也就在在显微镜里看马氏体过渡区到基体组织的距离. ​ 2.显微硬度化,用显微硬度计检测梯度到一定值.这种方法最准确. ​ 3.用卡尺测量侵蚀后的硬化层 10.参数：激光输出功率、光斑大小、扫描速度、吸光率、保护气流量 充分利用：控制好功率密度，把表面温度控制在熔点以下，淬火点以上 第四章 第五章 激光打标是用激光束在各种不同的物质表面打上永久的标记。打标的效应是通过表层物质的蒸发露出深层物质，或者是通过光能导致表层物质的化学物理变化而”刻”出痕迹，或者是通过光能烧掉部分物质，显出所需刻蚀的图案、文字。以不锈钢激光彩色打标为例：有三种显色方式:一是生成有色氧化物;二是经化学、电化学或激光作用下，在不锈钢表面生成一层极薄的无色透明氧化膜，氧化膜产生干涉效应，则可在表而显色彩;三是同时存在有色氧化物和氧化膜的一种混合态。不锈钢材质在激光热源的作用下，表面生成有色氧化物，或是生成一层无色透明的氧化膜，由于光的薄膜干涉效应而呈现各种颜色，这是不锈钢彩色打标的基本原理。不锈钢中的金属元素氧化后的产物本身会也呈现颜色。 第六章 第七章 第八章 第九章 第十章"},{"title":"你并不是一无所有","date":"2021-05-14T21:20:55.000Z","url":"/posts/289b/","categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":""},{"title":"wox listary utools powerjoys功能对比","date":"2021-04-17T16:00:00.000Z","url":"/posts/cd10/","tags":[["🖥️ Software","/tags/%F0%9F%96%A5%EF%B8%8F-Software/"]],"categories":[["🖥️ Software","/categories/%F0%9F%96%A5%EF%B8%8F-Software/"]],"content":" 最近wox一直搜不到我想用的软件(绿色版软件，没安装，我的工具软件都在一个文件夹里面)，而且wox在我日常中也不怎么用，所以想换一个更方便的搜索软件百度了一下，看到这个图👇🏻 因为一直在听讲座，所以有点乱，就酱utools我用过，自从它有会员之后，不能改自己的图标之后我就没再用过它 还有就是这些插件不太适合我(可能是因为我不是个程序员吧)再看wox 图片来自(52破解)(图上是开了everything) 但是不开everything它就是个废物其实还是能用的，但比较鸡肋简单再来看listary 再来看powertoys 高糊预警(有空换) 界面都差不多其实还是有差距的，listary一会回去瞅瞅，wox挺好看的，powertoys也不错，先去试试powertoys它的功能比较多，可以尝试关掉一些功能，减少后台回去先打游戏，这次要专心，不能再坑🕳️了好消息是游戏没🕳️坏消息是我不想睡，好了睡觉去吧对了，最后用的powertoys，凑合吧"},{"title":"Moving函数-三轴机械臂仿真运动过程","date":"2021-03-31T21:20:55.000Z","url":"/posts/f10/","tags":[["💻 Gui","/tags/%F0%9F%92%BB-Gui/"],["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"],["⌨️ C","/tags/%E2%8C%A8%EF%B8%8F-C/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"先传个动图吧还有bug没改完 "},{"title":"onedrive搭建图床，网盘，外链","date":"2021-03-31T21:20:55.000Z","url":"/posts/d3f4/","tags":[["☁️ Onedrive","/tags/%E2%98%81%EF%B8%8F-Onedrive/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"onedrive网盘，图床待写 "},{"title":"python + QT + 📄 Opencv 学习笔记","date":"2021-03-31T21:20:55.000Z","url":"/posts/d364/","tags":[["📄 Python","/tags/%F0%9F%93%84-Python/"],["⌨️ Qt","/tags/%E2%8C%A8%EF%B8%8F-Qt/"],["📄 Opencv","/tags/%F0%9F%93%84-Opencv/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":""},{"title":"很久之前的剪辑![61![6130461889-6DC1A-0101-006E-0079-05-0780-0438-03](../../../../onedrive/桌面/6130461889-6DC1A-0101-006E-0079-05-0780-0438-03.jpg)30461889-6DC1A-0101-006E-0079-05-0780-0438-03](../../../../onedrive/桌面/6130461889-6DC1A-0101-006E-0079-05-0780-0438-03.jpg)","date":"2021-03-31T21:20:55.000Z","url":"/posts/5eb1/","categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":" "},{"title":"Fluent Search","date":"2021-03-31T21:20:55.000Z","url":"/posts/d0da/","tags":[["🖥️ Software","/tags/%F0%9F%96%A5%EF%B8%8F-Software/"]],"categories":[["🖥️ Software","/categories/%F0%9F%96%A5%EF%B8%8F-Software/"]],"content":"%%% tip home %%%-可能是第一次正儿八经的的测一款软件，说是测，其实是把官网翻译一下，然后再讲讲自己的使用感受。很多内容都是搬运自官网。侵删！ 另外，虽然这个软件有github，但只是用来反馈问题，闭源，但免费。 另外，无中文。 %%% endtip %%%- %%% p center logo large, Fluent Search %%%- With Fluent Search, you can search for running apps, browser tabs, in-app content, files and more. Available for Windows 10/11 only.不会吧不会吧，不会有人还没换win10吧 微软商店链接点这 Fluent 搜索功能指南使用 Fluent Search，您可以立即搜索计算机上可用的各种资源并访问它们。Fluent Search 有很多功能，在本指南中，我们将介绍一些主要功能。 进程搜索听起来，进程搜索可让您轻松找到计算机上的任何活动进程。 进程是具有窗口的活动应用程序，您可以通过搜索窗口标题或进程名称来找到它。 此外，Fluent Search 可以在进程内找到应用内元素，例如选项卡、按钮和超链接，以立即访问它们。 屏幕搜索有些人发现使用鼠标会降低工作效率，尤其是在编程等非常面向键盘的工作中。 如果您是这些人中的一员，Fluent Search 可以满足您的需求。屏幕搜索功能可让您使用键盘轻松控制计算机。 搜索标签如上所述，Fluent Search 会搜索您计算机中的各种资源，包括但不限于 - 文件、应用程序、进程、书签、历史结果等。 为了帮助您轻松获得最相关的结果，Fluent Search 提供了一项名为“搜索标签”的功能。 Fluent Search 中的每个结果可能包含多个描述此结果的标签，使用这些标签您可以轻松过滤您的搜索以找到最相关的结果。 网络搜索是否需要立即搜索网络而无需打开浏览器并创建新标签？ 然后你明白了，使用 Fluent Search，你可以轻松地在你最喜欢的搜索引擎中进行搜索。 自定义Fluent Search 的构建考虑到了现代设计，但最重要的是能够让您自定义它。 你喜欢简约风格吗？您想在屏幕上获得尽可能多的信息吗？Fluent Search 助您一臂之力。您可以根据需要轻松缩放搜索窗口并更改其外观。 导航简单性是 Fluent Search 非常重要的方面。 在提供丰富的搜索结果的同时尽量保持简单是 Fluent Search 的一个持续挑战。 我的介绍最小外观 外观是那种磨砂透明玻璃的感觉，非常不错。 设置界面 写不动了，再说吧"},{"title":"Image   一款图片压缩软件","date":"2021-03-31T21:20:55.000Z","url":"/posts/b3d2/","tags":[["🖥️ Software","/tags/%F0%9F%96%A5%EF%B8%8F-Software/"]],"categories":[["🖥️ Software","/categories/%F0%9F%96%A5%EF%B8%8F-Software/"]],"content":"待写"},{"title":"PS批量去👣水印","date":"2021-03-31T20:20:55.000Z","url":"/posts/df28/","tags":[["🧩 PS","/tags/%F0%9F%A7%A9-PS/"],["👣水印","/tags/%F0%9F%91%A3%E6%B0%B4%E5%8D%B0/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"待写"},{"title":"👣Pitstop 批量去👣水印","date":"2021-03-31T20:20:55.000Z","url":"/posts/fdaa/","tags":[["👣水印","/tags/%F0%9F%91%A3%E6%B0%B4%E5%8D%B0/"],["👣Pitstop","/tags/%F0%9F%91%A3Pitstop/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"待写"},{"title":"Github + hexo + walfare +hpp 自动部署，伪实时编辑","date":"2021-03-31T20:20:55.000Z","url":"/posts/74b6/","tags":[["📁 HEXO","/tags/%F0%9F%93%81-HEXO/"],["🚀 GITHUB","/tags/%F0%9F%9A%80-GITHUB/"],["😎 HPP","/tags/%F0%9F%98%8E-HPP/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"待写"},{"title":"markdown语法说明","date":"2021-03-31T12:05:55.000Z","url":"/posts/4142/","tags":[["📄 Markdown","/tags/%F0%9F%93%84-Markdown/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"Markdown基础教程Markdown主张使用最简单的符号来控制格式，兼顾易读易写特性，让你可以专注在文本创作上。 这篇文章旨在让你通过大约三分钟来快速掌握Markdown的基本用法。 在开始之前，需要特别注意的点 通常，格式控制符号与文本内容需要保留一个空格 段落之间需要空格一行 标题在书写中，标题是最常用的格式，Markdown中，通过在文本前加上 # 即可，同时，根据#的数量可以可以划分为二级标题、三级标题、四级标题…一共六级。 一级标题二级标题三级标题四级标题五级标题六级标题列表列表分为无序列表和有序列表，无序列表在文本前面加上 - 即可： 无序列表一 无序列表二 无序列表三 而有序列表仅需要在文本前面加上 1. 即可： 有序列表一 有序列表二 有序列表三 引用文本经常需要引入一些内容，包括他人的话等等。仅需要在文本前面加上 &gt; 即可： Kio•纯粹写字 文字修饰为了表达的抑扬顿挫，需要使用到粗体、斜体、删减体等来表明重点，其中用一个 * 号包围起来的文字为斜体，用 ** 包围起来的文字为粗体，而使用 ~~ 包围起来的文字为删减体： 斜体 粗体 删减体 段落分隔符通过 — 即可以添加段落分割线： 链接及图片链接和图片可以为文章润色不少，通过 描述 既可以添加链接，而在其前面添加一个 ! 号即为添加图片， 具体为: 百度 表格 英文 解释 备注 Book 书 Hello 你好 World 世界 这样即可自动生成表格，第二行为内容对准格式，第一格表示内容居中，第二格表示居左，第三格表示居右。 插入高亮代码如果你需要插入一些代码，Markdown也可以帮你自动高亮，包括行内高亮和代码块高亮，行内高亮仅需要使用 内容 包围起来即可。 至此，写作中需要用到的控制符已经介绍完毕了，Kio提供的所见即所得Markdown支持和便捷的输入辅助能帮助你快速掌握这一密术 :] "},{"title":"hexo-tag-gdemo","date":"2021-03-31T12:05:55.000Z","url":"/posts/c8f5/","tags":[["💻 Hexo","/tags/%F0%9F%92%BB-Hexo/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":" hexo-tag-gdemoglorious-demo tag plugin for Hexo (Based on version 0.11.2) IntroductionThis is a Hexo tag plugin which allow you to glorious-demo on your blog posts. DEMODemo Link Installation ※ Deprecated npm install hexo-tag-gdemo Usage or commandCommand表示用“;”分隔的一个或多个命令。注意，命令不能包含’，因为hexo会假设参数已经完成，下一个参数将会导致对象没有被呈现。 minHeightmin Height定义编辑器/终端窗口的最小高度。注意，它可能会根据您提供的内容而增长。 windowTitlewindow Title将显示为编辑器/终端窗口的标题。你喜欢什么就用什么。 onCompleteDelay on Complete Delay定义在输入一行命令/代码之后的等待延迟。不影响gdemo terminal 的内容。内容将立即出现在所有命令键入后。 promptString提示符 String 定义了在键入的命令之前显示的字符或字符序列。你可以使用 ‘&gt;’ 或 ‘root@local:/$ ‘ 或其他任何你想要显示的。 idid 参数为编辑器/终端的实例设置一个唯一的 id。对于同一个帖子中的多个实例， id 必须是不同的。 highlightingLanghighlightingLang 定义了指定的高亮显示语言。如果未指定，将使用javascript。的支持语言列表 prismjs homepage. _config.ymlIf you do not want to use the CDN, fill in the following: FAQPlease read here if you can not display gdemo well. hexo-tag-gdemo/issues/ Example1. When using gdemo_terminal %%% gdemo_terminal ‘node ./demo’ ‘250px’ ‘bash’ ‘500’ ‘$’ ‘demo-teriminal’ %%%-Hello World!%%% endgdemo_terminal %%%- 2. When using gdemo_terminal [multiple commands] command can be divided into multiple commands based on ;. %%% gdemo_terminal ‘cd /usr/bin;./node ./demo’ ‘250px’ ‘bash’ ‘500’ ‘$’ ‘demo—teriminal’ %%%-Hello World!%%% endgdemo_terminal %%%- 3. When using gdemo_editor %%% gdemo_editor ‘250px’ ‘bash’ ‘500’ ‘demo-editor’ %%%-function greet(){ console.log(“Hello World!”);} greet();%%% endgdemo_editor %%%- See more here. LicenseMIT Thanks @rafaelcamargo "},{"title":"hexo操作介绍","date":"2021-03-31T12:00:55.000Z","url":"/posts/e93e/","tags":[["📁 HEXO","/tags/%F0%9F%93%81-HEXO/"]],"categories":[["🔖 Life","/categories/%F0%9F%94%96-Life/"]],"content":"hexo 简写hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate --watch #监视文件变动 完成后部署 两个命令的作用是相同的hexo generate --deployhexo deploy --generate 草稿 模版hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHub 变量 描述 layout 布局 title 标题 date 文件建立日期 模版（Scaffold） 变量 描述 layout 布局 title 标题 date 文件建立日期 设置文章摘要 写作 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 推送到服务器上"},{"title":"三自由度机械臂vc6.0源码（未修改）","date":"2021-03-03T21:20:55.000Z","url":"/posts/e556/","tags":[["⚙️ Machine","/tags/%E2%9A%99%EF%B8%8F-Machine/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":" "},{"title":"Tag Plugins Plus","date":"2020-11-14T15:55:44.000Z","url":"/posts/a06e/","tags":[["💻 Hexo","/tags/%F0%9F%92%BB-Hexo/"]],"categories":[["💻 Code","/categories/%F0%9F%92%BB-Code/"]],"content":"%%% tip home %%%-本文档节选自🧊Akilarの糖果屋🍭，保留了大部分常用的。 节选！！节选！！节选！！看全文请移步糖果屋 %%% endtip %%%- %%% link 糖果屋教程贴, ,  %%%- 行内文本样式 text%%% tabs text,2 %%%- 带 %%% u 下划线 %%%- 的文本 带 %%% emp 着重号 %%%- 的文本 带 %%% wavy 波浪线 %%%- 的文本 带 %%% del 删除线 %%%- 的文本 键盘样式的文本 %%% kbd command %%%- + %%% kbd D %%%- 密码样式的文本：%%% psw 这里没有验证码 %%%- %%% endtabs%%%- 行内文本 span%%% tabs span,3 %%%- 字体: logo, code 颜色: %%% span red, red %%%-,%%% span yellow, yellow %%%-,%%% span green, green %%%-,%%% span cyan, cyan %%%-,%%% span blue, blue %%%-,%%% span gray, gray %%%- 大小: small, h4, h3, h2, h1, large, huge, ultra 对齐方向: left, center, right 彩色文字在一段话中方便插入各种颜色的标签，包括：%%% span red, 红色 %%%-、%%% span yellow, 黄色 %%%-、%%% span green, 绿色 %%%-、%%% span cyan, 青色 %%%-、%%% span blue, 蓝色 %%%-、%%% span gray, 灰色 %%%-。 超大号文字文档「开始」页面中的标题部分就是超大号文字。%%% span center logo large, Volantis %%%-%%% span center small, A Wonderful Theme for Hexo %%%- %%% endtabs%%%- 段落文本 p%%% tabs p,3 %%%- 字体: logo, code 颜色: %%% span red, red %%%-,%%% span yellow, yellow %%%-,%%% span green, green %%%-,%%% span cyan, cyan %%%-,%%% span blue, blue %%%-,%%% span gray, gray %%%- 大小: small, h4, h3, h2, h1, large, huge, ultra 对齐方向: left, center, right 彩色文字在一段话中方便插入各种颜色的标签，包括：%%% p red, 红色 %%%-、%%% p yellow, 黄色 %%%-、%%% p green, 绿色 %%%-、%%% p cyan, 青色 %%%-、%%% p blue, 蓝色 %%%-、%%% p gray, 灰色 %%%-。 超大号文字文档「开始」页面中的标题部分就是超大号文字。%%% p center logo large, Volantis %%%-%%% p center small, A Wonderful Theme for Hexo %%%- %%% endtabs%%%- 引用 note%%% note warning %%%-最新版butterfly标签支持引用fontawesome V5图标，效果上已经优于volantis的note标签。故不再额外引入volantis的note样式。做样式适配好麻烦的啊，能偷懒就偷懒吧%%% endnote %%%-%%% note blue ‘fas fa-bullhorn’ modern %%%-以下是butterfly主题的note写法。%%% endnote %%%-%%% tabs note,4 %%%- 修改主题配置文件 Note标签外挂有两种用法。icons和light_bg_offset只对方法一生效。 %%% folding cyan , 方法一 %%%- %%% endfolding %%%- %%% folding blue , 方法二 %%%- %%% endfolding %%%- %%% folding cyan , 方法一 %%%- 参数 用法 class 【可选】标识，不同的标识有不同的配色（ default / primary / success / info / warning / danger ） no-icon 【可选】不显示 icon style 【可选】可以覆盖配置中的 style（simple/modern/flat/disabled） %%% endfolding %%%-%%% folding blue , 方法二 %%%- 参数 用法 class 【可选】标识，不同的标识有不同的配色（ default / primary / success / info / warning / danger ） no-icon 【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon ) style 【可选】可以覆盖配置中的 style（simple/modern/flat/disabled） %%% endfolding %%%- %%% folding cyan , 方法一 %%%- simple样式 %%% note simple %%%-默认 提示块标签%%% endnote %%%- %%% note default simple %%%-default 提示块标签%%% endnote %%%- %%% note primary simple %%%-primary 提示块标签%%% endnote %%%- %%% note success simple %%%-success 提示块标签%%% endnote %%%- %%% note info simple %%%-info 提示块标签%%% endnote %%%- %%% note warning simple %%%-warning 提示块标签%%% endnote %%%- %%% note danger simple %%%-danger 提示块标签%%% endnote %%%- modern样式 %%% note modern %%%-默认 提示块标签%%% endnote %%%- %%% note default modern %%%-default 提示块标签%%% endnote %%%- %%% note primary modern %%%-primary 提示块标签%%% endnote %%%- %%% note success modern %%%-success 提示块标签%%% endnote %%%- %%% note info modern %%%-info 提示块标签%%% endnote %%%- %%% note warning modern %%%-warning 提示块标签%%% endnote %%%- %%% note danger modern %%%-danger 提示块标签%%% endnote %%%- flat样式 %%% note flat %%%-默认 提示块标签%%% endnote %%%- %%% note default flat %%%-default 提示块标签%%% endnote %%%- %%% note primary flat %%%-primary 提示块标签%%% endnote %%%- %%% note success flat %%%-success 提示块标签%%% endnote %%%- %%% note info flat %%%-info 提示块标签%%% endnote %%%- %%% note warning flat %%%-warning 提示块标签%%% endnote %%%- %%% note danger flat %%%-danger 提示块标签%%% endnote %%%- disabled样式 %%% note disabled %%%-默认 提示块标签%%% endnote %%%- %%% note default disabled %%%-default 提示块标签%%% endnote %%%- %%% note primary disabled %%%-primary 提示块标签%%% endnote %%%- %%% note success disabled %%%-success 提示块标签%%% endnote %%%- %%% note info disabled %%%-info 提示块标签%%% endnote %%%- %%% note warning disabled %%%-warning 提示块标签%%% endnote %%%- %%% note danger disabled %%%-danger 提示块标签%%% endnote %%%- no-icon样式 %%% note no-icon %%%-默认 提示块标签%%% endnote %%%- %%% note default no-icon %%%-default 提示块标签%%% endnote %%%- %%% note primary no-icon %%%-primary 提示块标签%%% endnote %%%- %%% note success no-icon %%%-success 提示块标签%%% endnote %%%- %%% note info no-icon %%%-info 提示块标签%%% endnote %%%- %%% note warning no-icon %%%-warning 提示块标签%%% endnote %%%- %%% note danger no-icon %%%-danger 提示块标签%%% endnote %%%- %%% endfolding %%%-%%% folding blue , 方法二 %%%- simple样式 %%% note ‘fab fa-cc-visa’ simple %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note blue ‘fas fa-bullhorn’ simple %%%-2021年快到了….%%% endnote %%%- %%% note pink ‘fas fa-car-crash’ simple %%%-小心开车 安全至上%%% endnote %%%- %%% note red ‘fas fa-fan’ simple%%%-这是三片呢？还是四片？%%% endnote %%%- %%% note orange ‘fas fa-battery-half’ simple %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note purple ‘far fa-hand-scissors’ simple %%%-剪刀石头布%%% endnote %%%- %%% note green ‘fab fa-internet-explorer’ simple %%%-前端最讨厌的浏览器%%% endnote %%%- modern样式 %%% note ‘fab fa-cc-visa’ modern %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note blue ‘fas fa-bullhorn’ modern %%%-2021年快到了….%%% endnote %%%- %%% note pink ‘fas fa-car-crash’ modern %%%-小心开车 安全至上%%% endnote %%%- %%% note red ‘fas fa-fan’ modern%%%-这是三片呢？还是四片？%%% endnote %%%- %%% note orange ‘fas fa-battery-half’ modern %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note purple ‘far fa-hand-scissors’ modern %%%-剪刀石头布%%% endnote %%%- %%% note green ‘fab fa-internet-explorer’ modern %%%-前端最讨厌的浏览器%%% endnote %%%- flat样式 %%% note ‘fab fa-cc-visa’ flat %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note blue ‘fas fa-bullhorn’ flat %%%-2021年快到了….%%% endnote %%%- %%% note pink ‘fas fa-car-crash’ flat %%%-小心开车 安全至上%%% endnote %%%- %%% note red ‘fas fa-fan’ flat%%%-这是三片呢？还是四片？%%% endnote %%%- %%% note orange ‘fas fa-battery-half’ flat %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note purple ‘far fa-hand-scissors’ flat %%%-剪刀石头布%%% endnote %%%- %%% note green ‘fab fa-internet-explorer’ flat %%%-前端最讨厌的浏览器%%% endnote %%%- disabled样式 %%% note ‘fab fa-cc-visa’ disabled %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note blue ‘fas fa-bullhorn’ disabled %%%-2021年快到了….%%% endnote %%%- %%% note pink ‘fas fa-car-crash’ disabled %%%-小心开车 安全至上%%% endnote %%%- %%% note red ‘fas fa-fan’ disabled %%%-这是三片呢？还是四片？%%% endnote %%%- %%% note orange ‘fas fa-battery-half’ disabled %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note purple ‘far fa-hand-scissors’ disabled %%%-剪刀石头布%%% endnote %%%- %%% note green ‘fab fa-internet-explorer’ disabled %%%-前端最讨厌的浏览器%%% endnote %%%- no-icon样式 %%% note no-icon %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note blue no-icon %%%-2021年快到了….%%% endnote %%%- %%% note pink no-icon %%%-小心开车 安全至上%%% endnote %%%- %%% note red no-icon %%%-这是三片呢？还是四片？%%% endnote %%%- %%% note orange no-icon %%%-你是刷 Visa 还是 UnionPay%%% endnote %%%- %%% note purple no-icon %%%-剪刀石头布%%% endnote %%%- %%% note green no-icon %%%-前端最讨厌的浏览器%%% endnote %%%- %%% endfolding %%%- %%% folding cyan , 方法一 %%%- simple样式 modern样式 flat样式 disabled样式 no-icon样式 %%% endfolding %%%-%%% folding blue , 方法二 %%%- simple样式 modern样式 flat样式 disabled样式 no-icon样式 %%% endfolding %%%- %%% endtabs %%%- 上标标签 tip%%% tip cogs %%%-主要样式参考自小康的butterfly渐变背景标签,自己写了个tip.js来渲染标签，精简了一下代码。%%% endtip %%%- %%% tabs tip,3 %%%- 样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell 自定义图标: 支持fontawesome。 %%% tip %%%-默认情况%%% endtip %%%-%%% tip success %%%-success%%% endtip %%%-%%% tip error %%%-error%%% endtip %%%-%%% tip warning %%%-warning%%% endtip %%%-%%% tip bolt %%%-bolt%%% endtip %%%-%%% tip ban %%%-ban%%% endtip %%%-%%% tip home %%%-home%%% endtip %%%-%%% tip sync %%%-sync%%% endtip %%%-%%% tip cogs %%%-cogs%%% endtip %%%-%%% tip key %%%-key%%% endtip %%%-%%% tip bell %%%-bell%%% endtip %%%-%%% tip fa-atom %%%-自定义font awesome图标%%% endtip %%%- %%% endtabs%%%- 动态标签 anima%%% tip faa-horizontal animated %%%-动态标签的实质是引用了font-awesome-animation的css样式，不一定局限于tip标签，也可以是其他标签。只不过这里tip.js是我自己写的，所以我清楚它会怎么被渲染成html，才用的这个写法。可以熟读文档，使用html语言来编写其他标签类型。%%% endtip %%%- %%% tabs tip,3 %%%- %%% note blue ‘fas fa-bullhorn’ simple %%%-更多详情请参看font-awesome-animation文档 将所需的CSS类添加到图标（或DOM中的任何元素）。 对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类faa-parent animated-hover。（详情见示例及示例源码）You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow 可以通过给目标元素添加CSS类faa-fast或faa-slow来控制动画快慢。%%% endnote %%%- On DOM load当页面加载时显示动画 On hover当鼠标悬停时显示动画 On parent hover当鼠标悬停在父级元素时显示动画 &nbsp;faa-wrench animated &nbsp;faa-wrench animated-hover &nbsp;faa-wrench &nbsp;faa-ring animated &nbsp;faa-ring animated-hover &nbsp;faa-ring &nbsp;faa-horizontal animated &nbsp;faa-horizontal animated-hover &nbsp;faa-horizontal &nbsp;faa-vertical animated &nbsp;faa-vertical animated-hover &nbsp;faa-vertical &nbsp;faa-flash animated &nbsp;faa-flash animated-hover &nbsp;faa-flash &nbsp;faa-bounce animated &nbsp;faa-bounce animated-hover &nbsp;faa-bounce &nbsp;faa-spin animated &nbsp;faa-spin animated-hover &nbsp;faa-spin &nbsp;faa-tada animated &nbsp;faa-tada animated-hover &nbsp;faa-tada &nbsp;faa-pulse animated &nbsp;faa-pulse animated-hover &nbsp;faa-pulse &nbsp;faa-shake animated &nbsp;faa-shake animated-hover &nbsp;faa-shake &nbsp;faa-tada animated &nbsp;faa-tada animated-hover &nbsp;faa-tada &nbsp;faa-passing animated &nbsp;faa-passing animated-hover &nbsp;faa-passing &nbsp;faa-passing-reverse animated &nbsp;faa-passing-reverse animated-hover &nbsp;faa-passing-reverse &nbsp;faa-burst animated &nbsp;faa-burst animated-hover &nbsp;faa-burst &nbsp;faa-falling animated &nbsp;faa-falling animated-hover &nbsp;faa-falling &nbsp;faa-rising animated &nbsp;faa-rising animated-hover &nbsp;faa-rising On DOM load（当页面加载时显示动画） %%% tip warning faa-horizontal animated %%%-warning%%% endtip %%%- %%% tip ban faa-flash animated %%%-ban%%% endtip %%%- 调整动画速度。 %%% tip warning faa-horizontal animated faa-fast %%%-warning%%% endtip %%%- %%% tip ban faa-flash animated faa-slow %%%-ban%%% endtip %%%- On hover（当鼠标悬停时显示动画） %%% tip warning faa-horizontal animated-hover %%%-warning%%% endtip %%%- %%% tip ban faa-flash animated-hover %%%-ban%%% endtip %%%- On parent hover（当鼠标悬停在父级元素时显示动画） %%% tip warning faa-parent animated-hover %%%-warning%%% endtip %%%- %%% tip ban faa-parent animated-hover %%%-ban%%% endtip %%%- On DOM load（当页面加载时显示动画） 调整动画速度 On hover（当鼠标悬停时显示动画） On parent hover（当鼠标悬停在父级元素时显示动画） %%% endtabs%%%- 复选列表 checkbox%%% tabs checkbox,3 %%%- 样式: plus, minus, times 颜色: %%% span red, red %%%-,%%% span yellow, yellow %%%-,%%% span green, green %%%-,%%% span cyan, cyan %%%-,%%% span blue, blue %%%-,%%% span gray, gray %%%- 选中状态: checked %%% checkbox 纯文本测试 %%%-%%% checkbox checked, 支持简单的 markdown 语法 %%%-%%% checkbox red, 支持自定义颜色 %%%-%%% checkbox green checked, 绿色 + 默认选中 %%%-%%% checkbox yellow checked, 黄色 + 默认选中 %%%-%%% checkbox cyan checked, 青色 + 默认选中 %%%-%%% checkbox blue checked, 蓝色 + 默认选中 %%%-%%% checkbox plus green checked, 增加 %%%-%%% checkbox minus yellow checked, 减少 %%%-%%% checkbox times red checked, 叉 %%%- %%% endtabs%%%- 单选列表 radio%%% tabs radio,3 %%%- 颜色: %%% span red, red %%%-,%%% span yellow, yellow %%%-,%%% span green, green %%%-,%%% span cyan, cyan %%%-,%%% span blue, blue %%%-,%%% span gray, gray %%%- 选中状态: checked %%% radio 纯文本测试 %%%-%%% radio checked, 支持简单的 markdown 语法 %%%-%%% radio red, 支持自定义颜色 %%%-%%% radio green, 绿色 %%%-%%% radio yellow, 黄色 %%%-%%% radio cyan, 青色 %%%-%%% radio blue, 蓝色 %%%- %%% endtabs%%%- 时间轴 timeline%%% tabs timeline,2 %%%- %%% timeline %%%- %%% timenode 2020-07-24 2.6.6 -&gt; 3.0 %%%- 如果有 hexo-lazyload-image 插件，需要删除并重新安装最新版本，设置 lazyload.isSPA: true。 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 use_cdn: true 则需要删除。 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。 2.x 版本的置顶 top: true 改为了 pin: true，并且同样适用于 layout: page 的页面。 如果使用了 hexo-offline 插件，建议卸载，3.0 版本默认开启了 pjax 服务。 %%% endtimenode %%%- %%% timenode 2020-05-15 2.6.3 -&gt; 2.6.6 %%%- 不需要额外处理。 %%% endtimenode %%%- %%% timenode 2020-04-20 2.6.2 -&gt; 2.6.3 %%%- 全局搜索 seotitle 并替换为 seo_title。 group 组件的索引规则有变，使用 group 组件的文章内，group: group_name 对应的组件名必须是 group_name。 group 组件的列表名优先显示文章的 short_title 其次是 title。 %%% endtimenode %%%- %%% endtimeline %%%- %%% endtabs%%%- 链接卡片 link%%% tabs link,2 %%%- %%% link 糖果屋教程贴, ,  %%%- %%% endtabs%%%- 按钮 btns%%% note blue ‘fas fa-bullhorn’ simple %%%-Volantis的按钮使用的是btn和btns标签。btns和butterfly的button不冲突，但是btn会被强制渲染，导致部分参数失效,而且btn的效果还是butterfly的button更好看些。所以就只适配了btns。%%% endnote %%%-%%% tabs btn,3 %%%- 圆角样式：rounded, circle 增加文字样式：可以在容器内增加 &lt;b&gt;标题&lt;/b&gt; 和 &lt;p&gt;描述文字&lt;/p&gt; 布局方式：默认为自动宽度，适合视野内只有一两个的情况。 参数 含义 wide 宽一点的按钮 fill 填充布局，自动铺满至少一行，多了会换行 center 居中，按钮之间是固定间距 around 居中分散 grid2 等宽最多2列，屏幕变窄会适当减少列数 grid3 等宽最多3列，屏幕变窄会适当减少列数 grid4 等宽最多4列，屏幕变窄会适当减少列数 grid5 等宽最多5列，屏幕变窄会适当减少列数 如果需要显示类似「团队成员」之类的一组含有头像的链接： %%% btns circle grid5 %%%- %%% cell xaoxuu, ,  %%%- %%% cell xaoxuu, ,  %%%- %%% cell xaoxuu, ,  %%%- %%% cell xaoxuu, ,  %%%- %%% cell xaoxuu, ,  %%%- %%% endbtns %%%- 或者含有图标的按钮： %%% btns rounded grid5 %%%- %%% cell 下载源码, /, fas fa-download %%%- %%% cell 查看文档, /, fas fa-book-open %%%- %%% endbtns %%%- 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 %%% btns circle center grid5 %%%- 心率管家 %%% p red, 专业版 %%%- 心率管家 %%% p green, 免费版 %%%- %%% endbtns %%%- 如果需要显示类似「团队成员」之类的一组含有头像的链接： 或者含有图标的按钮： 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 %%% endtabs%%%- github卡片 ghcard%%% note blue ‘fas fa-bullhorn’ modern %%%-ghcard使用了github-readme-stats的API，支持直接使用markdown语法来写。%%% endnote %%%- %%% tabs ghcard,3 %%%- 更多参数可以参考：%%% ghcard anuraghazra/github-readme-stats %%%-使用,分割各个参数。写法为：参数名=参数值以下只写几个常用参数值。 参数名 取值 释义 hide stars,commits,prs,issues,contribs 隐藏指定统计 count_private true 将私人项目贡献添加到总提交计数中 show_icons true 显示图标 theme 请查阅Available Themes 主题 用户信息卡片 %%% ghcard xaoxuu %%%- %%% ghcard xaoxuu, theme=vue %%%- %%% ghcard xaoxuu, theme=buefy %%%- %%% ghcard xaoxuu, theme=solarized-light %%%- %%% ghcard xaoxuu, theme=onedark %%%- %%% ghcard xaoxuu, theme=solarized-dark %%%- %%% ghcard xaoxuu, theme=algolia %%%- %%% ghcard xaoxuu, theme=calm %%%- 仓库信息卡片 %%% ghcard volantis-x/hexo-theme-volantis %%%- %%% ghcard volantis-x/hexo-theme-volantis, theme=vue %%%- %%% ghcard volantis-x/hexo-theme-volantis, theme=buefy %%%- %%% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %%%- %%% ghcard volantis-x/hexo-theme-volantis, theme=onedark %%%- %%% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %%%- %%% ghcard volantis-x/hexo-theme-volantis, theme=algolia %%%- %%% ghcard volantis-x/hexo-theme-volantis, theme=calm %%%- 用户信息卡片 仓库信息卡片 %%% endtabs%%%- 行内图片 inlineimage%%% tabs inlineimage,3 %%%- 高度：height=20px 这是 %%% inlineimage  %%%- 一段话。 这又是 %%% inlineimage , height=40px %%%- 一段话。 %%% endtabs%%%- 视频 video 不知道为什么加了会乱码 折叠框 folding%%% note blue ‘fas fa-bullhorn’ disabled %%%-Butterfly虽然也有内置折叠框hideToggle标签，但是Volantis的folding折叠框更好看一些。%%% endnote %%%-%%% tabs folding,3 %%%- 颜色：blue, cyan, green, yellow, red 状态：状态填写 open 代表默认打开。 %%% folding 查看图片测试 %%%- %%% endfolding %%%- %%% folding cyan open, 查看默认打开的折叠框 %%%- 这是一个默认打开的折叠框。 %%% endfolding %%%- %%% folding green, 查看代码测试 %%%- %%% endfolding %%%- %%% folding yellow, 查看列表测试 %%%- haha hehe %%% endfolding %%%- %%% folding red, 查看嵌套测试 %%%- %%% folding blue, 查看嵌套测试2 %%%- %%% folding 查看嵌套测试3 %%%- hahaha %%% endfolding %%%- %%% endfolding %%%- %%% endfolding %%%- %%% endtabs%%%- 分栏 tab%%% note blue ‘fas fa-bullhorn’ disabled %%%-Butterfly的tab标签和Volantis的tab标签都是移值自NexT主题，所以写法和效果一模一样。%%% endnote %%%-%%% tabs folding,3 %%%- Unique name : 选项卡块标签的唯一名称，不带逗号。 将在#id中用作每个标签及其索引号的前缀。 如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。 仅当前帖子/页面的URL必须是唯一的！ [index]: 活动选项卡的索引号。 如果未指定，将选择第一个标签（1）。 如果index为-1，则不会选择任何选项卡。 可选参数。 [Tab caption]: 当前选项卡的标题。 如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。 如果未指定标题，但指定了图标，则标题将为空。 可选参数。 [@icon]: FontAwesome图标名称（全名，看起来像“ fas fa-font”） 可以指定带空格或不带空格； 例如’Tab caption @icon’ 和 ‘Tab caption@icon’. 可选参数。 %%% note primary %%%-Demo 1 - 预设选择第一个【默认】%%% endnote %%%- %%% tabs test1 %%%- This is Tab 1. This is Tab 2. This is Tab 3. %%% endtabs %%%- %%% note primary %%%-Demo 2 - 预设选择tabs%%% endnote %%%- %%% tabs test2, 3 %%%- This is Tab 1. This is Tab 2. This is Tab 3. %%% endtabs %%%- %%% note primary %%%-Demo 3 - 没有预设值%%% endnote %%%- %%% tabs test3, -1 %%%- This is Tab 1. This is Tab 2. This is Tab 3. %%% endtabs %%%- %%% note primary %%%-Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名%%% endnote %%%- %%% tabs test4 %%%- tab名字为第一个Tab 只有图标 没有Tab名字 名字+icon %%% endtabs %%%- %%% note primary %%%-Demo 1 - 预设选择第一个【默认】%%% endnote %%%- %%% note primary %%%-Demo 2 - 预设选择tabs%%% endnote %%%- %%% note primary %%%-Demo 3 - 没有预设值%%% endnote %%%- %%% note primary %%%-Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名%%% endnote %%%- %%% endtabs%%%- 诗词标签 poem%%% tabs poem,3 %%%- title：诗词标题 author：作者，可以不写 %%% poem 水调歌头,苏轼 %%%- 明月几时有？把酒问青天。不知天上宫阙，今夕是何年？我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间？转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。%%% endpoem %%%- %%% endtabs%%%- 阿里图标 icon%%% tip cogs %%%-本标签的图标需要自己额外引入阿里矢量图标库的样式，具体引入方案请移步：Hexo引入阿里矢量图标库%%% endtip %%%- %%% tabs icon示例,3 %%%- icon-xxxx：表示图标font-class,可以在自己的阿里矢量图标库项目的font-class引用方案内查询并复制。 font-size：表示图标大小，直接填写数字即可，单位为em。图标大小默认值为1em。 %%% icon icon-rat_zi %%%- %%% icon icon-rat,2 %%%- %%% icon icon-ox_chou,3 %%%- %%% icon icon-ox,4 %%%- %%% icon icon-tiger_yin,5 %%%- %%% icon icon-tiger,6 %%%- %%% icon icon-rabbit_mao,1 %%%- %%% icon icon-rabbit,2 %%%- %%% icon icon-dragon_chen,3 %%%- %%% icon icon-dragon,4 %%%- %%% icon icon-snake_si,5 %%%- %%% icon icon-snake,6 %%%- %%% icon icon-horse_wu %%%- %%% icon icon-horse,2 %%%- %%% icon icon-goat_wei,3 %%%- %%% icon icon-goat,4 %%%- %%% icon icon-monkey_shen,5 %%%- %%% icon icon-monkey,6 %%%- %%% icon icon-rooster_you %%%- %%% icon icon-rooster,2 %%%- %%% icon icon-dog_xu,3 %%%- %%% icon icon-dog,4 %%%- %%% icon icon-boar_hai,5 %%%- %%% icon icon-boar,6 %%%- %%% endtabs %%%- 进度条 progress%%% note info morden %%%-进度条标签参考沂佰孜猫-给HEXO文章添加彩色进度条。源样式提取自Cuteen主题。%%% endnote %%%-%%% tabs progress,3 %%%- width: 0到100的阿拉伯数字color: 颜色，取值有%%% span red, red %%%-,%%% span yellow, yellow %%%-,%%% span green, green %%%-,%%% span cyan, cyan %%%-,%%% span blue, blue %%%-,%%% span gray, gray %%%-text:进度条上的文字内容 %%% progress 10 red 进度条样式预览 %%%-%%% progress 30 yellow 进度条样式预览 %%%-%%% progress 50 green 进度条样式预览 %%%-%%% progress 70 cyan 进度条样式预览 %%%-%%% progress 90 blue 进度条样式预览 %%%-%%% progress 100 gray 进度条样式预览 %%%- %%% endtabs%%%- 注释 notation%%% tabs notation,3 %%%- label: 注释词汇text: 悬停显示的注解内容 %%% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %%%- %%% endtabs%%%-"},{"title":"categories","date":"2021-10-04T22:21:08.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"friend","date":"2021-10-04T22:21:52.000Z","url":"/friends/index.html","categories":[[" ",""]],"content":"我的友链"},{"title":"search","date":"2021-10-04T22:20:44.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2021-10-04T22:20:59.000Z","url":"/tags/index.html","categories":[[" ",""]]}]